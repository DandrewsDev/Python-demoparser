<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1125.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="157"><g><title>[unknown] (4 samples, 2.55%)</title><rect x="0.0000%" y="1045" width="2.5478%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1055.50">[u..</text></g><g><title>[unknown] (4 samples, 2.55%)</title><rect x="0.0000%" y="1029" width="2.5478%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1039.50">[u..</text></g><g><title>[unknown] (4 samples, 2.55%)</title><rect x="0.0000%" y="1013" width="2.5478%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1023.50">[u..</text></g><g><title>[unknown] (4 samples, 2.55%)</title><rect x="0.0000%" y="997" width="2.5478%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1007.50">[u..</text></g><g><title>[unknown] (4 samples, 2.55%)</title><rect x="0.0000%" y="981" width="2.5478%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4"/><text x="0.2500%" y="991.50">[u..</text></g><g><title>[unknown] (4 samples, 2.55%)</title><rect x="0.0000%" y="965" width="2.5478%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4"/><text x="0.2500%" y="975.50">[u..</text></g><g><title>[unknown] (4 samples, 2.55%)</title><rect x="0.0000%" y="949" width="2.5478%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="959.50">[u..</text></g><g><title>[unknown] (4 samples, 2.55%)</title><rect x="0.0000%" y="933" width="2.5478%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4"/><text x="0.2500%" y="943.50">[u..</text></g><g><title>[unknown] (4 samples, 2.55%)</title><rect x="0.0000%" y="917" width="2.5478%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="927.50">[u..</text></g><g><title>[unknown] (4 samples, 2.55%)</title><rect x="0.0000%" y="901" width="2.5478%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="4"/><text x="0.2500%" y="911.50">[u..</text></g><g><title>[unknown] (4 samples, 2.55%)</title><rect x="0.0000%" y="885" width="2.5478%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="895.50">[u..</text></g><g><title>[unknown] (4 samples, 2.55%)</title><rect x="0.0000%" y="869" width="2.5478%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="879.50">[u..</text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="1.2739%" y="853" width="1.2739%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="2"/><text x="1.5239%" y="863.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="1.2739%" y="837" width="1.2739%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="2"/><text x="1.5239%" y="847.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="1.2739%" y="821" width="1.2739%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="2"/><text x="1.5239%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="1.9108%" y="805" width="0.6369%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="2.1608%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="1.9108%" y="789" width="0.6369%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="2.1608%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="1.9108%" y="773" width="0.6369%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="2.1608%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="1.9108%" y="757" width="0.6369%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="2.1608%" y="767.50"></text></g><g><title>demoparser::main (1 samples, 0.64%)</title><rect x="2.5478%" y="1045" width="0.6369%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="1"/><text x="2.7978%" y="1055.50"></text></g><g><title>demoparser::parsing::parser::Demo::start_parsing (1 samples, 0.64%)</title><rect x="2.5478%" y="1029" width="0.6369%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="1"/><text x="2.7978%" y="1039.50"></text></g><g><title>demoparser::parsing::parser::Demo::parse_cmd (1 samples, 0.64%)</title><rect x="2.5478%" y="1013" width="0.6369%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="1"/><text x="2.7978%" y="1023.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_datatable (1 samples, 0.64%)</title><rect x="2.5478%" y="997" width="0.6369%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="1"/><text x="2.7978%" y="1007.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::flatten_dt (1 samples, 0.64%)</title><rect x="2.5478%" y="981" width="0.6369%" height="15" fill="rgb(247,18,42)" fg:x="4" fg:w="1"/><text x="2.7978%" y="991.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (1 samples, 0.64%)</title><rect x="2.5478%" y="965" width="0.6369%" height="15" fill="rgb(241,131,45)" fg:x="4" fg:w="1"/><text x="2.7978%" y="975.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (1 samples, 0.64%)</title><rect x="2.5478%" y="949" width="0.6369%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="1"/><text x="2.7978%" y="959.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as core::clone::Clone&gt;::clone (1 samples, 0.64%)</title><rect x="2.5478%" y="933" width="0.6369%" height="15" fill="rgb(225,111,53)" fg:x="4" fg:w="1"/><text x="2.7978%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.64%)</title><rect x="2.5478%" y="917" width="0.6369%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="1"/><text x="2.7978%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.64%)</title><rect x="2.5478%" y="901" width="0.6369%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="1"/><text x="2.7978%" y="911.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.64%)</title><rect x="2.5478%" y="885" width="0.6369%" height="15" fill="rgb(232,36,49)" fg:x="4" fg:w="1"/><text x="2.7978%" y="895.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.64%)</title><rect x="2.5478%" y="869" width="0.6369%" height="15" fill="rgb(209,103,24)" fg:x="4" fg:w="1"/><text x="2.7978%" y="879.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as core::clone::Clone&gt;::clone (1 samples, 0.64%)</title><rect x="2.5478%" y="853" width="0.6369%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="1"/><text x="2.7978%" y="863.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.64%)</title><rect x="2.5478%" y="837" width="0.6369%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="1"/><text x="2.7978%" y="847.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.64%)</title><rect x="2.5478%" y="821" width="0.6369%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="1"/><text x="2.7978%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.64%)</title><rect x="2.5478%" y="805" width="0.6369%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="1"/><text x="2.7978%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.64%)</title><rect x="2.5478%" y="789" width="0.6369%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="1"/><text x="2.7978%" y="799.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.64%)</title><rect x="2.5478%" y="773" width="0.6369%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="1"/><text x="2.7978%" y="783.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.64%)</title><rect x="2.5478%" y="757" width="0.6369%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="1"/><text x="2.7978%" y="767.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.64%)</title><rect x="2.5478%" y="741" width="0.6369%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="1"/><text x="2.7978%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.64%)</title><rect x="2.5478%" y="725" width="0.6369%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="1"/><text x="2.7978%" y="735.50"></text></g><g><title>[libc.so.6] (1 samples, 0.64%)</title><rect x="2.5478%" y="709" width="0.6369%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="1"/><text x="2.7978%" y="719.50"></text></g><g><title>[unknown] (6 samples, 3.82%)</title><rect x="0.0000%" y="1061" width="3.8217%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1071.50">[unk..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (1 samples, 0.64%)</title><rect x="3.1847%" y="1045" width="0.6369%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="1"/><text x="3.4347%" y="1055.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (1 samples, 0.64%)</title><rect x="3.1847%" y="1029" width="0.6369%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="1"/><text x="3.4347%" y="1039.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (1 samples, 0.64%)</title><rect x="3.1847%" y="1013" width="0.6369%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="1"/><text x="3.4347%" y="1023.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (1 samples, 0.64%)</title><rect x="3.1847%" y="997" width="0.6369%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="1"/><text x="3.4347%" y="1007.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as core::clone::Clone&gt;::clone (1 samples, 0.64%)</title><rect x="3.1847%" y="981" width="0.6369%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="1"/><text x="3.4347%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.64%)</title><rect x="3.1847%" y="965" width="0.6369%" height="15" fill="rgb(250,191,14)" fg:x="5" fg:w="1"/><text x="3.4347%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.64%)</title><rect x="3.1847%" y="949" width="0.6369%" height="15" fill="rgb(239,60,40)" fg:x="5" fg:w="1"/><text x="3.4347%" y="959.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.64%)</title><rect x="3.1847%" y="933" width="0.6369%" height="15" fill="rgb(206,27,48)" fg:x="5" fg:w="1"/><text x="3.4347%" y="943.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.64%)</title><rect x="3.1847%" y="917" width="0.6369%" height="15" fill="rgb(225,35,8)" fg:x="5" fg:w="1"/><text x="3.4347%" y="927.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as core::clone::Clone&gt;::clone (1 samples, 0.64%)</title><rect x="3.1847%" y="901" width="0.6369%" height="15" fill="rgb(250,213,24)" fg:x="5" fg:w="1"/><text x="3.4347%" y="911.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.64%)</title><rect x="3.1847%" y="885" width="0.6369%" height="15" fill="rgb(247,123,22)" fg:x="5" fg:w="1"/><text x="3.4347%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.64%)</title><rect x="3.1847%" y="869" width="0.6369%" height="15" fill="rgb(231,138,38)" fg:x="5" fg:w="1"/><text x="3.4347%" y="879.50"></text></g><g><title>__GI_exit (2 samples, 1.27%)</title><rect x="3.8217%" y="1013" width="1.2739%" height="15" fill="rgb(231,145,46)" fg:x="6" fg:w="2"/><text x="4.0717%" y="1023.50"></text></g><g><title>__run_exit_handlers (2 samples, 1.27%)</title><rect x="3.8217%" y="997" width="1.2739%" height="15" fill="rgb(251,118,11)" fg:x="6" fg:w="2"/><text x="4.0717%" y="1007.50"></text></g><g><title>mi_process_done (2 samples, 1.27%)</title><rect x="3.8217%" y="981" width="1.2739%" height="15" fill="rgb(217,147,25)" fg:x="6" fg:w="2"/><text x="4.0717%" y="991.50"></text></g><g><title>mi_process_done (2 samples, 1.27%)</title><rect x="3.8217%" y="965" width="1.2739%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="2"/><text x="4.0717%" y="975.50"></text></g><g><title>mi_heap_collect_ex (2 samples, 1.27%)</title><rect x="3.8217%" y="949" width="1.2739%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="2"/><text x="4.0717%" y="959.50"></text></g><g><title>mi_segment_cache_purge (2 samples, 1.27%)</title><rect x="3.8217%" y="933" width="1.2739%" height="15" fill="rgb(227,1,9)" fg:x="6" fg:w="2"/><text x="4.0717%" y="943.50"></text></g><g><title>mi_commit_mask_decommit (2 samples, 1.27%)</title><rect x="3.8217%" y="917" width="1.2739%" height="15" fill="rgb(248,47,43)" fg:x="6" fg:w="2"/><text x="4.0717%" y="927.50"></text></g><g><title>_mi_os_decommit (2 samples, 1.27%)</title><rect x="3.8217%" y="901" width="1.2739%" height="15" fill="rgb(221,10,30)" fg:x="6" fg:w="2"/><text x="4.0717%" y="911.50"></text></g><g><title>mi_os_commitx (2 samples, 1.27%)</title><rect x="3.8217%" y="885" width="1.2739%" height="15" fill="rgb(210,229,1)" fg:x="6" fg:w="2"/><text x="4.0717%" y="895.50"></text></g><g><title>__GI_madvise (2 samples, 1.27%)</title><rect x="3.8217%" y="869" width="1.2739%" height="15" fill="rgb(222,148,37)" fg:x="6" fg:w="2"/><text x="4.0717%" y="879.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="3.8217%" y="853" width="1.2739%" height="15" fill="rgb(234,67,33)" fg:x="6" fg:w="2"/><text x="4.0717%" y="863.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="3.8217%" y="837" width="1.2739%" height="15" fill="rgb(247,98,35)" fg:x="6" fg:w="2"/><text x="4.0717%" y="847.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="3.8217%" y="821" width="1.2739%" height="15" fill="rgb(247,138,52)" fg:x="6" fg:w="2"/><text x="4.0717%" y="831.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="3.8217%" y="805" width="1.2739%" height="15" fill="rgb(213,79,30)" fg:x="6" fg:w="2"/><text x="4.0717%" y="815.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="3.8217%" y="789" width="1.2739%" height="15" fill="rgb(246,177,23)" fg:x="6" fg:w="2"/><text x="4.0717%" y="799.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="3.8217%" y="773" width="1.2739%" height="15" fill="rgb(230,62,27)" fg:x="6" fg:w="2"/><text x="4.0717%" y="783.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="3.8217%" y="757" width="1.2739%" height="15" fill="rgb(216,154,8)" fg:x="6" fg:w="2"/><text x="4.0717%" y="767.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="3.8217%" y="741" width="1.2739%" height="15" fill="rgb(244,35,45)" fg:x="6" fg:w="2"/><text x="4.0717%" y="751.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="3.8217%" y="725" width="1.2739%" height="15" fill="rgb(251,115,12)" fg:x="6" fg:w="2"/><text x="4.0717%" y="735.50"></text></g><g><title>&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.64%)</title><rect x="5.0955%" y="789" width="0.6369%" height="15" fill="rgb(240,54,50)" fg:x="8" fg:w="1"/><text x="5.3455%" y="799.50"></text></g><g><title>&lt;std::sys::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.64%)</title><rect x="5.0955%" y="773" width="0.6369%" height="15" fill="rgb(233,84,52)" fg:x="8" fg:w="1"/><text x="5.3455%" y="783.50"></text></g><g><title>__GI___readdir64 (1 samples, 0.64%)</title><rect x="5.0955%" y="757" width="0.6369%" height="15" fill="rgb(207,117,47)" fg:x="8" fg:w="1"/><text x="5.3455%" y="767.50"></text></g><g><title>__GI___getdents64 (1 samples, 0.64%)</title><rect x="5.0955%" y="741" width="0.6369%" height="15" fill="rgb(249,43,39)" fg:x="8" fg:w="1"/><text x="5.3455%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="5.0955%" y="725" width="0.6369%" height="15" fill="rgb(209,38,44)" fg:x="8" fg:w="1"/><text x="5.3455%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="5.0955%" y="709" width="0.6369%" height="15" fill="rgb(236,212,23)" fg:x="8" fg:w="1"/><text x="5.3455%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="5.0955%" y="693" width="0.6369%" height="15" fill="rgb(242,79,21)" fg:x="8" fg:w="1"/><text x="5.3455%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="5.0955%" y="677" width="0.6369%" height="15" fill="rgb(211,96,35)" fg:x="8" fg:w="1"/><text x="5.3455%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="5.0955%" y="661" width="0.6369%" height="15" fill="rgb(253,215,40)" fg:x="8" fg:w="1"/><text x="5.3455%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="5.0955%" y="645" width="0.6369%" height="15" fill="rgb(211,81,21)" fg:x="8" fg:w="1"/><text x="5.3455%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="5.0955%" y="629" width="0.6369%" height="15" fill="rgb(208,190,38)" fg:x="8" fg:w="1"/><text x="5.3455%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="5.0955%" y="613" width="0.6369%" height="15" fill="rgb(235,213,38)" fg:x="8" fg:w="1"/><text x="5.3455%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="5.0955%" y="597" width="0.6369%" height="15" fill="rgb(237,122,38)" fg:x="8" fg:w="1"/><text x="5.3455%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.64%)</title><rect x="5.7325%" y="725" width="0.6369%" height="15" fill="rgb(244,218,35)" fg:x="9" fg:w="1"/><text x="5.9825%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.64%)</title><rect x="5.7325%" y="709" width="0.6369%" height="15" fill="rgb(240,68,47)" fg:x="9" fg:w="1"/><text x="5.9825%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.64%)</title><rect x="5.7325%" y="693" width="0.6369%" height="15" fill="rgb(210,16,53)" fg:x="9" fg:w="1"/><text x="5.9825%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="5.7325%" y="677" width="0.6369%" height="15" fill="rgb(235,124,12)" fg:x="9" fg:w="1"/><text x="5.9825%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.64%)</title><rect x="5.7325%" y="661" width="0.6369%" height="15" fill="rgb(224,169,11)" fg:x="9" fg:w="1"/><text x="5.9825%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.64%)</title><rect x="5.7325%" y="645" width="0.6369%" height="15" fill="rgb(250,166,2)" fg:x="9" fg:w="1"/><text x="5.9825%" y="655.50"></text></g><g><title>mi_free (1 samples, 0.64%)</title><rect x="5.7325%" y="629" width="0.6369%" height="15" fill="rgb(242,216,29)" fg:x="9" fg:w="1"/><text x="5.9825%" y="639.50"></text></g><g><title>mi_block_set_next (1 samples, 0.64%)</title><rect x="5.7325%" y="613" width="0.6369%" height="15" fill="rgb(230,116,27)" fg:x="9" fg:w="1"/><text x="5.9825%" y="623.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.64%)</title><rect x="5.7325%" y="597" width="0.6369%" height="15" fill="rgb(228,99,48)" fg:x="9" fg:w="1"/><text x="5.9825%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::game_events::GameEvent&gt;&gt; (2 samples, 1.27%)</title><rect x="5.7325%" y="789" width="1.2739%" height="15" fill="rgb(253,11,6)" fg:x="9" fg:w="2"/><text x="5.9825%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 1.27%)</title><rect x="5.7325%" y="773" width="1.2739%" height="15" fill="rgb(247,143,39)" fg:x="9" fg:w="2"/><text x="5.9825%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::game_events::GameEvent]&gt; (2 samples, 1.27%)</title><rect x="5.7325%" y="757" width="1.2739%" height="15" fill="rgb(236,97,10)" fg:x="9" fg:w="2"/><text x="5.9825%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::game_events::GameEvent&gt; (2 samples, 1.27%)</title><rect x="5.7325%" y="741" width="1.2739%" height="15" fill="rgb(233,208,19)" fg:x="9" fg:w="2"/><text x="5.9825%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::game_events::NameDataPair&gt;&gt; (1 samples, 0.64%)</title><rect x="6.3694%" y="725" width="0.6369%" height="15" fill="rgb(216,164,2)" fg:x="10" fg:w="1"/><text x="6.6194%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="6.3694%" y="709" width="0.6369%" height="15" fill="rgb(220,129,5)" fg:x="10" fg:w="1"/><text x="6.6194%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::game_events::NameDataPair]&gt; (1 samples, 0.64%)</title><rect x="6.3694%" y="693" width="0.6369%" height="15" fill="rgb(242,17,10)" fg:x="10" fg:w="1"/><text x="6.6194%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::game_events::NameDataPair&gt; (1 samples, 0.64%)</title><rect x="6.3694%" y="677" width="0.6369%" height="15" fill="rgb(242,107,0)" fg:x="10" fg:w="1"/><text x="6.6194%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.64%)</title><rect x="6.3694%" y="661" width="0.6369%" height="15" fill="rgb(251,28,31)" fg:x="10" fg:w="1"/><text x="6.6194%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.64%)</title><rect x="6.3694%" y="645" width="0.6369%" height="15" fill="rgb(233,223,10)" fg:x="10" fg:w="1"/><text x="6.6194%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.64%)</title><rect x="6.3694%" y="629" width="0.6369%" height="15" fill="rgb(215,21,27)" fg:x="10" fg:w="1"/><text x="6.6194%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="6.3694%" y="613" width="0.6369%" height="15" fill="rgb(232,23,21)" fg:x="10" fg:w="1"/><text x="6.6194%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.64%)</title><rect x="6.3694%" y="597" width="0.6369%" height="15" fill="rgb(244,5,23)" fg:x="10" fg:w="1"/><text x="6.6194%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::game_events::GameEvent&gt;&gt; (1 samples, 0.64%)</title><rect x="7.0064%" y="773" width="0.6369%" height="15" fill="rgb(226,81,46)" fg:x="11" fg:w="1"/><text x="7.2564%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="7.0064%" y="757" width="0.6369%" height="15" fill="rgb(247,70,30)" fg:x="11" fg:w="1"/><text x="7.2564%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::game_events::GameEvent]&gt; (1 samples, 0.64%)</title><rect x="7.0064%" y="741" width="0.6369%" height="15" fill="rgb(212,68,19)" fg:x="11" fg:w="1"/><text x="7.2564%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::game_events::GameEvent&gt; (1 samples, 0.64%)</title><rect x="7.0064%" y="725" width="0.6369%" height="15" fill="rgb(240,187,13)" fg:x="11" fg:w="1"/><text x="7.2564%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::game_events::NameDataPair&gt;&gt; (1 samples, 0.64%)</title><rect x="7.0064%" y="709" width="0.6369%" height="15" fill="rgb(223,113,26)" fg:x="11" fg:w="1"/><text x="7.2564%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="7.0064%" y="693" width="0.6369%" height="15" fill="rgb(206,192,2)" fg:x="11" fg:w="1"/><text x="7.2564%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::game_events::NameDataPair]&gt; (1 samples, 0.64%)</title><rect x="7.0064%" y="677" width="0.6369%" height="15" fill="rgb(241,108,4)" fg:x="11" fg:w="1"/><text x="7.2564%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::game_events::NameDataPair&gt; (1 samples, 0.64%)</title><rect x="7.0064%" y="661" width="0.6369%" height="15" fill="rgb(247,173,49)" fg:x="11" fg:w="1"/><text x="7.2564%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.64%)</title><rect x="7.0064%" y="645" width="0.6369%" height="15" fill="rgb(224,114,35)" fg:x="11" fg:w="1"/><text x="7.2564%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.64%)</title><rect x="7.0064%" y="629" width="0.6369%" height="15" fill="rgb(245,159,27)" fg:x="11" fg:w="1"/><text x="7.2564%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.64%)</title><rect x="7.0064%" y="613" width="0.6369%" height="15" fill="rgb(245,172,44)" fg:x="11" fg:w="1"/><text x="7.2564%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="7.0064%" y="597" width="0.6369%" height="15" fill="rgb(236,23,11)" fg:x="11" fg:w="1"/><text x="7.2564%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.64%)</title><rect x="7.0064%" y="581" width="0.6369%" height="15" fill="rgb(205,117,38)" fg:x="11" fg:w="1"/><text x="7.2564%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.64%)</title><rect x="7.0064%" y="565" width="0.6369%" height="15" fill="rgb(237,72,25)" fg:x="11" fg:w="1"/><text x="7.2564%" y="575.50"></text></g><g><title>mi_free (1 samples, 0.64%)</title><rect x="7.0064%" y="549" width="0.6369%" height="15" fill="rgb(244,70,9)" fg:x="11" fg:w="1"/><text x="7.2564%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::Demo&gt; (2 samples, 1.27%)</title><rect x="7.0064%" y="789" width="1.2739%" height="15" fill="rgb(217,125,39)" fg:x="11" fg:w="2"/><text x="7.2564%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.64%)</title><rect x="7.6433%" y="773" width="0.6369%" height="15" fill="rgb(235,36,10)" fg:x="12" fg:w="1"/><text x="7.8933%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.64%)</title><rect x="7.6433%" y="757" width="0.6369%" height="15" fill="rgb(251,123,47)" fg:x="12" fg:w="1"/><text x="7.8933%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,demoparser::parsing::data_table::ServerClass)&gt;&gt; (1 samples, 0.64%)</title><rect x="7.6433%" y="741" width="0.6369%" height="15" fill="rgb(221,13,13)" fg:x="12" fg:w="1"/><text x="7.8933%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="7.6433%" y="725" width="0.6369%" height="15" fill="rgb(238,131,9)" fg:x="12" fg:w="1"/><text x="7.8933%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.64%)</title><rect x="7.6433%" y="709" width="0.6369%" height="15" fill="rgb(211,50,8)" fg:x="12" fg:w="1"/><text x="7.8933%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.64%)</title><rect x="7.6433%" y="693" width="0.6369%" height="15" fill="rgb(245,182,24)" fg:x="12" fg:w="1"/><text x="7.8933%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.64%)</title><rect x="7.6433%" y="677" width="0.6369%" height="15" fill="rgb(242,14,37)" fg:x="12" fg:w="1"/><text x="7.8933%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u16,demoparser::parsing::data_table::ServerClass)&gt; (1 samples, 0.64%)</title><rect x="7.6433%" y="661" width="0.6369%" height="15" fill="rgb(246,228,12)" fg:x="12" fg:w="1"/><text x="7.8933%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::data_table::ServerClass&gt; (1 samples, 0.64%)</title><rect x="7.6433%" y="645" width="0.6369%" height="15" fill="rgb(213,55,15)" fg:x="12" fg:w="1"/><text x="7.8933%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::entities::Prop&gt;&gt; (1 samples, 0.64%)</title><rect x="7.6433%" y="629" width="0.6369%" height="15" fill="rgb(209,9,3)" fg:x="12" fg:w="1"/><text x="7.8933%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="7.6433%" y="613" width="0.6369%" height="15" fill="rgb(230,59,30)" fg:x="12" fg:w="1"/><text x="7.8933%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::entities::Prop]&gt; (1 samples, 0.64%)</title><rect x="7.6433%" y="597" width="0.6369%" height="15" fill="rgb(209,121,21)" fg:x="12" fg:w="1"/><text x="7.8933%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::entities::Prop&gt; (1 samples, 0.64%)</title><rect x="7.6433%" y="581" width="0.6369%" height="15" fill="rgb(220,109,13)" fg:x="12" fg:w="1"/><text x="7.8933%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt;&gt; (1 samples, 0.64%)</title><rect x="7.6433%" y="565" width="0.6369%" height="15" fill="rgb(232,18,1)" fg:x="12" fg:w="1"/><text x="7.8933%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::BytesVariant&gt; (1 samples, 0.64%)</title><rect x="8.2803%" y="789" width="0.6369%" height="15" fill="rgb(215,41,42)" fg:x="13" fg:w="1"/><text x="8.5303%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap::Mmap&gt; (1 samples, 0.64%)</title><rect x="8.2803%" y="773" width="0.6369%" height="15" fill="rgb(224,123,36)" fg:x="13" fg:w="1"/><text x="8.5303%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap::unix::MmapInner&gt; (1 samples, 0.64%)</title><rect x="8.2803%" y="757" width="0.6369%" height="15" fill="rgb(240,125,3)" fg:x="13" fg:w="1"/><text x="8.5303%" y="767.50"></text></g><g><title>&lt;memmap::unix::MmapInner as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="8.2803%" y="741" width="0.6369%" height="15" fill="rgb(205,98,50)" fg:x="13" fg:w="1"/><text x="8.5303%" y="751.50"></text></g><g><title>__GI___munmap (1 samples, 0.64%)</title><rect x="8.2803%" y="725" width="0.6369%" height="15" fill="rgb(205,185,37)" fg:x="13" fg:w="1"/><text x="8.5303%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="8.2803%" y="709" width="0.6369%" height="15" fill="rgb(238,207,15)" fg:x="13" fg:w="1"/><text x="8.5303%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="8.2803%" y="693" width="0.6369%" height="15" fill="rgb(213,199,42)" fg:x="13" fg:w="1"/><text x="8.5303%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="8.2803%" y="677" width="0.6369%" height="15" fill="rgb(235,201,11)" fg:x="13" fg:w="1"/><text x="8.5303%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="8.2803%" y="661" width="0.6369%" height="15" fill="rgb(207,46,11)" fg:x="13" fg:w="1"/><text x="8.5303%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="8.2803%" y="645" width="0.6369%" height="15" fill="rgb(241,35,35)" fg:x="13" fg:w="1"/><text x="8.5303%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="8.2803%" y="629" width="0.6369%" height="15" fill="rgb(243,32,47)" fg:x="13" fg:w="1"/><text x="8.5303%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="8.2803%" y="613" width="0.6369%" height="15" fill="rgb(247,202,23)" fg:x="13" fg:w="1"/><text x="8.5303%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="8.2803%" y="597" width="0.6369%" height="15" fill="rgb(219,102,11)" fg:x="13" fg:w="1"/><text x="8.5303%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="8.2803%" y="581" width="0.6369%" height="15" fill="rgb(243,110,44)" fg:x="13" fg:w="1"/><text x="8.5303%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="8.2803%" y="565" width="0.6369%" height="15" fill="rgb(222,74,54)" fg:x="13" fg:w="1"/><text x="8.5303%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="8.2803%" y="549" width="0.6369%" height="15" fill="rgb(216,99,12)" fg:x="13" fg:w="1"/><text x="8.5303%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.64%)</title><rect x="8.9172%" y="789" width="0.6369%" height="15" fill="rgb(226,22,26)" fg:x="14" fg:w="1"/><text x="9.1672%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.64%)</title><rect x="8.9172%" y="773" width="0.6369%" height="15" fill="rgb(217,163,10)" fg:x="14" fg:w="1"/><text x="9.1672%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,demoparser::parsing::data_table::ServerClass)&gt;&gt; (1 samples, 0.64%)</title><rect x="8.9172%" y="757" width="0.6369%" height="15" fill="rgb(213,25,53)" fg:x="14" fg:w="1"/><text x="9.1672%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="8.9172%" y="741" width="0.6369%" height="15" fill="rgb(252,105,26)" fg:x="14" fg:w="1"/><text x="9.1672%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.64%)</title><rect x="8.9172%" y="725" width="0.6369%" height="15" fill="rgb(220,39,43)" fg:x="14" fg:w="1"/><text x="9.1672%" y="735.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.64%)</title><rect x="8.9172%" y="709" width="0.6369%" height="15" fill="rgb(229,68,48)" fg:x="14" fg:w="1"/><text x="9.1672%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.64%)</title><rect x="8.9172%" y="693" width="0.6369%" height="15" fill="rgb(252,8,32)" fg:x="14" fg:w="1"/><text x="9.1672%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u16,demoparser::parsing::data_table::ServerClass)&gt; (1 samples, 0.64%)</title><rect x="8.9172%" y="677" width="0.6369%" height="15" fill="rgb(223,20,43)" fg:x="14" fg:w="1"/><text x="9.1672%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::data_table::ServerClass&gt; (1 samples, 0.64%)</title><rect x="8.9172%" y="661" width="0.6369%" height="15" fill="rgb(229,81,49)" fg:x="14" fg:w="1"/><text x="9.1672%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::entities::Prop&gt;&gt; (1 samples, 0.64%)</title><rect x="8.9172%" y="645" width="0.6369%" height="15" fill="rgb(236,28,36)" fg:x="14" fg:w="1"/><text x="9.1672%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="8.9172%" y="629" width="0.6369%" height="15" fill="rgb(249,185,26)" fg:x="14" fg:w="1"/><text x="9.1672%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::entities::Prop]&gt; (1 samples, 0.64%)</title><rect x="8.9172%" y="613" width="0.6369%" height="15" fill="rgb(249,174,33)" fg:x="14" fg:w="1"/><text x="9.1672%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::entities::Prop&gt; (1 samples, 0.64%)</title><rect x="8.9172%" y="597" width="0.6369%" height="15" fill="rgb(233,201,37)" fg:x="14" fg:w="1"/><text x="9.1672%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt;&gt; (1 samples, 0.64%)</title><rect x="8.9172%" y="581" width="0.6369%" height="15" fill="rgb(221,78,26)" fg:x="14" fg:w="1"/><text x="9.1672%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u32,alloc::vec::Vec&lt;(alloc::string::String,demoparser::parsing::variants::PropData)&gt;&gt;&gt; (1 samples, 0.64%)</title><rect x="9.5541%" y="789" width="0.6369%" height="15" fill="rgb(250,127,30)" fg:x="15" fg:w="1"/><text x="9.8041%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u32,alloc::vec::Vec&lt;(alloc::string::String,demoparser::parsing::variants::PropData)&gt;,std::collections::hash::map::RandomState&gt;&gt; (1 samples, 0.64%)</title><rect x="9.5541%" y="773" width="0.6369%" height="15" fill="rgb(230,49,44)" fg:x="15" fg:w="1"/><text x="9.8041%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u32,alloc::vec::Vec&lt;(alloc::string::String,demoparser::parsing::variants::PropData)&gt;)&gt;&gt; (1 samples, 0.64%)</title><rect x="9.5541%" y="757" width="0.6369%" height="15" fill="rgb(229,67,23)" fg:x="15" fg:w="1"/><text x="9.8041%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="9.5541%" y="741" width="0.6369%" height="15" fill="rgb(249,83,47)" fg:x="15" fg:w="1"/><text x="9.8041%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.64%)</title><rect x="9.5541%" y="725" width="0.6369%" height="15" fill="rgb(215,43,3)" fg:x="15" fg:w="1"/><text x="9.8041%" y="735.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.64%)</title><rect x="9.5541%" y="709" width="0.6369%" height="15" fill="rgb(238,154,13)" fg:x="15" fg:w="1"/><text x="9.8041%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.64%)</title><rect x="9.5541%" y="693" width="0.6369%" height="15" fill="rgb(219,56,2)" fg:x="15" fg:w="1"/><text x="9.8041%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u32,alloc::vec::Vec&lt;(alloc::string::String,demoparser::parsing::variants::PropData)&gt;)&gt; (1 samples, 0.64%)</title><rect x="9.5541%" y="677" width="0.6369%" height="15" fill="rgb(233,0,4)" fg:x="15" fg:w="1"/><text x="9.8041%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::string::String,demoparser::parsing::variants::PropData)&gt;&gt; (1 samples, 0.64%)</title><rect x="9.5541%" y="661" width="0.6369%" height="15" fill="rgb(235,30,7)" fg:x="15" fg:w="1"/><text x="9.8041%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="9.5541%" y="645" width="0.6369%" height="15" fill="rgb(250,79,13)" fg:x="15" fg:w="1"/><text x="9.8041%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::string::String,demoparser::parsing::variants::PropData)]&gt; (1 samples, 0.64%)</title><rect x="9.5541%" y="629" width="0.6369%" height="15" fill="rgb(211,146,34)" fg:x="15" fg:w="1"/><text x="9.8041%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,demoparser::parsing::variants::PropData)&gt; (1 samples, 0.64%)</title><rect x="9.5541%" y="613" width="0.6369%" height="15" fill="rgb(228,22,38)" fg:x="15" fg:w="1"/><text x="9.8041%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.64%)</title><rect x="9.5541%" y="597" width="0.6369%" height="15" fill="rgb(235,168,5)" fg:x="15" fg:w="1"/><text x="9.8041%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.64%)</title><rect x="9.5541%" y="581" width="0.6369%" height="15" fill="rgb(221,155,16)" fg:x="15" fg:w="1"/><text x="9.8041%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.64%)</title><rect x="9.5541%" y="565" width="0.6369%" height="15" fill="rgb(215,215,53)" fg:x="15" fg:w="1"/><text x="9.8041%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="9.5541%" y="549" width="0.6369%" height="15" fill="rgb(223,4,10)" fg:x="15" fg:w="1"/><text x="9.8041%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.64%)</title><rect x="9.5541%" y="533" width="0.6369%" height="15" fill="rgb(234,103,6)" fg:x="15" fg:w="1"/><text x="9.8041%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.64%)</title><rect x="9.5541%" y="517" width="0.6369%" height="15" fill="rgb(227,97,0)" fg:x="15" fg:w="1"/><text x="9.8041%" y="527.50"></text></g><g><title>__rg_dealloc (1 samples, 0.64%)</title><rect x="9.5541%" y="501" width="0.6369%" height="15" fill="rgb(234,150,53)" fg:x="15" fg:w="1"/><text x="9.8041%" y="511.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.64%)</title><rect x="9.5541%" y="485" width="0.6369%" height="15" fill="rgb(228,201,54)" fg:x="15" fg:w="1"/><text x="9.8041%" y="495.50"></text></g><g><title>demoparser::parsing::parser::Demo::new (1 samples, 0.64%)</title><rect x="10.1911%" y="789" width="0.6369%" height="15" fill="rgb(222,22,37)" fg:x="16" fg:w="1"/><text x="10.4411%" y="799.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.64%)</title><rect x="10.1911%" y="773" width="0.6369%" height="15" fill="rgb(237,53,32)" fg:x="16" fg:w="1"/><text x="10.4411%" y="783.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.64%)</title><rect x="10.1911%" y="757" width="0.6369%" height="15" fill="rgb(233,25,53)" fg:x="16" fg:w="1"/><text x="10.4411%" y="767.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.64%)</title><rect x="10.1911%" y="741" width="0.6369%" height="15" fill="rgb(210,40,34)" fg:x="16" fg:w="1"/><text x="10.4411%" y="751.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.64%)</title><rect x="10.1911%" y="725" width="0.6369%" height="15" fill="rgb(241,220,44)" fg:x="16" fg:w="1"/><text x="10.4411%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.64%)</title><rect x="10.1911%" y="709" width="0.6369%" height="15" fill="rgb(235,28,35)" fg:x="16" fg:w="1"/><text x="10.4411%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.64%)</title><rect x="10.1911%" y="693" width="0.6369%" height="15" fill="rgb(210,56,17)" fg:x="16" fg:w="1"/><text x="10.4411%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.64%)</title><rect x="10.1911%" y="677" width="0.6369%" height="15" fill="rgb(224,130,29)" fg:x="16" fg:w="1"/><text x="10.4411%" y="687.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.64%)</title><rect x="10.1911%" y="661" width="0.6369%" height="15" fill="rgb(235,212,8)" fg:x="16" fg:w="1"/><text x="10.4411%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.64%)</title><rect x="10.1911%" y="645" width="0.6369%" height="15" fill="rgb(223,33,50)" fg:x="16" fg:w="1"/><text x="10.4411%" y="655.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (1 samples, 0.64%)</title><rect x="10.1911%" y="629" width="0.6369%" height="15" fill="rgb(219,149,13)" fg:x="16" fg:w="1"/><text x="10.4411%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.64%)</title><rect x="10.1911%" y="613" width="0.6369%" height="15" fill="rgb(250,156,29)" fg:x="16" fg:w="1"/><text x="10.4411%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.64%)</title><rect x="10.1911%" y="597" width="0.6369%" height="15" fill="rgb(216,193,19)" fg:x="16" fg:w="1"/><text x="10.4411%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.64%)</title><rect x="10.8280%" y="709" width="0.6369%" height="15" fill="rgb(216,135,14)" fg:x="17" fg:w="1"/><text x="11.0780%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.64%)</title><rect x="10.8280%" y="693" width="0.6369%" height="15" fill="rgb(241,47,5)" fg:x="17" fg:w="1"/><text x="11.0780%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.64%)</title><rect x="10.8280%" y="677" width="0.6369%" height="15" fill="rgb(233,42,35)" fg:x="17" fg:w="1"/><text x="11.0780%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.64%)</title><rect x="10.8280%" y="661" width="0.6369%" height="15" fill="rgb(231,13,6)" fg:x="17" fg:w="1"/><text x="11.0780%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.64%)</title><rect x="10.8280%" y="645" width="0.6369%" height="15" fill="rgb(207,181,40)" fg:x="17" fg:w="1"/><text x="11.0780%" y="655.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.64%)</title><rect x="10.8280%" y="629" width="0.6369%" height="15" fill="rgb(254,173,49)" fg:x="17" fg:w="1"/><text x="11.0780%" y="639.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.64%)</title><rect x="10.8280%" y="613" width="0.6369%" height="15" fill="rgb(221,1,38)" fg:x="17" fg:w="1"/><text x="11.0780%" y="623.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.64%)</title><rect x="10.8280%" y="597" width="0.6369%" height="15" fill="rgb(206,124,46)" fg:x="17" fg:w="1"/><text x="11.0780%" y="607.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.64%)</title><rect x="10.8280%" y="581" width="0.6369%" height="15" fill="rgb(249,21,11)" fg:x="17" fg:w="1"/><text x="11.0780%" y="591.50"></text></g><g><title>_mi_memcpy (1 samples, 0.64%)</title><rect x="10.8280%" y="565" width="0.6369%" height="15" fill="rgb(222,201,40)" fg:x="17" fg:w="1"/><text x="11.0780%" y="575.50"></text></g><g><title>memcpy (1 samples, 0.64%)</title><rect x="10.8280%" y="549" width="0.6369%" height="15" fill="rgb(235,61,29)" fg:x="17" fg:w="1"/><text x="11.0780%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 0.64%)</title><rect x="10.8280%" y="533" width="0.6369%" height="15" fill="rgb(219,207,3)" fg:x="17" fg:w="1"/><text x="11.0780%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="10.8280%" y="517" width="0.6369%" height="15" fill="rgb(222,56,46)" fg:x="17" fg:w="1"/><text x="11.0780%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="10.8280%" y="501" width="0.6369%" height="15" fill="rgb(239,76,54)" fg:x="17" fg:w="1"/><text x="11.0780%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="10.8280%" y="485" width="0.6369%" height="15" fill="rgb(231,124,27)" fg:x="17" fg:w="1"/><text x="11.0780%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="10.8280%" y="469" width="0.6369%" height="15" fill="rgb(249,195,6)" fg:x="17" fg:w="1"/><text x="11.0780%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="10.8280%" y="453" width="0.6369%" height="15" fill="rgb(237,174,47)" fg:x="17" fg:w="1"/><text x="11.0780%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="10.8280%" y="437" width="0.6369%" height="15" fill="rgb(206,201,31)" fg:x="17" fg:w="1"/><text x="11.0780%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="10.8280%" y="421" width="0.6369%" height="15" fill="rgb(231,57,52)" fg:x="17" fg:w="1"/><text x="11.0780%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="10.8280%" y="405" width="0.6369%" height="15" fill="rgb(248,177,22)" fg:x="17" fg:w="1"/><text x="11.0780%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="10.8280%" y="389" width="0.6369%" height="15" fill="rgb(215,211,37)" fg:x="17" fg:w="1"/><text x="11.0780%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="10.8280%" y="373" width="0.6369%" height="15" fill="rgb(241,128,51)" fg:x="17" fg:w="1"/><text x="11.0780%" y="383.50"></text></g><g><title>_mi_memcpy_aligned (2 samples, 1.27%)</title><rect x="11.4650%" y="565" width="1.2739%" height="15" fill="rgb(227,165,31)" fg:x="18" fg:w="2"/><text x="11.7150%" y="575.50"></text></g><g><title>_mi_memcpy (2 samples, 1.27%)</title><rect x="11.4650%" y="549" width="1.2739%" height="15" fill="rgb(228,167,24)" fg:x="18" fg:w="2"/><text x="11.7150%" y="559.50"></text></g><g><title>memcpy (2 samples, 1.27%)</title><rect x="11.4650%" y="533" width="1.2739%" height="15" fill="rgb(228,143,12)" fg:x="18" fg:w="2"/><text x="11.7150%" y="543.50"></text></g><g><title>[libc.so.6] (2 samples, 1.27%)</title><rect x="11.4650%" y="517" width="1.2739%" height="15" fill="rgb(249,149,8)" fg:x="18" fg:w="2"/><text x="11.7150%" y="527.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="11.4650%" y="501" width="1.2739%" height="15" fill="rgb(243,35,44)" fg:x="18" fg:w="2"/><text x="11.7150%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 1.91%)</title><rect x="11.4650%" y="677" width="1.9108%" height="15" fill="rgb(246,89,9)" fg:x="18" fg:w="3"/><text x="11.7150%" y="687.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 1.91%)</title><rect x="11.4650%" y="661" width="1.9108%" height="15" fill="rgb(233,213,13)" fg:x="18" fg:w="3"/><text x="11.7150%" y="671.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 1.91%)</title><rect x="11.4650%" y="645" width="1.9108%" height="15" fill="rgb(233,141,41)" fg:x="18" fg:w="3"/><text x="11.7150%" y="655.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 1.91%)</title><rect x="11.4650%" y="629" width="1.9108%" height="15" fill="rgb(239,167,4)" fg:x="18" fg:w="3"/><text x="11.7150%" y="639.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 1.91%)</title><rect x="11.4650%" y="613" width="1.9108%" height="15" fill="rgb(209,217,16)" fg:x="18" fg:w="3"/><text x="11.7150%" y="623.50">a..</text></g><g><title>alloc::alloc::realloc (3 samples, 1.91%)</title><rect x="11.4650%" y="597" width="1.9108%" height="15" fill="rgb(219,88,35)" fg:x="18" fg:w="3"/><text x="11.7150%" y="607.50">a..</text></g><g><title>_mi_heap_realloc_zero (3 samples, 1.91%)</title><rect x="11.4650%" y="581" width="1.9108%" height="15" fill="rgb(220,193,23)" fg:x="18" fg:w="3"/><text x="11.7150%" y="591.50">_..</text></g><g><title>mi_heap_malloc (1 samples, 0.64%)</title><rect x="12.7389%" y="565" width="0.6369%" height="15" fill="rgb(230,90,52)" fg:x="20" fg:w="1"/><text x="12.9889%" y="575.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.64%)</title><rect x="12.7389%" y="549" width="0.6369%" height="15" fill="rgb(252,106,19)" fg:x="20" fg:w="1"/><text x="12.9889%" y="559.50"></text></g><g><title>mi_find_page (1 samples, 0.64%)</title><rect x="12.7389%" y="533" width="0.6369%" height="15" fill="rgb(206,74,20)" fg:x="20" fg:w="1"/><text x="12.9889%" y="543.50"></text></g><g><title>mi_find_free_page (1 samples, 0.64%)</title><rect x="12.7389%" y="517" width="0.6369%" height="15" fill="rgb(230,138,44)" fg:x="20" fg:w="1"/><text x="12.9889%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 2.55%)</title><rect x="11.4650%" y="693" width="2.5478%" height="15" fill="rgb(235,182,43)" fg:x="18" fg:w="4"/><text x="11.7150%" y="703.50">al..</text></g><g><title>core::ptr::write (1 samples, 0.64%)</title><rect x="13.3758%" y="677" width="0.6369%" height="15" fill="rgb(242,16,51)" fg:x="21" fg:w="1"/><text x="13.6258%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.64%)</title><rect x="14.0127%" y="677" width="0.6369%" height="15" fill="rgb(248,9,4)" fg:x="22" fg:w="1"/><text x="14.2627%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.64%)</title><rect x="14.0127%" y="661" width="0.6369%" height="15" fill="rgb(210,31,22)" fg:x="22" fg:w="1"/><text x="14.2627%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.64%)</title><rect x="14.6497%" y="677" width="0.6369%" height="15" fill="rgb(239,54,39)" fg:x="23" fg:w="1"/><text x="14.8997%" y="687.50"></text></g><g><title>core::ptr::write (1 samples, 0.64%)</title><rect x="14.6497%" y="661" width="0.6369%" height="15" fill="rgb(230,99,41)" fg:x="23" fg:w="1"/><text x="14.8997%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (1 samples, 0.64%)</title><rect x="15.2866%" y="661" width="0.6369%" height="15" fill="rgb(253,106,12)" fg:x="24" fg:w="1"/><text x="15.5366%" y="671.50"></text></g><g><title>alloc::slice::merge_sort (1 samples, 0.64%)</title><rect x="15.2866%" y="645" width="0.6369%" height="15" fill="rgb(213,46,41)" fg:x="24" fg:w="1"/><text x="15.5366%" y="655.50"></text></g><g><title>alloc::slice::merge (1 samples, 0.64%)</title><rect x="15.2866%" y="629" width="0.6369%" height="15" fill="rgb(215,133,35)" fg:x="24" fg:w="1"/><text x="15.5366%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::slice::merge::MergeHole&lt;demoparser::parsing::entities::Prop&gt;&gt; (1 samples, 0.64%)</title><rect x="15.2866%" y="613" width="0.6369%" height="15" fill="rgb(213,28,5)" fg:x="24" fg:w="1"/><text x="15.5366%" y="623.50"></text></g><g><title>&lt;alloc::slice::merge::MergeHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="15.2866%" y="597" width="0.6369%" height="15" fill="rgb(215,77,49)" fg:x="24" fg:w="1"/><text x="15.5366%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.64%)</title><rect x="15.2866%" y="581" width="0.6369%" height="15" fill="rgb(248,100,22)" fg:x="24" fg:w="1"/><text x="15.5366%" y="591.50"></text></g><g><title>[libc.so.6] (1 samples, 0.64%)</title><rect x="15.2866%" y="565" width="0.6369%" height="15" fill="rgb(208,67,9)" fg:x="24" fg:w="1"/><text x="15.5366%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.64%)</title><rect x="15.9236%" y="661" width="0.6369%" height="15" fill="rgb(219,133,21)" fg:x="25" fg:w="1"/><text x="16.1736%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.64%)</title><rect x="15.9236%" y="645" width="0.6369%" height="15" fill="rgb(246,46,29)" fg:x="25" fg:w="1"/><text x="16.1736%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.64%)</title><rect x="15.9236%" y="629" width="0.6369%" height="15" fill="rgb(246,185,52)" fg:x="25" fg:w="1"/><text x="16.1736%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.64%)</title><rect x="15.9236%" y="613" width="0.6369%" height="15" fill="rgb(252,136,11)" fg:x="25" fg:w="1"/><text x="16.1736%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.64%)</title><rect x="15.9236%" y="597" width="0.6369%" height="15" fill="rgb(219,138,53)" fg:x="25" fg:w="1"/><text x="16.1736%" y="607.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.64%)</title><rect x="15.9236%" y="581" width="0.6369%" height="15" fill="rgb(211,51,23)" fg:x="25" fg:w="1"/><text x="16.1736%" y="591.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.64%)</title><rect x="15.9236%" y="565" width="0.6369%" height="15" fill="rgb(247,221,28)" fg:x="25" fg:w="1"/><text x="16.1736%" y="575.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.64%)</title><rect x="15.9236%" y="549" width="0.6369%" height="15" fill="rgb(251,222,45)" fg:x="25" fg:w="1"/><text x="16.1736%" y="559.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.64%)</title><rect x="15.9236%" y="533" width="0.6369%" height="15" fill="rgb(217,162,53)" fg:x="25" fg:w="1"/><text x="16.1736%" y="543.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.64%)</title><rect x="15.9236%" y="517" width="0.6369%" height="15" fill="rgb(229,93,14)" fg:x="25" fg:w="1"/><text x="16.1736%" y="527.50"></text></g><g><title>mi_find_page (1 samples, 0.64%)</title><rect x="15.9236%" y="501" width="0.6369%" height="15" fill="rgb(209,67,49)" fg:x="25" fg:w="1"/><text x="16.1736%" y="511.50"></text></g><g><title>mi_find_free_page (1 samples, 0.64%)</title><rect x="15.9236%" y="485" width="0.6369%" height="15" fill="rgb(213,87,29)" fg:x="25" fg:w="1"/><text x="16.1736%" y="495.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 0.64%)</title><rect x="15.9236%" y="469" width="0.6369%" height="15" fill="rgb(205,151,52)" fg:x="25" fg:w="1"/><text x="16.1736%" y="479.50"></text></g><g><title>mi_page_to_full (1 samples, 0.64%)</title><rect x="15.9236%" y="453" width="0.6369%" height="15" fill="rgb(253,215,39)" fg:x="25" fg:w="1"/><text x="16.1736%" y="463.50"></text></g><g><title>mi_page_queue_enqueue_from (1 samples, 0.64%)</title><rect x="15.9236%" y="437" width="0.6369%" height="15" fill="rgb(221,220,41)" fg:x="25" fg:w="1"/><text x="16.1736%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.64%)</title><rect x="16.5605%" y="629" width="0.6369%" height="15" fill="rgb(218,133,21)" fg:x="26" fg:w="1"/><text x="16.8105%" y="639.50"></text></g><g><title>core::ptr::write (1 samples, 0.64%)</title><rect x="16.5605%" y="613" width="0.6369%" height="15" fill="rgb(221,193,43)" fg:x="26" fg:w="1"/><text x="16.8105%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.64%)</title><rect x="17.1975%" y="581" width="0.6369%" height="15" fill="rgb(240,128,52)" fg:x="27" fg:w="1"/><text x="17.4475%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.64%)</title><rect x="17.1975%" y="565" width="0.6369%" height="15" fill="rgb(253,114,12)" fg:x="27" fg:w="1"/><text x="17.4475%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.64%)</title><rect x="17.1975%" y="549" width="0.6369%" height="15" fill="rgb(215,223,47)" fg:x="27" fg:w="1"/><text x="17.4475%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.64%)</title><rect x="17.1975%" y="533" width="0.6369%" height="15" fill="rgb(248,225,23)" fg:x="27" fg:w="1"/><text x="17.4475%" y="543.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.64%)</title><rect x="17.1975%" y="517" width="0.6369%" height="15" fill="rgb(250,108,0)" fg:x="27" fg:w="1"/><text x="17.4475%" y="527.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.64%)</title><rect x="17.1975%" y="501" width="0.6369%" height="15" fill="rgb(228,208,7)" fg:x="27" fg:w="1"/><text x="17.4475%" y="511.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.64%)</title><rect x="17.1975%" y="485" width="0.6369%" height="15" fill="rgb(244,45,10)" fg:x="27" fg:w="1"/><text x="17.4475%" y="495.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.64%)</title><rect x="17.1975%" y="469" width="0.6369%" height="15" fill="rgb(207,125,25)" fg:x="27" fg:w="1"/><text x="17.4475%" y="479.50"></text></g><g><title>_mi_memcpy (1 samples, 0.64%)</title><rect x="17.1975%" y="453" width="0.6369%" height="15" fill="rgb(210,195,18)" fg:x="27" fg:w="1"/><text x="17.4475%" y="463.50"></text></g><g><title>memcpy (1 samples, 0.64%)</title><rect x="17.1975%" y="437" width="0.6369%" height="15" fill="rgb(249,80,12)" fg:x="27" fg:w="1"/><text x="17.4475%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.64%)</title><rect x="17.1975%" y="421" width="0.6369%" height="15" fill="rgb(221,65,9)" fg:x="27" fg:w="1"/><text x="17.4475%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 1.27%)</title><rect x="17.1975%" y="597" width="1.2739%" height="15" fill="rgb(235,49,36)" fg:x="27" fg:w="2"/><text x="17.4475%" y="607.50"></text></g><g><title>core::ptr::write (1 samples, 0.64%)</title><rect x="17.8344%" y="581" width="0.6369%" height="15" fill="rgb(225,32,20)" fg:x="28" fg:w="1"/><text x="18.0844%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 1.27%)</title><rect x="18.4713%" y="581" width="1.2739%" height="15" fill="rgb(215,141,46)" fg:x="29" fg:w="2"/><text x="18.7213%" y="591.50"></text></g><g><title>core::ptr::write (2 samples, 1.27%)</title><rect x="18.4713%" y="565" width="1.2739%" height="15" fill="rgb(250,160,47)" fg:x="29" fg:w="2"/><text x="18.7213%" y="575.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (3 samples, 1.91%)</title><rect x="18.4713%" y="597" width="1.9108%" height="15" fill="rgb(216,222,40)" fg:x="29" fg:w="3"/><text x="18.7213%" y="607.50">d..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (1 samples, 0.64%)</title><rect x="19.7452%" y="581" width="0.6369%" height="15" fill="rgb(234,217,39)" fg:x="31" fg:w="1"/><text x="19.9952%" y="591.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1 samples, 0.64%)</title><rect x="19.7452%" y="565" width="0.6369%" height="15" fill="rgb(207,178,40)" fg:x="31" fg:w="1"/><text x="19.9952%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.64%)</title><rect x="19.7452%" y="549" width="0.6369%" height="15" fill="rgb(221,136,13)" fg:x="31" fg:w="1"/><text x="19.9952%" y="559.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.64%)</title><rect x="19.7452%" y="533" width="0.6369%" height="15" fill="rgb(249,199,10)" fg:x="31" fg:w="1"/><text x="19.9952%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.64%)</title><rect x="19.7452%" y="517" width="0.6369%" height="15" fill="rgb(249,222,13)" fg:x="31" fg:w="1"/><text x="19.9952%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.64%)</title><rect x="19.7452%" y="501" width="0.6369%" height="15" fill="rgb(244,185,38)" fg:x="31" fg:w="1"/><text x="19.9952%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.64%)</title><rect x="19.7452%" y="485" width="0.6369%" height="15" fill="rgb(236,202,9)" fg:x="31" fg:w="1"/><text x="19.9952%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.64%)</title><rect x="19.7452%" y="469" width="0.6369%" height="15" fill="rgb(250,229,37)" fg:x="31" fg:w="1"/><text x="19.9952%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.64%)</title><rect x="19.7452%" y="453" width="0.6369%" height="15" fill="rgb(206,174,23)" fg:x="31" fg:w="1"/><text x="19.9952%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.64%)</title><rect x="19.7452%" y="437" width="0.6369%" height="15" fill="rgb(211,33,43)" fg:x="31" fg:w="1"/><text x="19.9952%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.64%)</title><rect x="19.7452%" y="421" width="0.6369%" height="15" fill="rgb(245,58,50)" fg:x="31" fg:w="1"/><text x="19.9952%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.64%)</title><rect x="19.7452%" y="405" width="0.6369%" height="15" fill="rgb(244,68,36)" fg:x="31" fg:w="1"/><text x="19.9952%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.64%)</title><rect x="19.7452%" y="389" width="0.6369%" height="15" fill="rgb(232,229,15)" fg:x="31" fg:w="1"/><text x="19.9952%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.64%)</title><rect x="19.7452%" y="373" width="0.6369%" height="15" fill="rgb(254,30,23)" fg:x="31" fg:w="1"/><text x="19.9952%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.64%)</title><rect x="19.7452%" y="357" width="0.6369%" height="15" fill="rgb(235,160,14)" fg:x="31" fg:w="1"/><text x="19.9952%" y="367.50"></text></g><g><title>mi_malloc (1 samples, 0.64%)</title><rect x="19.7452%" y="341" width="0.6369%" height="15" fill="rgb(212,155,44)" fg:x="31" fg:w="1"/><text x="19.9952%" y="351.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.64%)</title><rect x="19.7452%" y="325" width="0.6369%" height="15" fill="rgb(226,2,50)" fg:x="31" fg:w="1"/><text x="19.9952%" y="335.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.64%)</title><rect x="19.7452%" y="309" width="0.6369%" height="15" fill="rgb(234,177,6)" fg:x="31" fg:w="1"/><text x="19.9952%" y="319.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.64%)</title><rect x="19.7452%" y="293" width="0.6369%" height="15" fill="rgb(217,24,9)" fg:x="31" fg:w="1"/><text x="19.9952%" y="303.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::flatten_dt (16 samples, 10.19%)</title><rect x="10.8280%" y="741" width="10.1911%" height="15" fill="rgb(220,13,46)" fg:x="17" fg:w="16"/><text x="11.0780%" y="751.50">demoparser::par..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (16 samples, 10.19%)</title><rect x="10.8280%" y="725" width="10.1911%" height="15" fill="rgb(239,221,27)" fg:x="17" fg:w="16"/><text x="11.0780%" y="735.50">demoparser::par..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (15 samples, 9.55%)</title><rect x="11.4650%" y="709" width="9.5541%" height="15" fill="rgb(222,198,25)" fg:x="18" fg:w="15"/><text x="11.7150%" y="719.50">demoparser::pa..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (11 samples, 7.01%)</title><rect x="14.0127%" y="693" width="7.0064%" height="15" fill="rgb(211,99,13)" fg:x="22" fg:w="11"/><text x="14.2627%" y="703.50">demoparse..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (9 samples, 5.73%)</title><rect x="15.2866%" y="677" width="5.7325%" height="15" fill="rgb(232,111,31)" fg:x="24" fg:w="9"/><text x="15.5366%" y="687.50">demopar..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (7 samples, 4.46%)</title><rect x="16.5605%" y="661" width="4.4586%" height="15" fill="rgb(245,82,37)" fg:x="26" fg:w="7"/><text x="16.8105%" y="671.50">demop..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (7 samples, 4.46%)</title><rect x="16.5605%" y="645" width="4.4586%" height="15" fill="rgb(227,149,46)" fg:x="26" fg:w="7"/><text x="16.8105%" y="655.50">demop..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (6 samples, 3.82%)</title><rect x="17.1975%" y="629" width="3.8217%" height="15" fill="rgb(218,36,50)" fg:x="27" fg:w="6"/><text x="17.4475%" y="639.50">demo..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (6 samples, 3.82%)</title><rect x="17.1975%" y="613" width="3.8217%" height="15" fill="rgb(226,80,48)" fg:x="27" fg:w="6"/><text x="17.4475%" y="623.50">demo..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::is_prop_excl (1 samples, 0.64%)</title><rect x="20.3822%" y="597" width="0.6369%" height="15" fill="rgb(238,224,15)" fg:x="32" fg:w="1"/><text x="20.6322%" y="607.50"></text></g><g><title>csgoproto::netmessages::csvcmsg_send_table::Sendprop_t::dt_name (1 samples, 0.64%)</title><rect x="20.3822%" y="581" width="0.6369%" height="15" fill="rgb(241,136,10)" fg:x="32" fg:w="1"/><text x="20.6322%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.64%)</title><rect x="20.3822%" y="565" width="0.6369%" height="15" fill="rgb(208,32,45)" fg:x="32" fg:w="1"/><text x="20.6322%" y="575.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (1 samples, 0.64%)</title><rect x="21.0191%" y="725" width="0.6369%" height="15" fill="rgb(207,135,9)" fg:x="33" fg:w="1"/><text x="21.2691%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.64%)</title><rect x="21.0191%" y="709" width="0.6369%" height="15" fill="rgb(206,86,44)" fg:x="33" fg:w="1"/><text x="21.2691%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.64%)</title><rect x="21.0191%" y="693" width="0.6369%" height="15" fill="rgb(245,177,15)" fg:x="33" fg:w="1"/><text x="21.2691%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.64%)</title><rect x="21.0191%" y="677" width="0.6369%" height="15" fill="rgb(206,64,50)" fg:x="33" fg:w="1"/><text x="21.2691%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.64%)</title><rect x="21.0191%" y="661" width="0.6369%" height="15" fill="rgb(234,36,40)" fg:x="33" fg:w="1"/><text x="21.2691%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.64%)</title><rect x="21.0191%" y="645" width="0.6369%" height="15" fill="rgb(213,64,8)" fg:x="33" fg:w="1"/><text x="21.2691%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.64%)</title><rect x="21.0191%" y="629" width="0.6369%" height="15" fill="rgb(210,75,36)" fg:x="33" fg:w="1"/><text x="21.2691%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.64%)</title><rect x="21.0191%" y="613" width="0.6369%" height="15" fill="rgb(229,88,21)" fg:x="33" fg:w="1"/><text x="21.2691%" y="623.50"></text></g><g><title>[libc.so.6] (1 samples, 0.64%)</title><rect x="21.0191%" y="597" width="0.6369%" height="15" fill="rgb(252,204,47)" fg:x="33" fg:w="1"/><text x="21.2691%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.64%)</title><rect x="21.6561%" y="693" width="0.6369%" height="15" fill="rgb(208,77,27)" fg:x="34" fg:w="1"/><text x="21.9061%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.64%)</title><rect x="21.6561%" y="677" width="0.6369%" height="15" fill="rgb(221,76,26)" fg:x="34" fg:w="1"/><text x="21.9061%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.64%)</title><rect x="21.6561%" y="661" width="0.6369%" height="15" fill="rgb(225,139,18)" fg:x="34" fg:w="1"/><text x="21.9061%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="21.6561%" y="645" width="0.6369%" height="15" fill="rgb(230,137,11)" fg:x="34" fg:w="1"/><text x="21.9061%" y="655.50"></text></g><g><title>demoparser::parsing::entities::parse_baselines (3 samples, 1.91%)</title><rect x="21.0191%" y="741" width="1.9108%" height="15" fill="rgb(212,28,1)" fg:x="33" fg:w="3"/><text x="21.2691%" y="751.50">d..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 1.27%)</title><rect x="21.6561%" y="725" width="1.2739%" height="15" fill="rgb(248,164,17)" fg:x="34" fg:w="2"/><text x="21.9061%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 1.27%)</title><rect x="21.6561%" y="709" width="1.2739%" height="15" fill="rgb(222,171,42)" fg:x="34" fg:w="2"/><text x="21.9061%" y="719.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.64%)</title><rect x="22.2930%" y="693" width="0.6369%" height="15" fill="rgb(243,84,45)" fg:x="35" fg:w="1"/><text x="22.5430%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.64%)</title><rect x="22.2930%" y="677" width="0.6369%" height="15" fill="rgb(252,49,23)" fg:x="35" fg:w="1"/><text x="22.5430%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.64%)</title><rect x="22.2930%" y="661" width="0.6369%" height="15" fill="rgb(215,19,7)" fg:x="35" fg:w="1"/><text x="22.5430%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.64%)</title><rect x="22.2930%" y="645" width="0.6369%" height="15" fill="rgb(238,81,41)" fg:x="35" fg:w="1"/><text x="22.5430%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.64%)</title><rect x="22.2930%" y="629" width="0.6369%" height="15" fill="rgb(210,199,37)" fg:x="35" fg:w="1"/><text x="22.5430%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.64%)</title><rect x="22.2930%" y="613" width="0.6369%" height="15" fill="rgb(244,192,49)" fg:x="35" fg:w="1"/><text x="22.5430%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.64%)</title><rect x="22.2930%" y="597" width="0.6369%" height="15" fill="rgb(226,211,11)" fg:x="35" fg:w="1"/><text x="22.5430%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.64%)</title><rect x="22.2930%" y="581" width="0.6369%" height="15" fill="rgb(236,162,54)" fg:x="35" fg:w="1"/><text x="22.5430%" y="591.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.64%)</title><rect x="22.2930%" y="565" width="0.6369%" height="15" fill="rgb(220,229,9)" fg:x="35" fg:w="1"/><text x="22.5430%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.64%)</title><rect x="22.2930%" y="549" width="0.6369%" height="15" fill="rgb(250,87,22)" fg:x="35" fg:w="1"/><text x="22.5430%" y="559.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_datatable (20 samples, 12.74%)</title><rect x="10.8280%" y="757" width="12.7389%" height="15" fill="rgb(239,43,17)" fg:x="17" fg:w="20"/><text x="11.0780%" y="767.50">demoparser::parsing..</text></g><g><title>protobuf::message::Message::parse_from_bytes (1 samples, 0.64%)</title><rect x="22.9299%" y="741" width="0.6369%" height="15" fill="rgb(231,177,25)" fg:x="36" fg:w="1"/><text x="23.1799%" y="751.50"></text></g><g><title>protobuf::message::Message::parse_from (1 samples, 0.64%)</title><rect x="22.9299%" y="725" width="0.6369%" height="15" fill="rgb(219,179,1)" fg:x="36" fg:w="1"/><text x="23.1799%" y="735.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as protobuf::message::Message&gt;::merge_from (1 samples, 0.64%)</title><rect x="22.9299%" y="709" width="0.6369%" height="15" fill="rgb(238,219,53)" fg:x="36" fg:w="1"/><text x="23.1799%" y="719.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (1 samples, 0.64%)</title><rect x="22.9299%" y="693" width="0.6369%" height="15" fill="rgb(232,167,36)" fg:x="36" fg:w="1"/><text x="23.1799%" y="703.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (1 samples, 0.64%)</title><rect x="22.9299%" y="677" width="0.6369%" height="15" fill="rgb(244,19,51)" fg:x="36" fg:w="1"/><text x="23.1799%" y="687.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as protobuf::message::Message&gt;::merge_from (1 samples, 0.64%)</title><rect x="22.9299%" y="661" width="0.6369%" height="15" fill="rgb(224,6,22)" fg:x="36" fg:w="1"/><text x="23.1799%" y="671.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_string (1 samples, 0.64%)</title><rect x="22.9299%" y="645" width="0.6369%" height="15" fill="rgb(224,145,5)" fg:x="36" fg:w="1"/><text x="23.1799%" y="655.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_string_into (1 samples, 0.64%)</title><rect x="22.9299%" y="629" width="0.6369%" height="15" fill="rgb(234,130,49)" fg:x="36" fg:w="1"/><text x="23.1799%" y="639.50"></text></g><g><title>alloc::string::String::from_utf8 (1 samples, 0.64%)</title><rect x="22.9299%" y="613" width="0.6369%" height="15" fill="rgb(254,6,2)" fg:x="36" fg:w="1"/><text x="23.1799%" y="623.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.64%)</title><rect x="22.9299%" y="597" width="0.6369%" height="15" fill="rgb(208,96,46)" fg:x="36" fg:w="1"/><text x="23.1799%" y="607.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.64%)</title><rect x="22.9299%" y="581" width="0.6369%" height="15" fill="rgb(239,3,39)" fg:x="36" fg:w="1"/><text x="23.1799%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 1.27%)</title><rect x="24.8408%" y="741" width="1.2739%" height="15" fill="rgb(233,210,1)" fg:x="39" fg:w="2"/><text x="25.0908%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 1.27%)</title><rect x="24.8408%" y="725" width="1.2739%" height="15" fill="rgb(244,137,37)" fg:x="39" fg:w="2"/><text x="25.0908%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 1.27%)</title><rect x="24.8408%" y="709" width="1.2739%" height="15" fill="rgb(240,136,2)" fg:x="39" fg:w="2"/><text x="25.0908%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.64%)</title><rect x="25.4777%" y="693" width="0.6369%" height="15" fill="rgb(239,18,37)" fg:x="40" fg:w="1"/><text x="25.7277%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.64%)</title><rect x="25.4777%" y="677" width="0.6369%" height="15" fill="rgb(218,185,22)" fg:x="40" fg:w="1"/><text x="25.7277%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.64%)</title><rect x="25.4777%" y="661" width="0.6369%" height="15" fill="rgb(225,218,4)" fg:x="40" fg:w="1"/><text x="25.7277%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.64%)</title><rect x="25.4777%" y="645" width="0.6369%" height="15" fill="rgb(230,182,32)" fg:x="40" fg:w="1"/><text x="25.7277%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.64%)</title><rect x="25.4777%" y="629" width="0.6369%" height="15" fill="rgb(242,56,43)" fg:x="40" fg:w="1"/><text x="25.7277%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.64%)</title><rect x="25.4777%" y="613" width="0.6369%" height="15" fill="rgb(233,99,24)" fg:x="40" fg:w="1"/><text x="25.7277%" y="623.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.64%)</title><rect x="25.4777%" y="597" width="0.6369%" height="15" fill="rgb(234,209,42)" fg:x="40" fg:w="1"/><text x="25.7277%" y="607.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.64%)</title><rect x="25.4777%" y="581" width="0.6369%" height="15" fill="rgb(227,7,12)" fg:x="40" fg:w="1"/><text x="25.7277%" y="591.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.64%)</title><rect x="25.4777%" y="565" width="0.6369%" height="15" fill="rgb(245,203,43)" fg:x="40" fg:w="1"/><text x="25.7277%" y="575.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.64%)</title><rect x="25.4777%" y="549" width="0.6369%" height="15" fill="rgb(238,205,33)" fg:x="40" fg:w="1"/><text x="25.7277%" y="559.50"></text></g><g><title>_mi_memcpy (1 samples, 0.64%)</title><rect x="25.4777%" y="533" width="0.6369%" height="15" fill="rgb(231,56,7)" fg:x="40" fg:w="1"/><text x="25.7277%" y="543.50"></text></g><g><title>memcpy (1 samples, 0.64%)</title><rect x="25.4777%" y="517" width="0.6369%" height="15" fill="rgb(244,186,29)" fg:x="40" fg:w="1"/><text x="25.7277%" y="527.50"></text></g><g><title>[libc.so.6] (1 samples, 0.64%)</title><rect x="25.4777%" y="501" width="0.6369%" height="15" fill="rgb(234,111,31)" fg:x="40" fg:w="1"/><text x="25.7277%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="25.4777%" y="485" width="0.6369%" height="15" fill="rgb(241,149,10)" fg:x="40" fg:w="1"/><text x="25.7277%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="25.4777%" y="469" width="0.6369%" height="15" fill="rgb(249,206,44)" fg:x="40" fg:w="1"/><text x="25.7277%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="25.4777%" y="453" width="0.6369%" height="15" fill="rgb(251,153,30)" fg:x="40" fg:w="1"/><text x="25.7277%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="25.4777%" y="437" width="0.6369%" height="15" fill="rgb(239,152,38)" fg:x="40" fg:w="1"/><text x="25.7277%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="25.4777%" y="421" width="0.6369%" height="15" fill="rgb(249,139,47)" fg:x="40" fg:w="1"/><text x="25.7277%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="25.4777%" y="405" width="0.6369%" height="15" fill="rgb(244,64,35)" fg:x="40" fg:w="1"/><text x="25.7277%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="25.4777%" y="389" width="0.6369%" height="15" fill="rgb(216,46,15)" fg:x="40" fg:w="1"/><text x="25.7277%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="25.4777%" y="373" width="0.6369%" height="15" fill="rgb(250,74,19)" fg:x="40" fg:w="1"/><text x="25.7277%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="25.4777%" y="357" width="0.6369%" height="15" fill="rgb(249,42,33)" fg:x="40" fg:w="1"/><text x="25.7277%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="25.4777%" y="341" width="0.6369%" height="15" fill="rgb(242,149,17)" fg:x="40" fg:w="1"/><text x="25.7277%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="25.4777%" y="325" width="0.6369%" height="15" fill="rgb(244,29,21)" fg:x="40" fg:w="1"/><text x="25.7277%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::ops::arith::Add&lt;&amp;str&gt;&gt;::add (1 samples, 0.64%)</title><rect x="26.1146%" y="725" width="0.6369%" height="15" fill="rgb(220,130,37)" fg:x="41" fg:w="1"/><text x="26.3646%" y="735.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.64%)</title><rect x="26.1146%" y="709" width="0.6369%" height="15" fill="rgb(211,67,2)" fg:x="41" fg:w="1"/><text x="26.3646%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.64%)</title><rect x="26.1146%" y="693" width="0.6369%" height="15" fill="rgb(235,68,52)" fg:x="41" fg:w="1"/><text x="26.3646%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.64%)</title><rect x="26.1146%" y="677" width="0.6369%" height="15" fill="rgb(246,142,3)" fg:x="41" fg:w="1"/><text x="26.3646%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.64%)</title><rect x="26.1146%" y="661" width="0.6369%" height="15" fill="rgb(241,25,7)" fg:x="41" fg:w="1"/><text x="26.3646%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.64%)</title><rect x="26.1146%" y="645" width="0.6369%" height="15" fill="rgb(242,119,39)" fg:x="41" fg:w="1"/><text x="26.3646%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.64%)</title><rect x="26.1146%" y="629" width="0.6369%" height="15" fill="rgb(241,98,45)" fg:x="41" fg:w="1"/><text x="26.3646%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.64%)</title><rect x="26.1146%" y="613" width="0.6369%" height="15" fill="rgb(254,28,30)" fg:x="41" fg:w="1"/><text x="26.3646%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.64%)</title><rect x="26.1146%" y="597" width="0.6369%" height="15" fill="rgb(241,142,54)" fg:x="41" fg:w="1"/><text x="26.3646%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.64%)</title><rect x="26.1146%" y="581" width="0.6369%" height="15" fill="rgb(222,85,15)" fg:x="41" fg:w="1"/><text x="26.3646%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.64%)</title><rect x="26.1146%" y="565" width="0.6369%" height="15" fill="rgb(210,85,47)" fg:x="41" fg:w="1"/><text x="26.3646%" y="575.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.64%)</title><rect x="26.1146%" y="549" width="0.6369%" height="15" fill="rgb(224,206,25)" fg:x="41" fg:w="1"/><text x="26.3646%" y="559.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.64%)</title><rect x="26.1146%" y="533" width="0.6369%" height="15" fill="rgb(243,201,19)" fg:x="41" fg:w="1"/><text x="26.3646%" y="543.50"></text></g><g><title>__rg_realloc (1 samples, 0.64%)</title><rect x="26.1146%" y="517" width="0.6369%" height="15" fill="rgb(236,59,4)" fg:x="41" fg:w="1"/><text x="26.3646%" y="527.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (1 samples, 0.64%)</title><rect x="26.1146%" y="501" width="0.6369%" height="15" fill="rgb(254,179,45)" fg:x="41" fg:w="1"/><text x="26.3646%" y="511.50"></text></g><g><title>mimalloc::may_use_unaligned_api (1 samples, 0.64%)</title><rect x="26.1146%" y="485" width="0.6369%" height="15" fill="rgb(226,14,10)" fg:x="41" fg:w="1"/><text x="26.3646%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.64%)</title><rect x="26.7516%" y="645" width="0.6369%" height="15" fill="rgb(244,27,41)" fg:x="42" fg:w="1"/><text x="27.0016%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.64%)</title><rect x="26.7516%" y="629" width="0.6369%" height="15" fill="rgb(235,35,32)" fg:x="42" fg:w="1"/><text x="27.0016%" y="639.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.64%)</title><rect x="26.7516%" y="613" width="0.6369%" height="15" fill="rgb(218,68,31)" fg:x="42" fg:w="1"/><text x="27.0016%" y="623.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.64%)</title><rect x="26.7516%" y="597" width="0.6369%" height="15" fill="rgb(207,120,37)" fg:x="42" fg:w="1"/><text x="27.0016%" y="607.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.64%)</title><rect x="26.7516%" y="581" width="0.6369%" height="15" fill="rgb(227,98,0)" fg:x="42" fg:w="1"/><text x="27.0016%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.64%)</title><rect x="27.3885%" y="597" width="0.6369%" height="15" fill="rgb(207,7,3)" fg:x="43" fg:w="1"/><text x="27.6385%" y="607.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.64%)</title><rect x="27.3885%" y="581" width="0.6369%" height="15" fill="rgb(206,98,19)" fg:x="43" fg:w="1"/><text x="27.6385%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (3 samples, 1.91%)</title><rect x="26.7516%" y="709" width="1.9108%" height="15" fill="rgb(217,5,26)" fg:x="42" fg:w="3"/><text x="27.0016%" y="719.50">&lt;..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 1.91%)</title><rect x="26.7516%" y="693" width="1.9108%" height="15" fill="rgb(235,190,38)" fg:x="42" fg:w="3"/><text x="27.0016%" y="703.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3 samples, 1.91%)</title><rect x="26.7516%" y="677" width="1.9108%" height="15" fill="rgb(247,86,24)" fg:x="42" fg:w="3"/><text x="27.0016%" y="687.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 1.91%)</title><rect x="26.7516%" y="661" width="1.9108%" height="15" fill="rgb(205,101,16)" fg:x="42" fg:w="3"/><text x="27.0016%" y="671.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 1.27%)</title><rect x="27.3885%" y="645" width="1.2739%" height="15" fill="rgb(246,168,33)" fg:x="43" fg:w="2"/><text x="27.6385%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 1.27%)</title><rect x="27.3885%" y="629" width="1.2739%" height="15" fill="rgb(231,114,1)" fg:x="43" fg:w="2"/><text x="27.6385%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 1.27%)</title><rect x="27.3885%" y="613" width="1.2739%" height="15" fill="rgb(207,184,53)" fg:x="43" fg:w="2"/><text x="27.6385%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.64%)</title><rect x="28.0255%" y="597" width="0.6369%" height="15" fill="rgb(224,95,51)" fg:x="44" fg:w="1"/><text x="28.2755%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.64%)</title><rect x="30.5732%" y="693" width="0.6369%" height="15" fill="rgb(212,188,45)" fg:x="48" fg:w="1"/><text x="30.8232%" y="703.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.64%)</title><rect x="30.5732%" y="677" width="0.6369%" height="15" fill="rgb(223,154,38)" fg:x="48" fg:w="1"/><text x="30.8232%" y="687.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.64%)</title><rect x="30.5732%" y="661" width="0.6369%" height="15" fill="rgb(251,22,52)" fg:x="48" fg:w="1"/><text x="30.8232%" y="671.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.64%)</title><rect x="31.2102%" y="693" width="0.6369%" height="15" fill="rgb(229,209,22)" fg:x="49" fg:w="1"/><text x="31.4602%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::PropData&gt; (1 samples, 0.64%)</title><rect x="31.8471%" y="693" width="0.6369%" height="15" fill="rgb(234,138,34)" fg:x="50" fg:w="1"/><text x="32.0971%" y="703.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.64%)</title><rect x="33.1210%" y="613" width="0.6369%" height="15" fill="rgb(212,95,11)" fg:x="52" fg:w="1"/><text x="33.3710%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.64%)</title><rect x="33.1210%" y="597" width="0.6369%" height="15" fill="rgb(240,179,47)" fg:x="52" fg:w="1"/><text x="33.3710%" y="607.50"></text></g><g><title>[libc.so.6] (1 samples, 0.64%)</title><rect x="33.1210%" y="581" width="0.6369%" height="15" fill="rgb(240,163,11)" fg:x="52" fg:w="1"/><text x="33.3710%" y="591.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (8 samples, 5.10%)</title><rect x="32.4841%" y="661" width="5.0955%" height="15" fill="rgb(236,37,12)" fg:x="51" fg:w="8"/><text x="32.7341%" y="671.50">&lt;&amp;str ..</text></g><g><title>core::str::pattern::StrSearcher::new (8 samples, 5.10%)</title><rect x="32.4841%" y="645" width="5.0955%" height="15" fill="rgb(232,164,16)" fg:x="51" fg:w="8"/><text x="32.7341%" y="655.50">core::..</text></g><g><title>core::str::pattern::TwoWaySearcher::new (7 samples, 4.46%)</title><rect x="33.1210%" y="629" width="4.4586%" height="15" fill="rgb(244,205,15)" fg:x="52" fg:w="7"/><text x="33.3710%" y="639.50">core:..</text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (6 samples, 3.82%)</title><rect x="33.7580%" y="613" width="3.8217%" height="15" fill="rgb(223,117,47)" fg:x="53" fg:w="6"/><text x="34.0080%" y="623.50">core..</text></g><g><title>core::str::&lt;impl str&gt;::contains (9 samples, 5.73%)</title><rect x="32.4841%" y="693" width="5.7325%" height="15" fill="rgb(244,107,35)" fg:x="51" fg:w="9"/><text x="32.7341%" y="703.50">core::s..</text></g><g><title>core::str::pattern::Pattern::is_contained_in (9 samples, 5.73%)</title><rect x="32.4841%" y="677" width="5.7325%" height="15" fill="rgb(205,140,8)" fg:x="51" fg:w="9"/><text x="32.7341%" y="687.50">core::s..</text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.64%)</title><rect x="37.5796%" y="661" width="0.6369%" height="15" fill="rgb(228,84,46)" fg:x="59" fg:w="1"/><text x="37.8296%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;&amp;str&gt;&gt;::eq (1 samples, 0.64%)</title><rect x="38.2166%" y="677" width="0.6369%" height="15" fill="rgb(254,188,9)" fg:x="60" fg:w="1"/><text x="38.4666%" y="687.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.64%)</title><rect x="38.2166%" y="661" width="0.6369%" height="15" fill="rgb(206,112,54)" fg:x="60" fg:w="1"/><text x="38.4666%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.64%)</title><rect x="38.2166%" y="645" width="0.6369%" height="15" fill="rgb(216,84,49)" fg:x="60" fg:w="1"/><text x="38.4666%" y="655.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.64%)</title><rect x="38.2166%" y="629" width="0.6369%" height="15" fill="rgb(214,194,35)" fg:x="60" fg:w="1"/><text x="38.4666%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.64%)</title><rect x="38.2166%" y="613" width="0.6369%" height="15" fill="rgb(249,28,3)" fg:x="60" fg:w="1"/><text x="38.4666%" y="623.50"></text></g><g><title>demoparser::parsing::entities::is_wanted_prop_name (3 samples, 1.91%)</title><rect x="38.2166%" y="693" width="1.9108%" height="15" fill="rgb(222,56,52)" fg:x="60" fg:w="3"/><text x="38.4666%" y="703.50">d..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 1.27%)</title><rect x="38.8535%" y="677" width="1.2739%" height="15" fill="rgb(245,217,50)" fg:x="61" fg:w="2"/><text x="39.1035%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (2 samples, 1.27%)</title><rect x="38.8535%" y="661" width="1.2739%" height="15" fill="rgb(213,201,24)" fg:x="61" fg:w="2"/><text x="39.1035%" y="671.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2 samples, 1.27%)</title><rect x="38.8535%" y="645" width="1.2739%" height="15" fill="rgb(248,116,28)" fg:x="61" fg:w="2"/><text x="39.1035%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 1.27%)</title><rect x="38.8535%" y="629" width="1.2739%" height="15" fill="rgb(219,72,43)" fg:x="61" fg:w="2"/><text x="39.1035%" y="639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 1.27%)</title><rect x="38.8535%" y="613" width="1.2739%" height="15" fill="rgb(209,138,14)" fg:x="61" fg:w="2"/><text x="39.1035%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 1.27%)</title><rect x="38.8535%" y="597" width="1.2739%" height="15" fill="rgb(222,18,33)" fg:x="61" fg:w="2"/><text x="39.1035%" y="607.50"></text></g><g><title>[libc.so.6] (1 samples, 0.64%)</title><rect x="39.4904%" y="581" width="0.6369%" height="15" fill="rgb(213,199,7)" fg:x="62" fg:w="1"/><text x="39.7404%" y="591.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_float (3 samples, 1.91%)</title><rect x="43.9490%" y="677" width="1.9108%" height="15" fill="rgb(250,110,10)" fg:x="69" fg:w="3"/><text x="44.1990%" y="687.50">d..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (1 samples, 0.64%)</title><rect x="45.2229%" y="661" width="0.6369%" height="15" fill="rgb(248,123,6)" fg:x="71" fg:w="1"/><text x="45.4729%" y="671.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.64%)</title><rect x="45.2229%" y="645" width="0.6369%" height="15" fill="rgb(206,91,31)" fg:x="71" fg:w="1"/><text x="45.4729%" y="655.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode (10 samples, 6.37%)</title><rect x="40.1274%" y="693" width="6.3694%" height="15" fill="rgb(211,154,13)" fg:x="63" fg:w="10"/><text x="40.3774%" y="703.50">demopars..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_vec_xy (1 samples, 0.64%)</title><rect x="45.8599%" y="677" width="0.6369%" height="15" fill="rgb(225,148,7)" fg:x="72" fg:w="1"/><text x="46.1099%" y="687.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_float (1 samples, 0.64%)</title><rect x="45.8599%" y="661" width="0.6369%" height="15" fill="rgb(220,160,43)" fg:x="72" fg:w="1"/><text x="46.1099%" y="671.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_boolie (2 samples, 1.27%)</title><rect x="46.4968%" y="677" width="1.2739%" height="15" fill="rgb(213,52,39)" fg:x="73" fg:w="2"/><text x="46.7468%" y="687.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bit (2 samples, 1.27%)</title><rect x="46.4968%" y="661" width="1.2739%" height="15" fill="rgb(243,137,7)" fg:x="73" fg:w="2"/><text x="46.7468%" y="671.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (2 samples, 1.27%)</title><rect x="46.4968%" y="645" width="1.2739%" height="15" fill="rgb(230,79,13)" fg:x="73" fg:w="2"/><text x="46.7468%" y="655.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_inx (5 samples, 3.18%)</title><rect x="46.4968%" y="693" width="3.1847%" height="15" fill="rgb(247,105,23)" fg:x="73" fg:w="5"/><text x="46.7468%" y="703.50">dem..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (3 samples, 1.91%)</title><rect x="47.7707%" y="677" width="1.9108%" height="15" fill="rgb(223,179,41)" fg:x="75" fg:w="3"/><text x="48.0207%" y="687.50">d..</text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (3 samples, 1.91%)</title><rect x="47.7707%" y="661" width="1.9108%" height="15" fill="rgb(218,9,34)" fg:x="75" fg:w="3"/><text x="48.0207%" y="671.50">&lt;..</text></g><g><title>demoparser::parsing::entities::update_entity (37 samples, 23.57%)</title><rect x="26.7516%" y="725" width="23.5669%" height="15" fill="rgb(222,106,8)" fg:x="42" fg:w="37"/><text x="27.0016%" y="735.50">demoparser::parsing::entities::update..</text></g><g><title>demoparser::parsing::entities::parse_ent_props (34 samples, 21.66%)</title><rect x="28.6624%" y="709" width="21.6561%" height="15" fill="rgb(211,220,0)" fg:x="45" fg:w="34"/><text x="28.9124%" y="719.50">demoparser::parsing::entities::par..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.64%)</title><rect x="49.6815%" y="693" width="0.6369%" height="15" fill="rgb(229,52,16)" fg:x="78" fg:w="1"/><text x="49.9315%" y="703.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.64%)</title><rect x="49.6815%" y="677" width="0.6369%" height="15" fill="rgb(212,155,18)" fg:x="78" fg:w="1"/><text x="49.9315%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.64%)</title><rect x="49.6815%" y="661" width="0.6369%" height="15" fill="rgb(242,21,14)" fg:x="78" fg:w="1"/><text x="49.9315%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.64%)</title><rect x="49.6815%" y="645" width="0.6369%" height="15" fill="rgb(222,19,48)" fg:x="78" fg:w="1"/><text x="49.9315%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.64%)</title><rect x="49.6815%" y="629" width="0.6369%" height="15" fill="rgb(232,45,27)" fg:x="78" fg:w="1"/><text x="49.9315%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.64%)</title><rect x="49.6815%" y="613" width="0.6369%" height="15" fill="rgb(249,103,42)" fg:x="78" fg:w="1"/><text x="49.9315%" y="623.50"></text></g><g><title>core::hash::Hasher::write_str (1 samples, 0.64%)</title><rect x="49.6815%" y="597" width="0.6369%" height="15" fill="rgb(246,81,33)" fg:x="78" fg:w="1"/><text x="49.9315%" y="607.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (1 samples, 0.64%)</title><rect x="49.6815%" y="581" width="0.6369%" height="15" fill="rgb(252,33,42)" fg:x="78" fg:w="1"/><text x="49.9315%" y="591.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (1 samples, 0.64%)</title><rect x="49.6815%" y="565" width="0.6369%" height="15" fill="rgb(209,212,41)" fg:x="78" fg:w="1"/><text x="49.9315%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.64%)</title><rect x="49.6815%" y="549" width="0.6369%" height="15" fill="rgb(207,154,6)" fg:x="78" fg:w="1"/><text x="49.9315%" y="559.50"></text></g><g><title>demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_packet_entities (39 samples, 24.84%)</title><rect x="26.1146%" y="741" width="24.8408%" height="15" fill="rgb(223,64,47)" fg:x="41" fg:w="39"/><text x="26.3646%" y="751.50">demoparser::parsing::entities::&lt;impl dem..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_boolie (1 samples, 0.64%)</title><rect x="50.3185%" y="725" width="0.6369%" height="15" fill="rgb(211,161,38)" fg:x="79" fg:w="1"/><text x="50.5685%" y="735.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bit (1 samples, 0.64%)</title><rect x="50.3185%" y="709" width="0.6369%" height="15" fill="rgb(219,138,40)" fg:x="79" fg:w="1"/><text x="50.5685%" y="719.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.64%)</title><rect x="50.3185%" y="693" width="0.6369%" height="15" fill="rgb(241,228,46)" fg:x="79" fg:w="1"/><text x="50.5685%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.64%)</title><rect x="50.9554%" y="661" width="0.6369%" height="15" fill="rgb(223,209,38)" fg:x="80" fg:w="1"/><text x="51.2054%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.64%)</title><rect x="50.9554%" y="645" width="0.6369%" height="15" fill="rgb(236,164,45)" fg:x="80" fg:w="1"/><text x="51.2054%" y="655.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.64%)</title><rect x="50.9554%" y="629" width="0.6369%" height="15" fill="rgb(231,15,5)" fg:x="80" fg:w="1"/><text x="51.2054%" y="639.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.64%)</title><rect x="50.9554%" y="613" width="0.6369%" height="15" fill="rgb(252,35,15)" fg:x="80" fg:w="1"/><text x="51.2054%" y="623.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.64%)</title><rect x="50.9554%" y="597" width="0.6369%" height="15" fill="rgb(248,181,18)" fg:x="80" fg:w="1"/><text x="51.2054%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (2 samples, 1.27%)</title><rect x="50.9554%" y="725" width="1.2739%" height="15" fill="rgb(233,39,42)" fg:x="80" fg:w="2"/><text x="51.2054%" y="735.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 1.27%)</title><rect x="50.9554%" y="709" width="1.2739%" height="15" fill="rgb(238,110,33)" fg:x="80" fg:w="2"/><text x="51.2054%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 1.27%)</title><rect x="50.9554%" y="693" width="1.2739%" height="15" fill="rgb(233,195,10)" fg:x="80" fg:w="2"/><text x="51.2054%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 1.27%)</title><rect x="50.9554%" y="677" width="1.2739%" height="15" fill="rgb(254,105,3)" fg:x="80" fg:w="2"/><text x="51.2054%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.64%)</title><rect x="51.5924%" y="661" width="0.6369%" height="15" fill="rgb(221,225,9)" fg:x="81" fg:w="1"/><text x="51.8424%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.64%)</title><rect x="51.5924%" y="645" width="0.6369%" height="15" fill="rgb(224,227,45)" fg:x="81" fg:w="1"/><text x="51.8424%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.64%)</title><rect x="51.5924%" y="629" width="0.6369%" height="15" fill="rgb(229,198,43)" fg:x="81" fg:w="1"/><text x="51.8424%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.64%)</title><rect x="51.5924%" y="613" width="0.6369%" height="15" fill="rgb(206,209,35)" fg:x="81" fg:w="1"/><text x="51.8424%" y="623.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1 samples, 0.64%)</title><rect x="52.8662%" y="709" width="0.6369%" height="15" fill="rgb(245,195,53)" fg:x="83" fg:w="1"/><text x="53.1162%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.64%)</title><rect x="52.8662%" y="693" width="0.6369%" height="15" fill="rgb(240,92,26)" fg:x="83" fg:w="1"/><text x="53.1162%" y="703.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.64%)</title><rect x="52.8662%" y="677" width="0.6369%" height="15" fill="rgb(207,40,23)" fg:x="83" fg:w="1"/><text x="53.1162%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.64%)</title><rect x="52.8662%" y="661" width="0.6369%" height="15" fill="rgb(223,111,35)" fg:x="83" fg:w="1"/><text x="53.1162%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.64%)</title><rect x="52.8662%" y="645" width="0.6369%" height="15" fill="rgb(229,147,28)" fg:x="83" fg:w="1"/><text x="53.1162%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.64%)</title><rect x="52.8662%" y="629" width="0.6369%" height="15" fill="rgb(211,29,28)" fg:x="83" fg:w="1"/><text x="53.1162%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.64%)</title><rect x="52.8662%" y="613" width="0.6369%" height="15" fill="rgb(228,72,33)" fg:x="83" fg:w="1"/><text x="53.1162%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.64%)</title><rect x="52.8662%" y="597" width="0.6369%" height="15" fill="rgb(205,214,31)" fg:x="83" fg:w="1"/><text x="53.1162%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.64%)</title><rect x="52.8662%" y="581" width="0.6369%" height="15" fill="rgb(224,111,15)" fg:x="83" fg:w="1"/><text x="53.1162%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.64%)</title><rect x="52.8662%" y="565" width="0.6369%" height="15" fill="rgb(253,21,26)" fg:x="83" fg:w="1"/><text x="53.1162%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.64%)</title><rect x="52.8662%" y="549" width="0.6369%" height="15" fill="rgb(245,139,43)" fg:x="83" fg:w="1"/><text x="53.1162%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.64%)</title><rect x="52.8662%" y="533" width="0.6369%" height="15" fill="rgb(252,170,7)" fg:x="83" fg:w="1"/><text x="53.1162%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.64%)</title><rect x="52.8662%" y="517" width="0.6369%" height="15" fill="rgb(231,118,14)" fg:x="83" fg:w="1"/><text x="53.1162%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.64%)</title><rect x="52.8662%" y="501" width="0.6369%" height="15" fill="rgb(238,83,0)" fg:x="83" fg:w="1"/><text x="53.1162%" y="511.50"></text></g><g><title>mi_malloc (1 samples, 0.64%)</title><rect x="52.8662%" y="485" width="0.6369%" height="15" fill="rgb(221,39,39)" fg:x="83" fg:w="1"/><text x="53.1162%" y="495.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.64%)</title><rect x="52.8662%" y="469" width="0.6369%" height="15" fill="rgb(222,119,46)" fg:x="83" fg:w="1"/><text x="53.1162%" y="479.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.64%)</title><rect x="52.8662%" y="453" width="0.6369%" height="15" fill="rgb(222,165,49)" fg:x="83" fg:w="1"/><text x="53.1162%" y="463.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.64%)</title><rect x="52.8662%" y="437" width="0.6369%" height="15" fill="rgb(219,113,52)" fg:x="83" fg:w="1"/><text x="53.1162%" y="447.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.64%)</title><rect x="54.1401%" y="581" width="0.6369%" height="15" fill="rgb(214,7,15)" fg:x="85" fg:w="1"/><text x="54.3901%" y="591.50"></text></g><g><title>_mi_memcpy (1 samples, 0.64%)</title><rect x="54.1401%" y="565" width="0.6369%" height="15" fill="rgb(235,32,4)" fg:x="85" fg:w="1"/><text x="54.3901%" y="575.50"></text></g><g><title>memcpy (1 samples, 0.64%)</title><rect x="54.1401%" y="549" width="0.6369%" height="15" fill="rgb(238,90,54)" fg:x="85" fg:w="1"/><text x="54.3901%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 0.64%)</title><rect x="54.1401%" y="533" width="0.6369%" height="15" fill="rgb(213,208,19)" fg:x="85" fg:w="1"/><text x="54.3901%" y="543.50"></text></g><g><title>_mi_malloc_generic (2 samples, 1.27%)</title><rect x="54.7771%" y="565" width="1.2739%" height="15" fill="rgb(233,156,4)" fg:x="86" fg:w="2"/><text x="55.0271%" y="575.50"></text></g><g><title>mi_find_page (2 samples, 1.27%)</title><rect x="54.7771%" y="549" width="1.2739%" height="15" fill="rgb(207,194,5)" fg:x="86" fg:w="2"/><text x="55.0271%" y="559.50"></text></g><g><title>mi_find_free_page (2 samples, 1.27%)</title><rect x="54.7771%" y="533" width="1.2739%" height="15" fill="rgb(206,111,30)" fg:x="86" fg:w="2"/><text x="55.0271%" y="543.50"></text></g><g><title>mi_page_queue_find_free_ex (2 samples, 1.27%)</title><rect x="54.7771%" y="517" width="1.2739%" height="15" fill="rgb(243,70,54)" fg:x="86" fg:w="2"/><text x="55.0271%" y="527.50"></text></g><g><title>mi_page_extend_free (2 samples, 1.27%)</title><rect x="54.7771%" y="501" width="1.2739%" height="15" fill="rgb(242,28,8)" fg:x="86" fg:w="2"/><text x="55.0271%" y="511.50"></text></g><g><title>mi_page_extend_free (2 samples, 1.27%)</title><rect x="54.7771%" y="485" width="1.2739%" height="15" fill="rgb(219,106,18)" fg:x="86" fg:w="2"/><text x="55.0271%" y="495.50"></text></g><g><title>mi_page_free_list_extend (2 samples, 1.27%)</title><rect x="54.7771%" y="469" width="1.2739%" height="15" fill="rgb(244,222,10)" fg:x="86" fg:w="2"/><text x="55.0271%" y="479.50"></text></g><g><title>mi_block_set_next (2 samples, 1.27%)</title><rect x="54.7771%" y="453" width="1.2739%" height="15" fill="rgb(236,179,52)" fg:x="86" fg:w="2"/><text x="55.0271%" y="463.50"></text></g><g><title>mi_block_set_nextx (2 samples, 1.27%)</title><rect x="54.7771%" y="437" width="1.2739%" height="15" fill="rgb(213,23,39)" fg:x="86" fg:w="2"/><text x="55.0271%" y="447.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="54.7771%" y="421" width="1.2739%" height="15" fill="rgb(238,48,10)" fg:x="86" fg:w="2"/><text x="55.0271%" y="431.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="54.7771%" y="405" width="1.2739%" height="15" fill="rgb(251,196,23)" fg:x="86" fg:w="2"/><text x="55.0271%" y="415.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="54.7771%" y="389" width="1.2739%" height="15" fill="rgb(250,152,24)" fg:x="86" fg:w="2"/><text x="55.0271%" y="399.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="54.7771%" y="373" width="1.2739%" height="15" fill="rgb(209,150,17)" fg:x="86" fg:w="2"/><text x="55.0271%" y="383.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="54.7771%" y="357" width="1.2739%" height="15" fill="rgb(234,202,34)" fg:x="86" fg:w="2"/><text x="55.0271%" y="367.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="54.7771%" y="341" width="1.2739%" height="15" fill="rgb(253,148,53)" fg:x="86" fg:w="2"/><text x="55.0271%" y="351.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="54.7771%" y="325" width="1.2739%" height="15" fill="rgb(218,129,16)" fg:x="86" fg:w="2"/><text x="55.0271%" y="335.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="54.7771%" y="309" width="1.2739%" height="15" fill="rgb(216,85,19)" fg:x="86" fg:w="2"/><text x="55.0271%" y="319.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="54.7771%" y="293" width="1.2739%" height="15" fill="rgb(235,228,7)" fg:x="86" fg:w="2"/><text x="55.0271%" y="303.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="54.7771%" y="277" width="1.2739%" height="15" fill="rgb(245,175,0)" fg:x="86" fg:w="2"/><text x="55.0271%" y="287.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="54.7771%" y="261" width="1.2739%" height="15" fill="rgb(208,168,36)" fg:x="86" fg:w="2"/><text x="55.0271%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 3.18%)</title><rect x="53.5032%" y="693" width="3.1847%" height="15" fill="rgb(246,171,24)" fg:x="84" fg:w="5"/><text x="53.7532%" y="703.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 3.18%)</title><rect x="53.5032%" y="677" width="3.1847%" height="15" fill="rgb(215,142,24)" fg:x="84" fg:w="5"/><text x="53.7532%" y="687.50">all..</text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 3.18%)</title><rect x="53.5032%" y="661" width="3.1847%" height="15" fill="rgb(250,187,7)" fg:x="84" fg:w="5"/><text x="53.7532%" y="671.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 2.55%)</title><rect x="54.1401%" y="645" width="2.5478%" height="15" fill="rgb(228,66,33)" fg:x="85" fg:w="4"/><text x="54.3901%" y="655.50">&lt;a..</text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 2.55%)</title><rect x="54.1401%" y="629" width="2.5478%" height="15" fill="rgb(234,215,21)" fg:x="85" fg:w="4"/><text x="54.3901%" y="639.50">al..</text></g><g><title>alloc::alloc::realloc (4 samples, 2.55%)</title><rect x="54.1401%" y="613" width="2.5478%" height="15" fill="rgb(222,191,20)" fg:x="85" fg:w="4"/><text x="54.3901%" y="623.50">al..</text></g><g><title>_mi_heap_realloc_zero (4 samples, 2.55%)</title><rect x="54.1401%" y="597" width="2.5478%" height="15" fill="rgb(245,79,54)" fg:x="85" fg:w="4"/><text x="54.3901%" y="607.50">_m..</text></g><g><title>mi_heap_malloc (3 samples, 1.91%)</title><rect x="54.7771%" y="581" width="1.9108%" height="15" fill="rgb(240,10,37)" fg:x="86" fg:w="3"/><text x="55.0271%" y="591.50">m..</text></g><g><title>mi_page_free_list_extend (1 samples, 0.64%)</title><rect x="56.0510%" y="565" width="0.6369%" height="15" fill="rgb(214,192,32)" fg:x="88" fg:w="1"/><text x="56.3010%" y="575.50"></text></g><g><title>mi_block_set_next (1 samples, 0.64%)</title><rect x="56.0510%" y="549" width="0.6369%" height="15" fill="rgb(209,36,54)" fg:x="88" fg:w="1"/><text x="56.3010%" y="559.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.64%)</title><rect x="56.0510%" y="533" width="0.6369%" height="15" fill="rgb(220,10,11)" fg:x="88" fg:w="1"/><text x="56.3010%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="56.0510%" y="517" width="0.6369%" height="15" fill="rgb(221,106,17)" fg:x="88" fg:w="1"/><text x="56.3010%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 3.82%)</title><rect x="53.5032%" y="709" width="3.8217%" height="15" fill="rgb(251,142,44)" fg:x="84" fg:w="6"/><text x="53.7532%" y="719.50">allo..</text></g><g><title>core::ptr::write (1 samples, 0.64%)</title><rect x="56.6879%" y="693" width="0.6369%" height="15" fill="rgb(238,13,15)" fg:x="89" fg:w="1"/><text x="56.9379%" y="703.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (4 samples, 2.55%)</title><rect x="57.3248%" y="693" width="2.5478%" height="15" fill="rgb(208,107,27)" fg:x="90" fg:w="4"/><text x="57.5748%" y="703.50">co..</text></g><g><title>core::str::pattern::ReverseSearcher::next_reject_back (4 samples, 2.55%)</title><rect x="57.3248%" y="677" width="2.5478%" height="15" fill="rgb(205,136,37)" fg:x="90" fg:w="4"/><text x="57.5748%" y="687.50">co..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_back (4 samples, 2.55%)</title><rect x="57.3248%" y="661" width="2.5478%" height="15" fill="rgb(250,205,27)" fg:x="90" fg:w="4"/><text x="57.5748%" y="671.50">&lt;c..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (4 samples, 2.55%)</title><rect x="57.3248%" y="645" width="2.5478%" height="15" fill="rgb(210,80,43)" fg:x="90" fg:w="4"/><text x="57.5748%" y="655.50">&lt;c..</text></g><g><title>core::str::validations::next_code_point_reverse (4 samples, 2.55%)</title><rect x="57.3248%" y="629" width="2.5478%" height="15" fill="rgb(247,160,36)" fg:x="90" fg:w="4"/><text x="57.5748%" y="639.50">co..</text></g><g><title>demoparser::parsing::game_events::parse_key_steam_name (5 samples, 3.18%)</title><rect x="57.3248%" y="709" width="3.1847%" height="15" fill="rgb(234,13,49)" fg:x="90" fg:w="5"/><text x="57.5748%" y="719.50">dem..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.64%)</title><rect x="59.8726%" y="693" width="0.6369%" height="15" fill="rgb(234,122,0)" fg:x="94" fg:w="1"/><text x="60.1226%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.64%)</title><rect x="59.8726%" y="677" width="0.6369%" height="15" fill="rgb(207,146,38)" fg:x="94" fg:w="1"/><text x="60.1226%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.64%)</title><rect x="59.8726%" y="661" width="0.6369%" height="15" fill="rgb(207,177,25)" fg:x="94" fg:w="1"/><text x="60.1226%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.64%)</title><rect x="59.8726%" y="645" width="0.6369%" height="15" fill="rgb(211,178,42)" fg:x="94" fg:w="1"/><text x="60.1226%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.64%)</title><rect x="59.8726%" y="629" width="0.6369%" height="15" fill="rgb(230,69,54)" fg:x="94" fg:w="1"/><text x="60.1226%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.64%)</title><rect x="59.8726%" y="613" width="0.6369%" height="15" fill="rgb(214,135,41)" fg:x="94" fg:w="1"/><text x="60.1226%" y="623.50"></text></g><g><title>demoparser::parsing::game_events::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_game_events (16 samples, 10.19%)</title><rect x="50.9554%" y="741" width="10.1911%" height="15" fill="rgb(237,67,25)" fg:x="80" fg:w="16"/><text x="51.2054%" y="751.50">demoparser::par..</text></g><g><title>demoparser::parsing::game_events::gen_name_val_pairs (14 samples, 8.92%)</title><rect x="52.2293%" y="725" width="8.9172%" height="15" fill="rgb(222,189,50)" fg:x="82" fg:w="14"/><text x="52.4793%" y="735.50">demoparser::p..</text></g><g><title>demoparser::parsing::game_events::parse_props (1 samples, 0.64%)</title><rect x="60.5096%" y="709" width="0.6369%" height="15" fill="rgb(245,148,34)" fg:x="95" fg:w="1"/><text x="60.7596%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.64%)</title><rect x="60.5096%" y="693" width="0.6369%" height="15" fill="rgb(222,29,6)" fg:x="95" fg:w="1"/><text x="60.7596%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.64%)</title><rect x="60.5096%" y="677" width="0.6369%" height="15" fill="rgb(221,189,43)" fg:x="95" fg:w="1"/><text x="60.7596%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.64%)</title><rect x="60.5096%" y="661" width="0.6369%" height="15" fill="rgb(207,36,27)" fg:x="95" fg:w="1"/><text x="60.7596%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.64%)</title><rect x="60.5096%" y="645" width="0.6369%" height="15" fill="rgb(217,90,24)" fg:x="95" fg:w="1"/><text x="60.7596%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.64%)</title><rect x="60.5096%" y="629" width="0.6369%" height="15" fill="rgb(224,66,35)" fg:x="95" fg:w="1"/><text x="60.7596%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.64%)</title><rect x="60.5096%" y="613" width="0.6369%" height="15" fill="rgb(221,13,50)" fg:x="95" fg:w="1"/><text x="60.7596%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.64%)</title><rect x="60.5096%" y="597" width="0.6369%" height="15" fill="rgb(236,68,49)" fg:x="95" fg:w="1"/><text x="60.7596%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.64%)</title><rect x="60.5096%" y="581" width="0.6369%" height="15" fill="rgb(229,146,28)" fg:x="95" fg:w="1"/><text x="60.7596%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.64%)</title><rect x="60.5096%" y="565" width="0.6369%" height="15" fill="rgb(225,31,38)" fg:x="95" fg:w="1"/><text x="60.7596%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.64%)</title><rect x="60.5096%" y="549" width="0.6369%" height="15" fill="rgb(250,208,3)" fg:x="95" fg:w="1"/><text x="60.7596%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.64%)</title><rect x="60.5096%" y="533" width="0.6369%" height="15" fill="rgb(246,54,23)" fg:x="95" fg:w="1"/><text x="60.7596%" y="543.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.64%)</title><rect x="60.5096%" y="517" width="0.6369%" height="15" fill="rgb(243,76,11)" fg:x="95" fg:w="1"/><text x="60.7596%" y="527.50"></text></g><g><title>mi_find_page (1 samples, 0.64%)</title><rect x="60.5096%" y="501" width="0.6369%" height="15" fill="rgb(245,21,50)" fg:x="95" fg:w="1"/><text x="60.7596%" y="511.50"></text></g><g><title>mi_find_free_page (1 samples, 0.64%)</title><rect x="60.5096%" y="485" width="0.6369%" height="15" fill="rgb(228,9,43)" fg:x="95" fg:w="1"/><text x="60.7596%" y="495.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 0.64%)</title><rect x="60.5096%" y="469" width="0.6369%" height="15" fill="rgb(208,100,47)" fg:x="95" fg:w="1"/><text x="60.7596%" y="479.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.64%)</title><rect x="60.5096%" y="453" width="0.6369%" height="15" fill="rgb(232,26,8)" fg:x="95" fg:w="1"/><text x="60.7596%" y="463.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.64%)</title><rect x="60.5096%" y="437" width="0.6369%" height="15" fill="rgb(216,166,38)" fg:x="95" fg:w="1"/><text x="60.7596%" y="447.50"></text></g><g><title>mi_page_free_list_extend (1 samples, 0.64%)</title><rect x="60.5096%" y="421" width="0.6369%" height="15" fill="rgb(251,202,51)" fg:x="95" fg:w="1"/><text x="60.7596%" y="431.50"></text></g><g><title>mi_block_set_next (1 samples, 0.64%)</title><rect x="60.5096%" y="405" width="0.6369%" height="15" fill="rgb(254,216,34)" fg:x="95" fg:w="1"/><text x="60.7596%" y="415.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.64%)</title><rect x="60.5096%" y="389" width="0.6369%" height="15" fill="rgb(251,32,27)" fg:x="95" fg:w="1"/><text x="60.7596%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="60.5096%" y="373" width="0.6369%" height="15" fill="rgb(208,127,28)" fg:x="95" fg:w="1"/><text x="60.7596%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="60.5096%" y="357" width="0.6369%" height="15" fill="rgb(224,137,22)" fg:x="95" fg:w="1"/><text x="60.7596%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="60.5096%" y="341" width="0.6369%" height="15" fill="rgb(254,70,32)" fg:x="95" fg:w="1"/><text x="60.7596%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="60.5096%" y="325" width="0.6369%" height="15" fill="rgb(229,75,37)" fg:x="95" fg:w="1"/><text x="60.7596%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="60.5096%" y="309" width="0.6369%" height="15" fill="rgb(252,64,23)" fg:x="95" fg:w="1"/><text x="60.7596%" y="319.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_i32 (2 samples, 1.27%)</title><rect x="61.1465%" y="741" width="1.2739%" height="15" fill="rgb(232,162,48)" fg:x="96" fg:w="2"/><text x="61.3965%" y="751.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_n_bytes (1 samples, 0.64%)</title><rect x="62.4204%" y="741" width="0.6369%" height="15" fill="rgb(246,160,12)" fg:x="98" fg:w="1"/><text x="62.6704%" y="751.50"></text></g><g><title>&lt;demoparser::parsing::variants::BytesVariant as core::ops::index::Index&lt;Idx&gt;&gt;::index (1 samples, 0.64%)</title><rect x="62.4204%" y="725" width="0.6369%" height="15" fill="rgb(247,166,0)" fg:x="98" fg:w="1"/><text x="62.6704%" y="735.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_varint (3 samples, 1.91%)</title><rect x="63.0573%" y="741" width="1.9108%" height="15" fill="rgb(249,219,21)" fg:x="99" fg:w="3"/><text x="63.3073%" y="751.50">d..</text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="64.3312%" y="725" width="0.6369%" height="15" fill="rgb(205,209,3)" fg:x="101" fg:w="1"/><text x="64.5812%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="64.3312%" y="709" width="0.6369%" height="15" fill="rgb(243,44,1)" fg:x="101" fg:w="1"/><text x="64.5812%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="64.3312%" y="693" width="0.6369%" height="15" fill="rgb(206,159,16)" fg:x="101" fg:w="1"/><text x="64.5812%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="64.3312%" y="677" width="0.6369%" height="15" fill="rgb(244,77,30)" fg:x="101" fg:w="1"/><text x="64.5812%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="64.3312%" y="661" width="0.6369%" height="15" fill="rgb(218,69,12)" fg:x="101" fg:w="1"/><text x="64.5812%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="64.3312%" y="645" width="0.6369%" height="15" fill="rgb(212,87,7)" fg:x="101" fg:w="1"/><text x="64.5812%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="64.3312%" y="629" width="0.6369%" height="15" fill="rgb(245,114,25)" fg:x="101" fg:w="1"/><text x="64.5812%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="64.3312%" y="613" width="0.6369%" height="15" fill="rgb(210,61,42)" fg:x="101" fg:w="1"/><text x="64.5812%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="64.3312%" y="597" width="0.6369%" height="15" fill="rgb(211,52,33)" fg:x="101" fg:w="1"/><text x="64.5812%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="64.3312%" y="581" width="0.6369%" height="15" fill="rgb(234,58,33)" fg:x="101" fg:w="1"/><text x="64.5812%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="64.3312%" y="565" width="0.6369%" height="15" fill="rgb(220,115,36)" fg:x="101" fg:w="1"/><text x="64.5812%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="64.3312%" y="549" width="0.6369%" height="15" fill="rgb(243,153,54)" fg:x="101" fg:w="1"/><text x="64.5812%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="64.3312%" y="533" width="0.6369%" height="15" fill="rgb(251,47,18)" fg:x="101" fg:w="1"/><text x="64.5812%" y="543.50"></text></g><g><title>&lt;demoparser::parsing::stringtables::StringTable as core::clone::Clone&gt;::clone (1 samples, 0.64%)</title><rect x="64.9682%" y="725" width="0.6369%" height="15" fill="rgb(242,102,42)" fg:x="102" fg:w="1"/><text x="65.2182%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.64%)</title><rect x="64.9682%" y="709" width="0.6369%" height="15" fill="rgb(234,31,38)" fg:x="102" fg:w="1"/><text x="65.2182%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.64%)</title><rect x="64.9682%" y="693" width="0.6369%" height="15" fill="rgb(221,117,51)" fg:x="102" fg:w="1"/><text x="65.2182%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.64%)</title><rect x="64.9682%" y="677" width="0.6369%" height="15" fill="rgb(212,20,18)" fg:x="102" fg:w="1"/><text x="65.2182%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.64%)</title><rect x="64.9682%" y="661" width="0.6369%" height="15" fill="rgb(245,133,36)" fg:x="102" fg:w="1"/><text x="65.2182%" y="671.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.64%)</title><rect x="64.9682%" y="645" width="0.6369%" height="15" fill="rgb(212,6,19)" fg:x="102" fg:w="1"/><text x="65.2182%" y="655.50"></text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Demo&gt;::create_string_table (2 samples, 1.27%)</title><rect x="64.9682%" y="741" width="1.2739%" height="15" fill="rgb(218,1,36)" fg:x="102" fg:w="2"/><text x="65.2182%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.64%)</title><rect x="65.6051%" y="725" width="0.6369%" height="15" fill="rgb(246,84,54)" fg:x="103" fg:w="1"/><text x="65.8551%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.64%)</title><rect x="65.6051%" y="709" width="0.6369%" height="15" fill="rgb(242,110,6)" fg:x="103" fg:w="1"/><text x="65.8551%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.64%)</title><rect x="65.6051%" y="693" width="0.6369%" height="15" fill="rgb(214,47,5)" fg:x="103" fg:w="1"/><text x="65.8551%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.64%)</title><rect x="65.6051%" y="677" width="0.6369%" height="15" fill="rgb(218,159,25)" fg:x="103" fg:w="1"/><text x="65.8551%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.64%)</title><rect x="65.6051%" y="661" width="0.6369%" height="15" fill="rgb(215,211,28)" fg:x="103" fg:w="1"/><text x="65.8551%" y="671.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.64%)</title><rect x="65.6051%" y="645" width="0.6369%" height="15" fill="rgb(238,59,32)" fg:x="103" fg:w="1"/><text x="65.8551%" y="655.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.64%)</title><rect x="65.6051%" y="629" width="0.6369%" height="15" fill="rgb(226,82,3)" fg:x="103" fg:w="1"/><text x="65.8551%" y="639.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.64%)</title><rect x="65.6051%" y="613" width="0.6369%" height="15" fill="rgb(240,164,32)" fg:x="103" fg:w="1"/><text x="65.8551%" y="623.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.64%)</title><rect x="65.6051%" y="597" width="0.6369%" height="15" fill="rgb(232,46,7)" fg:x="103" fg:w="1"/><text x="65.8551%" y="607.50"></text></g><g><title>_mi_memcpy (1 samples, 0.64%)</title><rect x="65.6051%" y="581" width="0.6369%" height="15" fill="rgb(229,129,53)" fg:x="103" fg:w="1"/><text x="65.8551%" y="591.50"></text></g><g><title>memcpy (1 samples, 0.64%)</title><rect x="65.6051%" y="565" width="0.6369%" height="15" fill="rgb(234,188,29)" fg:x="103" fg:w="1"/><text x="65.8551%" y="575.50"></text></g><g><title>[libc.so.6] (1 samples, 0.64%)</title><rect x="65.6051%" y="549" width="0.6369%" height="15" fill="rgb(246,141,4)" fg:x="103" fg:w="1"/><text x="65.8551%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="65.6051%" y="533" width="0.6369%" height="15" fill="rgb(229,23,39)" fg:x="103" fg:w="1"/><text x="65.8551%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.64%)</title><rect x="66.8790%" y="725" width="0.6369%" height="15" fill="rgb(206,12,3)" fg:x="105" fg:w="1"/><text x="67.1290%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.64%)</title><rect x="66.8790%" y="709" width="0.6369%" height="15" fill="rgb(252,226,20)" fg:x="105" fg:w="1"/><text x="67.1290%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.64%)</title><rect x="66.8790%" y="693" width="0.6369%" height="15" fill="rgb(216,123,35)" fg:x="105" fg:w="1"/><text x="67.1290%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.64%)</title><rect x="66.8790%" y="677" width="0.6369%" height="15" fill="rgb(212,68,40)" fg:x="105" fg:w="1"/><text x="67.1290%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.64%)</title><rect x="66.8790%" y="661" width="0.6369%" height="15" fill="rgb(254,125,32)" fg:x="105" fg:w="1"/><text x="67.1290%" y="671.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.64%)</title><rect x="66.8790%" y="645" width="0.6369%" height="15" fill="rgb(253,97,22)" fg:x="105" fg:w="1"/><text x="67.1290%" y="655.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.64%)</title><rect x="66.8790%" y="629" width="0.6369%" height="15" fill="rgb(241,101,14)" fg:x="105" fg:w="1"/><text x="67.1290%" y="639.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.64%)</title><rect x="66.8790%" y="613" width="0.6369%" height="15" fill="rgb(238,103,29)" fg:x="105" fg:w="1"/><text x="67.1290%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.64%)</title><rect x="67.5159%" y="725" width="0.6369%" height="15" fill="rgb(233,195,47)" fg:x="106" fg:w="1"/><text x="67.7659%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.64%)</title><rect x="67.5159%" y="709" width="0.6369%" height="15" fill="rgb(246,218,30)" fg:x="106" fg:w="1"/><text x="67.7659%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.64%)</title><rect x="67.5159%" y="693" width="0.6369%" height="15" fill="rgb(219,145,47)" fg:x="106" fg:w="1"/><text x="67.7659%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="67.5159%" y="677" width="0.6369%" height="15" fill="rgb(243,12,26)" fg:x="106" fg:w="1"/><text x="67.7659%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.64%)</title><rect x="67.5159%" y="661" width="0.6369%" height="15" fill="rgb(214,87,16)" fg:x="106" fg:w="1"/><text x="67.7659%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.64%)</title><rect x="67.5159%" y="645" width="0.6369%" height="15" fill="rgb(208,99,42)" fg:x="106" fg:w="1"/><text x="67.7659%" y="655.50"></text></g><g><title>mi_free (1 samples, 0.64%)</title><rect x="67.5159%" y="629" width="0.6369%" height="15" fill="rgb(253,99,2)" fg:x="106" fg:w="1"/><text x="67.7659%" y="639.50"></text></g><g><title>_mi_thread_id (1 samples, 0.64%)</title><rect x="67.5159%" y="613" width="0.6369%" height="15" fill="rgb(220,168,23)" fg:x="106" fg:w="1"/><text x="67.7659%" y="623.50"></text></g><g><title>mi_tls_slot (1 samples, 0.64%)</title><rect x="67.5159%" y="597" width="0.6369%" height="15" fill="rgb(242,38,24)" fg:x="106" fg:w="1"/><text x="67.7659%" y="607.50"></text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Demo&gt;::update_string_table_msg (4 samples, 2.55%)</title><rect x="66.2420%" y="741" width="2.5478%" height="15" fill="rgb(225,182,9)" fg:x="104" fg:w="4"/><text x="66.4920%" y="751.50">de..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_string (1 samples, 0.64%)</title><rect x="68.1529%" y="725" width="0.6369%" height="15" fill="rgb(243,178,37)" fg:x="107" fg:w="1"/><text x="68.4029%" y="735.50"></text></g><g><title>alloc::string::String::from_utf8 (1 samples, 0.64%)</title><rect x="68.1529%" y="709" width="0.6369%" height="15" fill="rgb(232,139,19)" fg:x="107" fg:w="1"/><text x="68.4029%" y="719.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.64%)</title><rect x="68.1529%" y="693" width="0.6369%" height="15" fill="rgb(225,201,24)" fg:x="107" fg:w="1"/><text x="68.4029%" y="703.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.64%)</title><rect x="68.1529%" y="677" width="0.6369%" height="15" fill="rgb(221,47,46)" fg:x="107" fg:w="1"/><text x="68.4029%" y="687.50"></text></g><g><title>demoparser::parsing::tick_cache::TickCache::insert_tick (1 samples, 0.64%)</title><rect x="68.7898%" y="741" width="0.6369%" height="15" fill="rgb(249,23,13)" fg:x="108" fg:w="1"/><text x="69.0398%" y="751.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::check_eof (2 samples, 1.27%)</title><rect x="69.4268%" y="725" width="1.2739%" height="15" fill="rgb(219,9,5)" fg:x="109" fg:w="2"/><text x="69.6768%" y="735.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::eof (2 samples, 1.27%)</title><rect x="69.4268%" y="709" width="1.2739%" height="15" fill="rgb(254,171,16)" fg:x="109" fg:w="2"/><text x="69.6768%" y="719.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::eof (2 samples, 1.27%)</title><rect x="69.4268%" y="693" width="1.2739%" height="15" fill="rgb(230,171,20)" fg:x="109" fg:w="2"/><text x="69.6768%" y="703.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::fill_buf (2 samples, 1.27%)</title><rect x="69.4268%" y="677" width="1.2739%" height="15" fill="rgb(210,71,41)" fg:x="109" fg:w="2"/><text x="69.6768%" y="687.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::fill_buf_slow (1 samples, 0.64%)</title><rect x="70.0637%" y="661" width="0.6369%" height="15" fill="rgb(206,173,20)" fg:x="110" fg:w="1"/><text x="70.3137%" y="671.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::from_bytes (1 samples, 0.64%)</title><rect x="70.7006%" y="725" width="0.6369%" height="15" fill="rgb(233,88,34)" fg:x="111" fg:w="1"/><text x="70.9506%" y="735.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 1.27%)</title><rect x="71.3376%" y="693" width="1.2739%" height="15" fill="rgb(223,209,46)" fg:x="112" fg:w="2"/><text x="71.5876%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.64%)</title><rect x="73.2484%" y="565" width="0.6369%" height="15" fill="rgb(250,43,18)" fg:x="115" fg:w="1"/><text x="73.4984%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (2 samples, 1.27%)</title><rect x="73.2484%" y="629" width="1.2739%" height="15" fill="rgb(208,13,10)" fg:x="115" fg:w="2"/><text x="73.4984%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (2 samples, 1.27%)</title><rect x="73.2484%" y="613" width="1.2739%" height="15" fill="rgb(212,200,36)" fg:x="115" fg:w="2"/><text x="73.4984%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (2 samples, 1.27%)</title><rect x="73.2484%" y="597" width="1.2739%" height="15" fill="rgb(225,90,30)" fg:x="115" fg:w="2"/><text x="73.4984%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (2 samples, 1.27%)</title><rect x="73.2484%" y="581" width="1.2739%" height="15" fill="rgb(236,182,39)" fg:x="115" fg:w="2"/><text x="73.4984%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.64%)</title><rect x="73.8854%" y="565" width="0.6369%" height="15" fill="rgb(212,144,35)" fg:x="116" fg:w="1"/><text x="74.1354%" y="575.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.64%)</title><rect x="73.8854%" y="549" width="0.6369%" height="15" fill="rgb(228,63,44)" fg:x="116" fg:w="1"/><text x="74.1354%" y="559.50"></text></g><g><title>mi_find_page (1 samples, 0.64%)</title><rect x="73.8854%" y="533" width="0.6369%" height="15" fill="rgb(228,109,6)" fg:x="116" fg:w="1"/><text x="74.1354%" y="543.50"></text></g><g><title>mi_find_free_page (1 samples, 0.64%)</title><rect x="73.8854%" y="517" width="0.6369%" height="15" fill="rgb(238,117,24)" fg:x="116" fg:w="1"/><text x="74.1354%" y="527.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 0.64%)</title><rect x="73.8854%" y="501" width="0.6369%" height="15" fill="rgb(242,26,26)" fg:x="116" fg:w="1"/><text x="74.1354%" y="511.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.64%)</title><rect x="73.8854%" y="485" width="0.6369%" height="15" fill="rgb(221,92,48)" fg:x="116" fg:w="1"/><text x="74.1354%" y="495.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.64%)</title><rect x="73.8854%" y="469" width="0.6369%" height="15" fill="rgb(209,209,32)" fg:x="116" fg:w="1"/><text x="74.1354%" y="479.50"></text></g><g><title>mi_page_free_list_extend (1 samples, 0.64%)</title><rect x="73.8854%" y="453" width="0.6369%" height="15" fill="rgb(221,70,22)" fg:x="116" fg:w="1"/><text x="74.1354%" y="463.50"></text></g><g><title>mi_block_set_next (1 samples, 0.64%)</title><rect x="73.8854%" y="437" width="0.6369%" height="15" fill="rgb(248,145,5)" fg:x="116" fg:w="1"/><text x="74.1354%" y="447.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.64%)</title><rect x="73.8854%" y="421" width="0.6369%" height="15" fill="rgb(226,116,26)" fg:x="116" fg:w="1"/><text x="74.1354%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="73.8854%" y="405" width="0.6369%" height="15" fill="rgb(244,5,17)" fg:x="116" fg:w="1"/><text x="74.1354%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="73.8854%" y="389" width="0.6369%" height="15" fill="rgb(252,159,33)" fg:x="116" fg:w="1"/><text x="74.1354%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="73.8854%" y="373" width="0.6369%" height="15" fill="rgb(206,71,0)" fg:x="116" fg:w="1"/><text x="74.1354%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="73.8854%" y="357" width="0.6369%" height="15" fill="rgb(233,118,54)" fg:x="116" fg:w="1"/><text x="74.1354%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="73.8854%" y="341" width="0.6369%" height="15" fill="rgb(234,83,48)" fg:x="116" fg:w="1"/><text x="74.1354%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="73.8854%" y="325" width="0.6369%" height="15" fill="rgb(228,3,54)" fg:x="116" fg:w="1"/><text x="74.1354%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="73.8854%" y="309" width="0.6369%" height="15" fill="rgb(226,155,13)" fg:x="116" fg:w="1"/><text x="74.1354%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="73.8854%" y="293" width="0.6369%" height="15" fill="rgb(241,28,37)" fg:x="116" fg:w="1"/><text x="74.1354%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="73.8854%" y="277" width="0.6369%" height="15" fill="rgb(233,93,10)" fg:x="116" fg:w="1"/><text x="74.1354%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="73.8854%" y="261" width="0.6369%" height="15" fill="rgb(225,113,19)" fg:x="116" fg:w="1"/><text x="74.1354%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="73.8854%" y="245" width="0.6369%" height="15" fill="rgb(241,2,18)" fg:x="116" fg:w="1"/><text x="74.1354%" y="255.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (5 samples, 3.18%)</title><rect x="72.6115%" y="693" width="3.1847%" height="15" fill="rgb(228,207,21)" fg:x="114" fg:w="5"/><text x="72.8615%" y="703.50">pro..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (4 samples, 2.55%)</title><rect x="73.2484%" y="677" width="2.5478%" height="15" fill="rgb(213,211,35)" fg:x="115" fg:w="4"/><text x="73.4984%" y="687.50">pr..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (4 samples, 2.55%)</title><rect x="73.2484%" y="661" width="2.5478%" height="15" fill="rgb(209,83,10)" fg:x="115" fg:w="4"/><text x="73.4984%" y="671.50">pr..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (4 samples, 2.55%)</title><rect x="73.2484%" y="645" width="2.5478%" height="15" fill="rgb(209,164,1)" fg:x="115" fg:w="4"/><text x="73.4984%" y="655.50">pr..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (2 samples, 1.27%)</title><rect x="74.5223%" y="629" width="1.2739%" height="15" fill="rgb(213,184,43)" fg:x="117" fg:w="2"/><text x="74.7723%" y="639.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (2 samples, 1.27%)</title><rect x="74.5223%" y="613" width="1.2739%" height="15" fill="rgb(231,61,34)" fg:x="117" fg:w="2"/><text x="74.7723%" y="623.50"></text></g><g><title>protobuf::misc::maybe_uninit_write_slice (2 samples, 1.27%)</title><rect x="74.5223%" y="597" width="1.2739%" height="15" fill="rgb(235,75,3)" fg:x="117" fg:w="2"/><text x="74.7723%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 1.27%)</title><rect x="74.5223%" y="581" width="1.2739%" height="15" fill="rgb(220,106,47)" fg:x="117" fg:w="2"/><text x="74.7723%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 1.27%)</title><rect x="74.5223%" y="565" width="1.2739%" height="15" fill="rgb(210,196,33)" fg:x="117" fg:w="2"/><text x="74.7723%" y="575.50"></text></g><g><title>[libc.so.6] (2 samples, 1.27%)</title><rect x="74.5223%" y="549" width="1.2739%" height="15" fill="rgb(229,154,42)" fg:x="117" fg:w="2"/><text x="74.7723%" y="559.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_EntityMsg as protobuf::message::Message&gt;::merge_from (9 samples, 5.73%)</title><rect x="71.3376%" y="709" width="5.7325%" height="15" fill="rgb(228,114,26)" fg:x="112" fg:w="9"/><text x="71.5876%" y="719.50">&lt;csgopr..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (2 samples, 1.27%)</title><rect x="75.7962%" y="693" width="1.2739%" height="15" fill="rgb(208,144,1)" fg:x="119" fg:w="2"/><text x="76.0462%" y="703.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.64%)</title><rect x="77.7070%" y="693" width="0.6369%" height="15" fill="rgb(239,112,37)" fg:x="122" fg:w="1"/><text x="77.9570%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.64%)</title><rect x="78.3439%" y="677" width="0.6369%" height="15" fill="rgb(210,96,50)" fg:x="123" fg:w="1"/><text x="78.5939%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.64%)</title><rect x="78.3439%" y="661" width="0.6369%" height="15" fill="rgb(222,178,2)" fg:x="123" fg:w="1"/><text x="78.5939%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.64%)</title><rect x="78.3439%" y="645" width="0.6369%" height="15" fill="rgb(226,74,18)" fg:x="123" fg:w="1"/><text x="78.5939%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.64%)</title><rect x="78.3439%" y="629" width="0.6369%" height="15" fill="rgb(225,67,54)" fg:x="123" fg:w="1"/><text x="78.5939%" y="639.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.64%)</title><rect x="78.3439%" y="613" width="0.6369%" height="15" fill="rgb(251,92,32)" fg:x="123" fg:w="1"/><text x="78.5939%" y="623.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.64%)</title><rect x="78.3439%" y="597" width="0.6369%" height="15" fill="rgb(228,149,22)" fg:x="123" fg:w="1"/><text x="78.5939%" y="607.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.64%)</title><rect x="78.3439%" y="581" width="0.6369%" height="15" fill="rgb(243,54,13)" fg:x="123" fg:w="1"/><text x="78.5939%" y="591.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.64%)</title><rect x="78.3439%" y="565" width="0.6369%" height="15" fill="rgb(243,180,28)" fg:x="123" fg:w="1"/><text x="78.5939%" y="575.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.64%)</title><rect x="78.3439%" y="549" width="0.6369%" height="15" fill="rgb(208,167,24)" fg:x="123" fg:w="1"/><text x="78.5939%" y="559.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.64%)</title><rect x="78.3439%" y="533" width="0.6369%" height="15" fill="rgb(245,73,45)" fg:x="123" fg:w="1"/><text x="78.5939%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 1.91%)</title><rect x="78.3439%" y="693" width="1.9108%" height="15" fill="rgb(237,203,48)" fg:x="123" fg:w="3"/><text x="78.5939%" y="703.50">a..</text></g><g><title>core::ptr::write (2 samples, 1.27%)</title><rect x="78.9809%" y="677" width="1.2739%" height="15" fill="rgb(211,197,16)" fg:x="124" fg:w="2"/><text x="79.2309%" y="687.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (4 samples, 2.55%)</title><rect x="80.2548%" y="693" width="2.5478%" height="15" fill="rgb(243,99,51)" fg:x="126" fg:w="4"/><text x="80.5048%" y="703.50">pr..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (2 samples, 1.27%)</title><rect x="81.5287%" y="677" width="1.2739%" height="15" fill="rgb(215,123,29)" fg:x="128" fg:w="2"/><text x="81.7787%" y="687.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_game_event::Key_t as protobuf::message::Message&gt;::merge_from (2 samples, 1.27%)</title><rect x="81.5287%" y="661" width="1.2739%" height="15" fill="rgb(239,186,37)" fg:x="128" fg:w="2"/><text x="81.7787%" y="671.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.64%)</title><rect x="82.1656%" y="645" width="0.6369%" height="15" fill="rgb(252,136,39)" fg:x="129" fg:w="1"/><text x="82.4156%" y="655.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_GameEvent as protobuf::message::Message&gt;::merge_from (10 samples, 6.37%)</title><rect x="77.0701%" y="709" width="6.3694%" height="15" fill="rgb(223,213,32)" fg:x="121" fg:w="10"/><text x="77.3201%" y="719.50">&lt;csgopro..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (1 samples, 0.64%)</title><rect x="82.8025%" y="693" width="0.6369%" height="15" fill="rgb(233,115,5)" fg:x="130" fg:w="1"/><text x="83.0525%" y="703.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (1 samples, 0.64%)</title><rect x="82.8025%" y="677" width="0.6369%" height="15" fill="rgb(207,226,44)" fg:x="130" fg:w="1"/><text x="83.0525%" y="687.50"></text></g><g><title>protobuf::varint::decode::decode_varint32 (1 samples, 0.64%)</title><rect x="82.8025%" y="661" width="0.6369%" height="15" fill="rgb(208,126,0)" fg:x="130" fg:w="1"/><text x="83.0525%" y="671.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (1 samples, 0.64%)</title><rect x="82.8025%" y="645" width="0.6369%" height="15" fill="rgb(244,66,21)" fg:x="130" fg:w="1"/><text x="83.0525%" y="655.50"></text></g><g><title>&lt;u32 as protobuf::varint::decode::DecodeVarint&gt;::from_u64 (1 samples, 0.64%)</title><rect x="82.8025%" y="629" width="0.6369%" height="15" fill="rgb(222,97,12)" fg:x="130" fg:w="1"/><text x="83.0525%" y="639.50"></text></g><g><title>demoparser::parsing::parser::Demo::parse_cmd (116 samples, 73.89%)</title><rect x="10.8280%" y="773" width="73.8854%" height="15" fill="rgb(219,213,19)" fg:x="17" fg:w="116"/><text x="11.0780%" y="783.50">demoparser::parsing::parser::Demo::parse_cmd</text></g><g><title>demoparser::parsing::parser::Demo::parse_packet (96 samples, 61.15%)</title><rect x="23.5669%" y="757" width="61.1465%" height="15" fill="rgb(252,169,30)" fg:x="37" fg:w="96"/><text x="23.8169%" y="767.50">demoparser::parsing::parser::Demo::parse_packet</text></g><g><title>protobuf::message::Message::parse_from_bytes (24 samples, 15.29%)</title><rect x="69.4268%" y="741" width="15.2866%" height="15" fill="rgb(206,32,51)" fg:x="109" fg:w="24"/><text x="69.6768%" y="751.50">protobuf::message::Mess..</text></g><g><title>protobuf::message::Message::parse_from (21 samples, 13.38%)</title><rect x="71.3376%" y="725" width="13.3758%" height="15" fill="rgb(250,172,42)" fg:x="112" fg:w="21"/><text x="71.5876%" y="735.50">protobuf::message::M..</text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_PacketEntities as protobuf::message::Message&gt;::merge_from (2 samples, 1.27%)</title><rect x="83.4395%" y="709" width="1.2739%" height="15" fill="rgb(209,34,43)" fg:x="131" fg:w="2"/><text x="83.6895%" y="719.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (2 samples, 1.27%)</title><rect x="83.4395%" y="693" width="1.2739%" height="15" fill="rgb(223,11,35)" fg:x="131" fg:w="2"/><text x="83.6895%" y="703.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (2 samples, 1.27%)</title><rect x="83.4395%" y="677" width="1.2739%" height="15" fill="rgb(251,219,26)" fg:x="131" fg:w="2"/><text x="83.6895%" y="687.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (2 samples, 1.27%)</title><rect x="83.4395%" y="661" width="1.2739%" height="15" fill="rgb(231,119,3)" fg:x="131" fg:w="2"/><text x="83.6895%" y="671.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (2 samples, 1.27%)</title><rect x="83.4395%" y="645" width="1.2739%" height="15" fill="rgb(216,97,11)" fg:x="131" fg:w="2"/><text x="83.6895%" y="655.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (2 samples, 1.27%)</title><rect x="83.4395%" y="629" width="1.2739%" height="15" fill="rgb(223,59,9)" fg:x="131" fg:w="2"/><text x="83.6895%" y="639.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (2 samples, 1.27%)</title><rect x="83.4395%" y="613" width="1.2739%" height="15" fill="rgb(233,93,31)" fg:x="131" fg:w="2"/><text x="83.6895%" y="623.50"></text></g><g><title>protobuf::misc::maybe_uninit_write_slice (2 samples, 1.27%)</title><rect x="83.4395%" y="597" width="1.2739%" height="15" fill="rgb(239,81,33)" fg:x="131" fg:w="2"/><text x="83.6895%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 1.27%)</title><rect x="83.4395%" y="581" width="1.2739%" height="15" fill="rgb(213,120,34)" fg:x="131" fg:w="2"/><text x="83.6895%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 1.27%)</title><rect x="83.4395%" y="565" width="1.2739%" height="15" fill="rgb(243,49,53)" fg:x="131" fg:w="2"/><text x="83.6895%" y="575.50"></text></g><g><title>[libc.so.6] (2 samples, 1.27%)</title><rect x="83.4395%" y="549" width="1.2739%" height="15" fill="rgb(247,216,33)" fg:x="131" fg:w="2"/><text x="83.6895%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="84.0764%" y="533" width="0.6369%" height="15" fill="rgb(226,26,14)" fg:x="132" fg:w="1"/><text x="84.3264%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="84.0764%" y="517" width="0.6369%" height="15" fill="rgb(215,49,53)" fg:x="132" fg:w="1"/><text x="84.3264%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="84.0764%" y="501" width="0.6369%" height="15" fill="rgb(245,162,40)" fg:x="132" fg:w="1"/><text x="84.3264%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="84.0764%" y="485" width="0.6369%" height="15" fill="rgb(229,68,17)" fg:x="132" fg:w="1"/><text x="84.3264%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="84.0764%" y="469" width="0.6369%" height="15" fill="rgb(213,182,10)" fg:x="132" fg:w="1"/><text x="84.3264%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="84.0764%" y="453" width="0.6369%" height="15" fill="rgb(245,125,30)" fg:x="132" fg:w="1"/><text x="84.3264%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="84.0764%" y="437" width="0.6369%" height="15" fill="rgb(232,202,2)" fg:x="132" fg:w="1"/><text x="84.3264%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="84.0764%" y="421" width="0.6369%" height="15" fill="rgb(237,140,51)" fg:x="132" fg:w="1"/><text x="84.3264%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="84.0764%" y="405" width="0.6369%" height="15" fill="rgb(236,157,25)" fg:x="132" fg:w="1"/><text x="84.3264%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="84.0764%" y="389" width="0.6369%" height="15" fill="rgb(219,209,0)" fg:x="132" fg:w="1"/><text x="84.3264%" y="399.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_frame (4 samples, 2.55%)</title><rect x="84.7134%" y="773" width="2.5478%" height="15" fill="rgb(240,116,54)" fg:x="133" fg:w="4"/><text x="84.9634%" y="783.50">de..</text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_byte (4 samples, 2.55%)</title><rect x="84.7134%" y="757" width="2.5478%" height="15" fill="rgb(216,10,36)" fg:x="133" fg:w="4"/><text x="84.9634%" y="767.50">de..</text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="86.6242%" y="741" width="0.6369%" height="15" fill="rgb(222,72,44)" fg:x="136" fg:w="1"/><text x="86.8742%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="86.6242%" y="725" width="0.6369%" height="15" fill="rgb(232,159,9)" fg:x="136" fg:w="1"/><text x="86.8742%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="86.6242%" y="709" width="0.6369%" height="15" fill="rgb(210,39,32)" fg:x="136" fg:w="1"/><text x="86.8742%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="86.6242%" y="693" width="0.6369%" height="15" fill="rgb(216,194,45)" fg:x="136" fg:w="1"/><text x="86.8742%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="86.6242%" y="677" width="0.6369%" height="15" fill="rgb(218,18,35)" fg:x="136" fg:w="1"/><text x="86.8742%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="86.6242%" y="661" width="0.6369%" height="15" fill="rgb(207,83,51)" fg:x="136" fg:w="1"/><text x="86.8742%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="86.6242%" y="645" width="0.6369%" height="15" fill="rgb(225,63,43)" fg:x="136" fg:w="1"/><text x="86.8742%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="86.6242%" y="629" width="0.6369%" height="15" fill="rgb(207,57,36)" fg:x="136" fg:w="1"/><text x="86.8742%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="86.6242%" y="613" width="0.6369%" height="15" fill="rgb(216,99,33)" fg:x="136" fg:w="1"/><text x="86.8742%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="86.6242%" y="597" width="0.6369%" height="15" fill="rgb(225,42,16)" fg:x="136" fg:w="1"/><text x="86.8742%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="86.6242%" y="581" width="0.6369%" height="15" fill="rgb(220,201,45)" fg:x="136" fg:w="1"/><text x="86.8742%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 3.18%)</title><rect x="87.8981%" y="741" width="3.1847%" height="15" fill="rgb(225,33,4)" fg:x="138" fg:w="5"/><text x="88.1481%" y="751.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 3.18%)</title><rect x="87.8981%" y="725" width="3.1847%" height="15" fill="rgb(224,33,50)" fg:x="138" fg:w="5"/><text x="88.1481%" y="735.50">all..</text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 3.18%)</title><rect x="87.8981%" y="709" width="3.1847%" height="15" fill="rgb(246,198,51)" fg:x="138" fg:w="5"/><text x="88.1481%" y="719.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5 samples, 3.18%)</title><rect x="87.8981%" y="693" width="3.1847%" height="15" fill="rgb(205,22,4)" fg:x="138" fg:w="5"/><text x="88.1481%" y="703.50">&lt;al..</text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 3.18%)</title><rect x="87.8981%" y="677" width="3.1847%" height="15" fill="rgb(206,3,8)" fg:x="138" fg:w="5"/><text x="88.1481%" y="687.50">all..</text></g><g><title>alloc::alloc::realloc (5 samples, 3.18%)</title><rect x="87.8981%" y="661" width="3.1847%" height="15" fill="rgb(251,23,15)" fg:x="138" fg:w="5"/><text x="88.1481%" y="671.50">all..</text></g><g><title>_mi_heap_realloc_zero (5 samples, 3.18%)</title><rect x="87.8981%" y="645" width="3.1847%" height="15" fill="rgb(252,88,28)" fg:x="138" fg:w="5"/><text x="88.1481%" y="655.50">_mi..</text></g><g><title>_mi_memcpy_aligned (5 samples, 3.18%)</title><rect x="87.8981%" y="629" width="3.1847%" height="15" fill="rgb(212,127,14)" fg:x="138" fg:w="5"/><text x="88.1481%" y="639.50">_mi..</text></g><g><title>_mi_memcpy (5 samples, 3.18%)</title><rect x="87.8981%" y="613" width="3.1847%" height="15" fill="rgb(247,145,37)" fg:x="138" fg:w="5"/><text x="88.1481%" y="623.50">_mi..</text></g><g><title>memcpy (5 samples, 3.18%)</title><rect x="87.8981%" y="597" width="3.1847%" height="15" fill="rgb(209,117,53)" fg:x="138" fg:w="5"/><text x="88.1481%" y="607.50">mem..</text></g><g><title>[libc.so.6] (5 samples, 3.18%)</title><rect x="87.8981%" y="581" width="3.1847%" height="15" fill="rgb(212,90,42)" fg:x="138" fg:w="5"/><text x="88.1481%" y="591.50">[li..</text></g><g><title>[unknown] (4 samples, 2.55%)</title><rect x="88.5350%" y="565" width="2.5478%" height="15" fill="rgb(218,164,37)" fg:x="139" fg:w="4"/><text x="88.7850%" y="575.50">[u..</text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="89.8089%" y="549" width="1.2739%" height="15" fill="rgb(246,65,34)" fg:x="141" fg:w="2"/><text x="90.0589%" y="559.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="89.8089%" y="533" width="1.2739%" height="15" fill="rgb(231,100,33)" fg:x="141" fg:w="2"/><text x="90.0589%" y="543.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="89.8089%" y="517" width="1.2739%" height="15" fill="rgb(228,126,14)" fg:x="141" fg:w="2"/><text x="90.0589%" y="527.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="89.8089%" y="501" width="1.2739%" height="15" fill="rgb(215,173,21)" fg:x="141" fg:w="2"/><text x="90.0589%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="90.4459%" y="485" width="0.6369%" height="15" fill="rgb(210,6,40)" fg:x="142" fg:w="1"/><text x="90.6959%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="90.4459%" y="469" width="0.6369%" height="15" fill="rgb(212,48,18)" fg:x="142" fg:w="1"/><text x="90.6959%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="90.4459%" y="453" width="0.6369%" height="15" fill="rgb(230,214,11)" fg:x="142" fg:w="1"/><text x="90.6959%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="90.4459%" y="437" width="0.6369%" height="15" fill="rgb(254,105,39)" fg:x="142" fg:w="1"/><text x="90.6959%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="90.4459%" y="421" width="0.6369%" height="15" fill="rgb(245,158,5)" fg:x="142" fg:w="1"/><text x="90.6959%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="90.4459%" y="405" width="0.6369%" height="15" fill="rgb(249,208,11)" fg:x="142" fg:w="1"/><text x="90.6959%" y="415.50"></text></g><g><title>demoparser::parsing::parser::Demo::start_parsing (129 samples, 82.17%)</title><rect x="10.8280%" y="789" width="82.1656%" height="15" fill="rgb(210,39,28)" fg:x="17" fg:w="129"/><text x="11.0780%" y="799.50">demoparser::parsing::parser::Demo::start_parsing</text></g><g><title>demoparser::parsing::tick_cache::TickCache::new (9 samples, 5.73%)</title><rect x="87.2611%" y="773" width="5.7325%" height="15" fill="rgb(211,56,53)" fg:x="137" fg:w="9"/><text x="87.5111%" y="783.50">demopar..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 5.73%)</title><rect x="87.2611%" y="757" width="5.7325%" height="15" fill="rgb(226,201,30)" fg:x="137" fg:w="9"/><text x="87.5111%" y="767.50">alloc::..</text></g><g><title>core::ptr::write (3 samples, 1.91%)</title><rect x="91.0828%" y="741" width="1.9108%" height="15" fill="rgb(239,101,34)" fg:x="143" fg:w="3"/><text x="91.3328%" y="751.50">c..</text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="91.7197%" y="725" width="1.2739%" height="15" fill="rgb(226,209,5)" fg:x="144" fg:w="2"/><text x="91.9697%" y="735.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="91.7197%" y="709" width="1.2739%" height="15" fill="rgb(250,105,47)" fg:x="144" fg:w="2"/><text x="91.9697%" y="719.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="91.7197%" y="693" width="1.2739%" height="15" fill="rgb(230,72,3)" fg:x="144" fg:w="2"/><text x="91.9697%" y="703.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="91.7197%" y="677" width="1.2739%" height="15" fill="rgb(232,218,39)" fg:x="144" fg:w="2"/><text x="91.9697%" y="687.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="91.7197%" y="661" width="1.2739%" height="15" fill="rgb(248,166,6)" fg:x="144" fg:w="2"/><text x="91.9697%" y="671.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="91.7197%" y="645" width="1.2739%" height="15" fill="rgb(247,89,20)" fg:x="144" fg:w="2"/><text x="91.9697%" y="655.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="91.7197%" y="629" width="1.2739%" height="15" fill="rgb(248,130,54)" fg:x="144" fg:w="2"/><text x="91.9697%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="92.3567%" y="613" width="0.6369%" height="15" fill="rgb(234,196,4)" fg:x="145" fg:w="1"/><text x="92.6067%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="92.3567%" y="597" width="0.6369%" height="15" fill="rgb(250,143,31)" fg:x="145" fg:w="1"/><text x="92.6067%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="92.3567%" y="581" width="0.6369%" height="15" fill="rgb(211,110,34)" fg:x="145" fg:w="1"/><text x="92.6067%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="92.3567%" y="565" width="0.6369%" height="15" fill="rgb(215,124,48)" fg:x="145" fg:w="1"/><text x="92.6067%" y="575.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.64%)</title><rect x="92.9936%" y="645" width="0.6369%" height="15" fill="rgb(216,46,13)" fg:x="146" fg:w="1"/><text x="93.2436%" y="655.50"></text></g><g><title>_mi_memcpy (1 samples, 0.64%)</title><rect x="92.9936%" y="629" width="0.6369%" height="15" fill="rgb(205,184,25)" fg:x="146" fg:w="1"/><text x="93.2436%" y="639.50"></text></g><g><title>memcpy (1 samples, 0.64%)</title><rect x="92.9936%" y="613" width="0.6369%" height="15" fill="rgb(228,1,10)" fg:x="146" fg:w="1"/><text x="93.2436%" y="623.50"></text></g><g><title>[libc.so.6] (1 samples, 0.64%)</title><rect x="92.9936%" y="597" width="0.6369%" height="15" fill="rgb(213,116,27)" fg:x="146" fg:w="1"/><text x="93.2436%" y="607.50"></text></g><g><title>demoparser::parsing::tick_cache::TickCache::parse_packet_ents_simple (2 samples, 1.27%)</title><rect x="92.9936%" y="789" width="1.2739%" height="15" fill="rgb(241,95,50)" fg:x="146" fg:w="2"/><text x="93.2436%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 1.27%)</title><rect x="92.9936%" y="773" width="1.2739%" height="15" fill="rgb(238,48,32)" fg:x="146" fg:w="2"/><text x="93.2436%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 1.27%)</title><rect x="92.9936%" y="757" width="1.2739%" height="15" fill="rgb(235,113,49)" fg:x="146" fg:w="2"/><text x="93.2436%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 1.27%)</title><rect x="92.9936%" y="741" width="1.2739%" height="15" fill="rgb(205,127,43)" fg:x="146" fg:w="2"/><text x="93.2436%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 1.27%)</title><rect x="92.9936%" y="725" width="1.2739%" height="15" fill="rgb(250,162,2)" fg:x="146" fg:w="2"/><text x="93.2436%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 1.27%)</title><rect x="92.9936%" y="709" width="1.2739%" height="15" fill="rgb(220,13,41)" fg:x="146" fg:w="2"/><text x="93.2436%" y="719.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 1.27%)</title><rect x="92.9936%" y="693" width="1.2739%" height="15" fill="rgb(249,221,25)" fg:x="146" fg:w="2"/><text x="93.2436%" y="703.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 1.27%)</title><rect x="92.9936%" y="677" width="1.2739%" height="15" fill="rgb(215,208,19)" fg:x="146" fg:w="2"/><text x="93.2436%" y="687.50"></text></g><g><title>_mi_heap_realloc_zero (2 samples, 1.27%)</title><rect x="92.9936%" y="661" width="1.2739%" height="15" fill="rgb(236,175,2)" fg:x="146" fg:w="2"/><text x="93.2436%" y="671.50"></text></g><g><title>mi_free (1 samples, 0.64%)</title><rect x="93.6306%" y="645" width="0.6369%" height="15" fill="rgb(241,52,2)" fg:x="147" fg:w="1"/><text x="93.8806%" y="655.50"></text></g><g><title>core::fmt::Formatter::debug_struct (2 samples, 1.27%)</title><rect x="94.2675%" y="469" width="1.2739%" height="15" fill="rgb(248,140,14)" fg:x="148" fg:w="2"/><text x="94.5175%" y="479.50"></text></g><g><title>core::fmt::builders::debug_struct_new (2 samples, 1.27%)</title><rect x="94.2675%" y="453" width="1.2739%" height="15" fill="rgb(253,22,42)" fg:x="148" fg:w="2"/><text x="94.5175%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (2 samples, 1.27%)</title><rect x="94.2675%" y="437" width="1.2739%" height="15" fill="rgb(234,61,47)" fg:x="148" fg:w="2"/><text x="94.5175%" y="447.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 1.27%)</title><rect x="94.2675%" y="421" width="1.2739%" height="15" fill="rgb(208,226,15)" fg:x="148" fg:w="2"/><text x="94.5175%" y="431.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 1.27%)</title><rect x="94.2675%" y="405" width="1.2739%" height="15" fill="rgb(217,221,4)" fg:x="148" fg:w="2"/><text x="94.5175%" y="415.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 1.27%)</title><rect x="94.2675%" y="389" width="1.2739%" height="15" fill="rgb(212,174,34)" fg:x="148" fg:w="2"/><text x="94.5175%" y="399.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 1.27%)</title><rect x="94.2675%" y="373" width="1.2739%" height="15" fill="rgb(253,83,4)" fg:x="148" fg:w="2"/><text x="94.5175%" y="383.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 1.27%)</title><rect x="94.2675%" y="357" width="1.2739%" height="15" fill="rgb(250,195,49)" fg:x="148" fg:w="2"/><text x="94.5175%" y="367.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (2 samples, 1.27%)</title><rect x="94.2675%" y="341" width="1.2739%" height="15" fill="rgb(241,192,25)" fg:x="148" fg:w="2"/><text x="94.5175%" y="351.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (2 samples, 1.27%)</title><rect x="94.2675%" y="325" width="1.2739%" height="15" fill="rgb(208,124,10)" fg:x="148" fg:w="2"/><text x="94.5175%" y="335.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (2 samples, 1.27%)</title><rect x="94.2675%" y="309" width="1.2739%" height="15" fill="rgb(222,33,0)" fg:x="148" fg:w="2"/><text x="94.5175%" y="319.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (2 samples, 1.27%)</title><rect x="94.2675%" y="293" width="1.2739%" height="15" fill="rgb(234,209,28)" fg:x="148" fg:w="2"/><text x="94.5175%" y="303.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (2 samples, 1.27%)</title><rect x="94.2675%" y="277" width="1.2739%" height="15" fill="rgb(224,11,23)" fg:x="148" fg:w="2"/><text x="94.5175%" y="287.50"></text></g><g><title>__GI___libc_write (2 samples, 1.27%)</title><rect x="94.2675%" y="261" width="1.2739%" height="15" fill="rgb(232,99,1)" fg:x="148" fg:w="2"/><text x="94.5175%" y="271.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="94.2675%" y="245" width="1.2739%" height="15" fill="rgb(237,95,45)" fg:x="148" fg:w="2"/><text x="94.5175%" y="255.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="94.2675%" y="229" width="1.2739%" height="15" fill="rgb(208,109,11)" fg:x="148" fg:w="2"/><text x="94.5175%" y="239.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="94.2675%" y="213" width="1.2739%" height="15" fill="rgb(216,190,48)" fg:x="148" fg:w="2"/><text x="94.5175%" y="223.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="94.2675%" y="197" width="1.2739%" height="15" fill="rgb(251,171,36)" fg:x="148" fg:w="2"/><text x="94.5175%" y="207.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="94.2675%" y="181" width="1.2739%" height="15" fill="rgb(230,62,22)" fg:x="148" fg:w="2"/><text x="94.5175%" y="191.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="94.2675%" y="165" width="1.2739%" height="15" fill="rgb(225,114,35)" fg:x="148" fg:w="2"/><text x="94.5175%" y="175.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="94.2675%" y="149" width="1.2739%" height="15" fill="rgb(215,118,42)" fg:x="148" fg:w="2"/><text x="94.5175%" y="159.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="94.2675%" y="133" width="1.2739%" height="15" fill="rgb(243,119,21)" fg:x="148" fg:w="2"/><text x="94.5175%" y="143.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="94.2675%" y="117" width="1.2739%" height="15" fill="rgb(252,177,53)" fg:x="148" fg:w="2"/><text x="94.5175%" y="127.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="94.2675%" y="101" width="1.2739%" height="15" fill="rgb(237,209,29)" fg:x="148" fg:w="2"/><text x="94.5175%" y="111.50"></text></g><g><title>[unknown] (2 samples, 1.27%)</title><rect x="94.2675%" y="85" width="1.2739%" height="15" fill="rgb(212,65,23)" fg:x="148" fg:w="2"/><text x="94.5175%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="94.9045%" y="69" width="0.6369%" height="15" fill="rgb(230,222,46)" fg:x="149" fg:w="1"/><text x="95.1545%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="94.9045%" y="53" width="0.6369%" height="15" fill="rgb(215,135,32)" fg:x="149" fg:w="1"/><text x="95.1545%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="94.9045%" y="37" width="0.6369%" height="15" fill="rgb(246,101,22)" fg:x="149" fg:w="1"/><text x="95.1545%" y="47.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.64%)</title><rect x="95.5414%" y="469" width="0.6369%" height="15" fill="rgb(206,107,13)" fg:x="150" fg:w="1"/><text x="95.7914%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.64%)</title><rect x="95.5414%" y="453" width="0.6369%" height="15" fill="rgb(250,100,44)" fg:x="150" fg:w="1"/><text x="95.7914%" y="463.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.64%)</title><rect x="95.5414%" y="437" width="0.6369%" height="15" fill="rgb(231,147,38)" fg:x="150" fg:w="1"/><text x="95.7914%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.64%)</title><rect x="95.5414%" y="421" width="0.6369%" height="15" fill="rgb(229,8,40)" fg:x="150" fg:w="1"/><text x="95.7914%" y="431.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.64%)</title><rect x="95.5414%" y="405" width="0.6369%" height="15" fill="rgb(221,135,30)" fg:x="150" fg:w="1"/><text x="95.7914%" y="415.50"></text></g><g><title>demoparser (152 samples, 96.82%)</title><rect x="0.0000%" y="1077" width="96.8153%" height="15" fill="rgb(249,193,18)" fg:x="0" fg:w="152"/><text x="0.2500%" y="1087.50">demoparser</text></g><g><title>_start (146 samples, 92.99%)</title><rect x="3.8217%" y="1061" width="92.9936%" height="15" fill="rgb(209,133,39)" fg:x="6" fg:w="146"/><text x="4.0717%" y="1071.50">_start</text></g><g><title>__libc_start_main_impl (146 samples, 92.99%)</title><rect x="3.8217%" y="1045" width="92.9936%" height="15" fill="rgb(232,100,14)" fg:x="6" fg:w="146"/><text x="4.0717%" y="1055.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (146 samples, 92.99%)</title><rect x="3.8217%" y="1029" width="92.9936%" height="15" fill="rgb(224,185,1)" fg:x="6" fg:w="146"/><text x="4.0717%" y="1039.50">__libc_start_call_main</text></g><g><title>main (144 samples, 91.72%)</title><rect x="5.0955%" y="1013" width="91.7197%" height="15" fill="rgb(223,139,8)" fg:x="8" fg:w="144"/><text x="5.3455%" y="1023.50">main</text></g><g><title>std::rt::lang_start_internal (144 samples, 91.72%)</title><rect x="5.0955%" y="997" width="91.7197%" height="15" fill="rgb(232,213,38)" fg:x="8" fg:w="144"/><text x="5.3455%" y="1007.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (144 samples, 91.72%)</title><rect x="5.0955%" y="981" width="91.7197%" height="15" fill="rgb(207,94,22)" fg:x="8" fg:w="144"/><text x="5.3455%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (144 samples, 91.72%)</title><rect x="5.0955%" y="965" width="91.7197%" height="15" fill="rgb(219,183,54)" fg:x="8" fg:w="144"/><text x="5.3455%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (144 samples, 91.72%)</title><rect x="5.0955%" y="949" width="91.7197%" height="15" fill="rgb(216,185,54)" fg:x="8" fg:w="144"/><text x="5.3455%" y="959.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (144 samples, 91.72%)</title><rect x="5.0955%" y="933" width="91.7197%" height="15" fill="rgb(254,217,39)" fg:x="8" fg:w="144"/><text x="5.3455%" y="943.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (144 samples, 91.72%)</title><rect x="5.0955%" y="917" width="91.7197%" height="15" fill="rgb(240,178,23)" fg:x="8" fg:w="144"/><text x="5.3455%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (144 samples, 91.72%)</title><rect x="5.0955%" y="901" width="91.7197%" height="15" fill="rgb(218,11,47)" fg:x="8" fg:w="144"/><text x="5.3455%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (144 samples, 91.72%)</title><rect x="5.0955%" y="885" width="91.7197%" height="15" fill="rgb(218,51,51)" fg:x="8" fg:w="144"/><text x="5.3455%" y="895.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (144 samples, 91.72%)</title><rect x="5.0955%" y="869" width="91.7197%" height="15" fill="rgb(238,126,27)" fg:x="8" fg:w="144"/><text x="5.3455%" y="879.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (144 samples, 91.72%)</title><rect x="5.0955%" y="853" width="91.7197%" height="15" fill="rgb(249,202,22)" fg:x="8" fg:w="144"/><text x="5.3455%" y="863.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (144 samples, 91.72%)</title><rect x="5.0955%" y="837" width="91.7197%" height="15" fill="rgb(254,195,49)" fg:x="8" fg:w="144"/><text x="5.3455%" y="847.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (144 samples, 91.72%)</title><rect x="5.0955%" y="821" width="91.7197%" height="15" fill="rgb(208,123,14)" fg:x="8" fg:w="144"/><text x="5.3455%" y="831.50">core::ops::function::FnOnce::call_once</text></g><g><title>demoparser::main (144 samples, 91.72%)</title><rect x="5.0955%" y="805" width="91.7197%" height="15" fill="rgb(224,200,8)" fg:x="8" fg:w="144"/><text x="5.3455%" y="815.50">demoparser::main</text></g><g><title>std::io::stdio::_print (4 samples, 2.55%)</title><rect x="94.2675%" y="789" width="2.5478%" height="15" fill="rgb(217,61,36)" fg:x="148" fg:w="4"/><text x="94.5175%" y="799.50">st..</text></g><g><title>std::io::stdio::print_to (4 samples, 2.55%)</title><rect x="94.2675%" y="773" width="2.5478%" height="15" fill="rgb(206,35,45)" fg:x="148" fg:w="4"/><text x="94.5175%" y="783.50">st..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4 samples, 2.55%)</title><rect x="94.2675%" y="757" width="2.5478%" height="15" fill="rgb(217,65,33)" fg:x="148" fg:w="4"/><text x="94.5175%" y="767.50">&lt;s..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4 samples, 2.55%)</title><rect x="94.2675%" y="741" width="2.5478%" height="15" fill="rgb(222,158,48)" fg:x="148" fg:w="4"/><text x="94.5175%" y="751.50">&lt;&amp;..</text></g><g><title>std::io::Write::write_fmt (4 samples, 2.55%)</title><rect x="94.2675%" y="725" width="2.5478%" height="15" fill="rgb(254,2,54)" fg:x="148" fg:w="4"/><text x="94.5175%" y="735.50">st..</text></g><g><title>core::fmt::write (4 samples, 2.55%)</title><rect x="94.2675%" y="709" width="2.5478%" height="15" fill="rgb(250,143,38)" fg:x="148" fg:w="4"/><text x="94.5175%" y="719.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::fmt::Debug&gt;::fmt (4 samples, 2.55%)</title><rect x="94.2675%" y="693" width="2.5478%" height="15" fill="rgb(248,25,0)" fg:x="148" fg:w="4"/><text x="94.5175%" y="703.50">&lt;a..</text></g><g><title>&lt;[T] as core::fmt::Debug&gt;::fmt (4 samples, 2.55%)</title><rect x="94.2675%" y="677" width="2.5478%" height="15" fill="rgb(206,152,27)" fg:x="148" fg:w="4"/><text x="94.5175%" y="687.50">&lt;[..</text></g><g><title>core::fmt::builders::DebugList::entries (4 samples, 2.55%)</title><rect x="94.2675%" y="661" width="2.5478%" height="15" fill="rgb(240,77,30)" fg:x="148" fg:w="4"/><text x="94.5175%" y="671.50">co..</text></g><g><title>core::fmt::builders::DebugSet::entry (4 samples, 2.55%)</title><rect x="94.2675%" y="645" width="2.5478%" height="15" fill="rgb(231,5,3)" fg:x="148" fg:w="4"/><text x="94.5175%" y="655.50">co..</text></g><g><title>core::fmt::builders::DebugInner::entry (4 samples, 2.55%)</title><rect x="94.2675%" y="629" width="2.5478%" height="15" fill="rgb(207,226,32)" fg:x="148" fg:w="4"/><text x="94.5175%" y="639.50">co..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (4 samples, 2.55%)</title><rect x="94.2675%" y="613" width="2.5478%" height="15" fill="rgb(222,207,47)" fg:x="148" fg:w="4"/><text x="94.5175%" y="623.50">co..</text></g><g><title>core::fmt::builders::DebugInner::entry::{{closure}} (4 samples, 2.55%)</title><rect x="94.2675%" y="597" width="2.5478%" height="15" fill="rgb(229,115,45)" fg:x="148" fg:w="4"/><text x="94.5175%" y="607.50">co..</text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (4 samples, 2.55%)</title><rect x="94.2675%" y="581" width="2.5478%" height="15" fill="rgb(224,191,6)" fg:x="148" fg:w="4"/><text x="94.5175%" y="591.50">&lt;&amp;..</text></g><g><title>&lt;(U,T) as core::fmt::Debug&gt;::fmt (4 samples, 2.55%)</title><rect x="94.2675%" y="565" width="2.5478%" height="15" fill="rgb(230,227,24)" fg:x="148" fg:w="4"/><text x="94.5175%" y="575.50">&lt;(..</text></g><g><title>core::fmt::builders::DebugTuple::field (4 samples, 2.55%)</title><rect x="94.2675%" y="549" width="2.5478%" height="15" fill="rgb(228,80,19)" fg:x="148" fg:w="4"/><text x="94.5175%" y="559.50">co..</text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (4 samples, 2.55%)</title><rect x="94.2675%" y="533" width="2.5478%" height="15" fill="rgb(247,229,0)" fg:x="148" fg:w="4"/><text x="94.5175%" y="543.50">co..</text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (4 samples, 2.55%)</title><rect x="94.2675%" y="517" width="2.5478%" height="15" fill="rgb(237,194,15)" fg:x="148" fg:w="4"/><text x="94.5175%" y="527.50">co..</text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (4 samples, 2.55%)</title><rect x="94.2675%" y="501" width="2.5478%" height="15" fill="rgb(219,203,20)" fg:x="148" fg:w="4"/><text x="94.5175%" y="511.50">&lt;&amp;..</text></g><g><title>&lt;demoparser::parsing::entities::Entity as core::fmt::Debug&gt;::fmt (4 samples, 2.55%)</title><rect x="94.2675%" y="485" width="2.5478%" height="15" fill="rgb(234,128,8)" fg:x="148" fg:w="4"/><text x="94.5175%" y="495.50">&lt;d..</text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.64%)</title><rect x="96.1783%" y="469" width="0.6369%" height="15" fill="rgb(248,202,8)" fg:x="151" fg:w="1"/><text x="96.4283%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.64%)</title><rect x="96.1783%" y="453" width="0.6369%" height="15" fill="rgb(206,104,37)" fg:x="151" fg:w="1"/><text x="96.4283%" y="463.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish::{{closure}} (1 samples, 0.64%)</title><rect x="96.1783%" y="437" width="0.6369%" height="15" fill="rgb(223,8,27)" fg:x="151" fg:w="1"/><text x="96.4283%" y="447.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.64%)</title><rect x="96.1783%" y="421" width="0.6369%" height="15" fill="rgb(216,217,28)" fg:x="151" fg:w="1"/><text x="96.4283%" y="431.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.64%)</title><rect x="96.1783%" y="405" width="0.6369%" height="15" fill="rgb(249,199,1)" fg:x="151" fg:w="1"/><text x="96.4283%" y="415.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.64%)</title><rect x="96.1783%" y="389" width="0.6369%" height="15" fill="rgb(240,85,17)" fg:x="151" fg:w="1"/><text x="96.4283%" y="399.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.64%)</title><rect x="96.1783%" y="373" width="0.6369%" height="15" fill="rgb(206,108,45)" fg:x="151" fg:w="1"/><text x="96.4283%" y="383.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.64%)</title><rect x="96.1783%" y="357" width="0.6369%" height="15" fill="rgb(245,210,41)" fg:x="151" fg:w="1"/><text x="96.4283%" y="367.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1 samples, 0.64%)</title><rect x="96.1783%" y="341" width="0.6369%" height="15" fill="rgb(206,13,37)" fg:x="151" fg:w="1"/><text x="96.4283%" y="351.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.64%)</title><rect x="96.1783%" y="325" width="0.6369%" height="15" fill="rgb(250,61,18)" fg:x="151" fg:w="1"/><text x="96.4283%" y="335.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1 samples, 0.64%)</title><rect x="96.1783%" y="309" width="0.6369%" height="15" fill="rgb(235,172,48)" fg:x="151" fg:w="1"/><text x="96.4283%" y="319.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.64%)</title><rect x="96.1783%" y="293" width="0.6369%" height="15" fill="rgb(249,201,17)" fg:x="151" fg:w="1"/><text x="96.4283%" y="303.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.64%)</title><rect x="96.1783%" y="277" width="0.6369%" height="15" fill="rgb(219,208,6)" fg:x="151" fg:w="1"/><text x="96.4283%" y="287.50"></text></g><g><title>__GI___libc_write (1 samples, 0.64%)</title><rect x="96.1783%" y="261" width="0.6369%" height="15" fill="rgb(248,31,23)" fg:x="151" fg:w="1"/><text x="96.4283%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="96.1783%" y="245" width="0.6369%" height="15" fill="rgb(245,15,42)" fg:x="151" fg:w="1"/><text x="96.4283%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="96.1783%" y="229" width="0.6369%" height="15" fill="rgb(222,217,39)" fg:x="151" fg:w="1"/><text x="96.4283%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="96.1783%" y="213" width="0.6369%" height="15" fill="rgb(210,219,27)" fg:x="151" fg:w="1"/><text x="96.4283%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="96.1783%" y="197" width="0.6369%" height="15" fill="rgb(252,166,36)" fg:x="151" fg:w="1"/><text x="96.4283%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="96.1783%" y="181" width="0.6369%" height="15" fill="rgb(245,132,34)" fg:x="151" fg:w="1"/><text x="96.4283%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="96.1783%" y="165" width="0.6369%" height="15" fill="rgb(236,54,3)" fg:x="151" fg:w="1"/><text x="96.4283%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="96.1783%" y="149" width="0.6369%" height="15" fill="rgb(241,173,43)" fg:x="151" fg:w="1"/><text x="96.4283%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="96.1783%" y="133" width="0.6369%" height="15" fill="rgb(215,190,9)" fg:x="151" fg:w="1"/><text x="96.4283%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="96.1783%" y="117" width="0.6369%" height="15" fill="rgb(242,101,16)" fg:x="151" fg:w="1"/><text x="96.4283%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="96.1783%" y="101" width="0.6369%" height="15" fill="rgb(223,190,21)" fg:x="151" fg:w="1"/><text x="96.4283%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.64%)</title><rect x="96.1783%" y="85" width="0.6369%" height="15" fill="rgb(215,228,25)" fg:x="151" fg:w="1"/><text x="96.4283%" y="95.50"></text></g><g><title>all (157 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(225,36,22)" fg:x="0" fg:w="157"/><text x="0.2500%" y="1103.50"></text></g><g><title>perf-exec (5 samples, 3.18%)</title><rect x="96.8153%" y="1077" width="3.1847%" height="15" fill="rgb(251,106,46)" fg:x="152" fg:w="5"/><text x="97.0653%" y="1087.50">per..</text></g><g><title>[unknown] (5 samples, 3.18%)</title><rect x="96.8153%" y="1061" width="3.1847%" height="15" fill="rgb(208,90,1)" fg:x="152" fg:w="5"/><text x="97.0653%" y="1071.50">[un..</text></g><g><title>[unknown] (5 samples, 3.18%)</title><rect x="96.8153%" y="1045" width="3.1847%" height="15" fill="rgb(243,10,4)" fg:x="152" fg:w="5"/><text x="97.0653%" y="1055.50">[un..</text></g><g><title>[unknown] (5 samples, 3.18%)</title><rect x="96.8153%" y="1029" width="3.1847%" height="15" fill="rgb(212,137,27)" fg:x="152" fg:w="5"/><text x="97.0653%" y="1039.50">[un..</text></g><g><title>[unknown] (5 samples, 3.18%)</title><rect x="96.8153%" y="1013" width="3.1847%" height="15" fill="rgb(231,220,49)" fg:x="152" fg:w="5"/><text x="97.0653%" y="1023.50">[un..</text></g><g><title>[unknown] (5 samples, 3.18%)</title><rect x="96.8153%" y="997" width="3.1847%" height="15" fill="rgb(237,96,20)" fg:x="152" fg:w="5"/><text x="97.0653%" y="1007.50">[un..</text></g><g><title>[unknown] (5 samples, 3.18%)</title><rect x="96.8153%" y="981" width="3.1847%" height="15" fill="rgb(239,229,30)" fg:x="152" fg:w="5"/><text x="97.0653%" y="991.50">[un..</text></g><g><title>[unknown] (5 samples, 3.18%)</title><rect x="96.8153%" y="965" width="3.1847%" height="15" fill="rgb(219,65,33)" fg:x="152" fg:w="5"/><text x="97.0653%" y="975.50">[un..</text></g><g><title>[unknown] (5 samples, 3.18%)</title><rect x="96.8153%" y="949" width="3.1847%" height="15" fill="rgb(243,134,7)" fg:x="152" fg:w="5"/><text x="97.0653%" y="959.50">[un..</text></g><g><title>[unknown] (5 samples, 3.18%)</title><rect x="96.8153%" y="933" width="3.1847%" height="15" fill="rgb(216,177,54)" fg:x="152" fg:w="5"/><text x="97.0653%" y="943.50">[un..</text></g><g><title>[unknown] (5 samples, 3.18%)</title><rect x="96.8153%" y="917" width="3.1847%" height="15" fill="rgb(211,160,20)" fg:x="152" fg:w="5"/><text x="97.0653%" y="927.50">[un..</text></g></svg></svg>