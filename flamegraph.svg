<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="853.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="251"><g><title>&lt;ahash::random_state::DefaultRandomSource as ahash::random_state::RandomSource&gt;::gen_hasher_seed (1 samples, 0.40%)</title><rect x="0.0000%" y="789" width="0.3984%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="0.3984%" y="773" width="1.1952%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="3"/><text x="0.6484%" y="783.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="0.3984%" y="757" width="1.1952%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="3"/><text x="0.6484%" y="767.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="0.3984%" y="741" width="1.1952%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="3"/><text x="0.6484%" y="751.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="0.3984%" y="725" width="1.1952%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="3"/><text x="0.6484%" y="735.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="0.3984%" y="709" width="1.1952%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="3"/><text x="0.6484%" y="719.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="0.3984%" y="693" width="1.1952%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="3"/><text x="0.6484%" y="703.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="0.3984%" y="677" width="1.1952%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="3"/><text x="0.6484%" y="687.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="0.3984%" y="661" width="1.1952%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="3"/><text x="0.6484%" y="671.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="0.3984%" y="645" width="1.1952%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="3"/><text x="0.6484%" y="655.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="0.3984%" y="629" width="1.1952%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="3"/><text x="0.6484%" y="639.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="0.3984%" y="613" width="1.1952%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="3"/><text x="0.6484%" y="623.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="0.3984%" y="597" width="1.1952%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="3"/><text x="0.6484%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.80%)</title><rect x="0.7968%" y="581" width="0.7968%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="2"/><text x="1.0468%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.80%)</title><rect x="0.7968%" y="565" width="0.7968%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="2"/><text x="1.0468%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.80%)</title><rect x="0.7968%" y="549" width="0.7968%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="2"/><text x="1.0468%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.80%)</title><rect x="0.7968%" y="533" width="0.7968%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="2"/><text x="1.0468%" y="543.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as core::clone::Clone&gt;::clone (1 samples, 0.40%)</title><rect x="1.5936%" y="629" width="0.3984%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="1"/><text x="1.8436%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.40%)</title><rect x="1.5936%" y="613" width="0.3984%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="1"/><text x="1.8436%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.40%)</title><rect x="1.5936%" y="597" width="0.3984%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="1"/><text x="1.8436%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.40%)</title><rect x="1.5936%" y="581" width="0.3984%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="1"/><text x="1.8436%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.40%)</title><rect x="1.5936%" y="565" width="0.3984%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="1"/><text x="1.8436%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.40%)</title><rect x="1.5936%" y="549" width="0.3984%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="1"/><text x="1.8436%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.40%)</title><rect x="1.5936%" y="533" width="0.3984%" height="15" fill="rgb(247,18,42)" fg:x="4" fg:w="1"/><text x="1.8436%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.40%)</title><rect x="1.5936%" y="517" width="0.3984%" height="15" fill="rgb(241,131,45)" fg:x="4" fg:w="1"/><text x="1.8436%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.40%)</title><rect x="1.5936%" y="501" width="0.3984%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="1"/><text x="1.8436%" y="511.50"></text></g><g><title>[libc.so.6] (1 samples, 0.40%)</title><rect x="1.5936%" y="485" width="0.3984%" height="15" fill="rgb(225,111,53)" fg:x="4" fg:w="1"/><text x="1.8436%" y="495.50"></text></g><g><title>[unknown] (5 samples, 1.99%)</title><rect x="0.3984%" y="789" width="1.9920%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="5"/><text x="0.6484%" y="799.50">[..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (2 samples, 0.80%)</title><rect x="1.5936%" y="773" width="0.7968%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="2"/><text x="1.8436%" y="783.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (2 samples, 0.80%)</title><rect x="1.5936%" y="757" width="0.7968%" height="15" fill="rgb(232,36,49)" fg:x="4" fg:w="2"/><text x="1.8436%" y="767.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (2 samples, 0.80%)</title><rect x="1.5936%" y="741" width="0.7968%" height="15" fill="rgb(209,103,24)" fg:x="4" fg:w="2"/><text x="1.8436%" y="751.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (2 samples, 0.80%)</title><rect x="1.5936%" y="725" width="0.7968%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="2"/><text x="1.8436%" y="735.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as core::clone::Clone&gt;::clone (2 samples, 0.80%)</title><rect x="1.5936%" y="709" width="0.7968%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="2"/><text x="1.8436%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.80%)</title><rect x="1.5936%" y="693" width="0.7968%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="2"/><text x="1.8436%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.80%)</title><rect x="1.5936%" y="677" width="0.7968%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="2"/><text x="1.8436%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.80%)</title><rect x="1.5936%" y="661" width="0.7968%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="2"/><text x="1.8436%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.80%)</title><rect x="1.5936%" y="645" width="0.7968%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="2"/><text x="1.8436%" y="655.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.40%)</title><rect x="1.9920%" y="629" width="0.3984%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="1"/><text x="2.2420%" y="639.50"></text></g><g><title>__GI_exit (1 samples, 0.40%)</title><rect x="2.3904%" y="741" width="0.3984%" height="15" fill="rgb(238,167,29)" fg:x="6" fg:w="1"/><text x="2.6404%" y="751.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.40%)</title><rect x="2.3904%" y="725" width="0.3984%" height="15" fill="rgb(232,182,51)" fg:x="6" fg:w="1"/><text x="2.6404%" y="735.50"></text></g><g><title>mi_process_done (1 samples, 0.40%)</title><rect x="2.3904%" y="709" width="0.3984%" height="15" fill="rgb(231,60,39)" fg:x="6" fg:w="1"/><text x="2.6404%" y="719.50"></text></g><g><title>mi_process_done (1 samples, 0.40%)</title><rect x="2.3904%" y="693" width="0.3984%" height="15" fill="rgb(208,69,12)" fg:x="6" fg:w="1"/><text x="2.6404%" y="703.50"></text></g><g><title>mi_heap_collect_ex (1 samples, 0.40%)</title><rect x="2.3904%" y="677" width="0.3984%" height="15" fill="rgb(235,93,37)" fg:x="6" fg:w="1"/><text x="2.6404%" y="687.50"></text></g><g><title>mi_segment_cache_purge (1 samples, 0.40%)</title><rect x="2.3904%" y="661" width="0.3984%" height="15" fill="rgb(213,116,39)" fg:x="6" fg:w="1"/><text x="2.6404%" y="671.50"></text></g><g><title>mi_commit_mask_decommit (1 samples, 0.40%)</title><rect x="2.3904%" y="645" width="0.3984%" height="15" fill="rgb(222,207,29)" fg:x="6" fg:w="1"/><text x="2.6404%" y="655.50"></text></g><g><title>_mi_os_decommit (1 samples, 0.40%)</title><rect x="2.3904%" y="629" width="0.3984%" height="15" fill="rgb(206,96,30)" fg:x="6" fg:w="1"/><text x="2.6404%" y="639.50"></text></g><g><title>mi_os_commitx (1 samples, 0.40%)</title><rect x="2.3904%" y="613" width="0.3984%" height="15" fill="rgb(218,138,4)" fg:x="6" fg:w="1"/><text x="2.6404%" y="623.50"></text></g><g><title>__GI_madvise (1 samples, 0.40%)</title><rect x="2.3904%" y="597" width="0.3984%" height="15" fill="rgb(250,191,14)" fg:x="6" fg:w="1"/><text x="2.6404%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="2.3904%" y="581" width="0.3984%" height="15" fill="rgb(239,60,40)" fg:x="6" fg:w="1"/><text x="2.6404%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="2.3904%" y="565" width="0.3984%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="1"/><text x="2.6404%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="2.3904%" y="549" width="0.3984%" height="15" fill="rgb(225,35,8)" fg:x="6" fg:w="1"/><text x="2.6404%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="2.3904%" y="533" width="0.3984%" height="15" fill="rgb(250,213,24)" fg:x="6" fg:w="1"/><text x="2.6404%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="2.3904%" y="517" width="0.3984%" height="15" fill="rgb(247,123,22)" fg:x="6" fg:w="1"/><text x="2.6404%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="2.3904%" y="501" width="0.3984%" height="15" fill="rgb(231,138,38)" fg:x="6" fg:w="1"/><text x="2.6404%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="2.3904%" y="485" width="0.3984%" height="15" fill="rgb(231,145,46)" fg:x="6" fg:w="1"/><text x="2.6404%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="2.3904%" y="469" width="0.3984%" height="15" fill="rgb(251,118,11)" fg:x="6" fg:w="1"/><text x="2.6404%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="2.3904%" y="453" width="0.3984%" height="15" fill="rgb(217,147,25)" fg:x="6" fg:w="1"/><text x="2.6404%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="2.3904%" y="437" width="0.3984%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="1"/><text x="2.6404%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(u32,demoparser::parsing::entities::Entity)&gt;&gt; (1 samples, 0.40%)</title><rect x="2.7888%" y="501" width="0.3984%" height="15" fill="rgb(209,12,38)" fg:x="7" fg:w="1"/><text x="3.0388%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="2.7888%" y="485" width="0.3984%" height="15" fill="rgb(227,1,9)" fg:x="7" fg:w="1"/><text x="3.0388%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(u32,demoparser::parsing::entities::Entity)]&gt; (1 samples, 0.40%)</title><rect x="2.7888%" y="469" width="0.3984%" height="15" fill="rgb(248,47,43)" fg:x="7" fg:w="1"/><text x="3.0388%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u32,demoparser::parsing::entities::Entity)&gt; (1 samples, 0.40%)</title><rect x="2.7888%" y="453" width="0.3984%" height="15" fill="rgb(221,10,30)" fg:x="7" fg:w="1"/><text x="3.0388%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::entities::Entity&gt; (1 samples, 0.40%)</title><rect x="2.7888%" y="437" width="0.3984%" height="15" fill="rgb(210,229,1)" fg:x="7" fg:w="1"/><text x="3.0388%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,demoparser::parsing::variants::PropAtom,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.40%)</title><rect x="2.7888%" y="421" width="0.3984%" height="15" fill="rgb(222,148,37)" fg:x="7" fg:w="1"/><text x="3.0388%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,demoparser::parsing::variants::PropAtom,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.40%)</title><rect x="2.7888%" y="405" width="0.3984%" height="15" fill="rgb(234,67,33)" fg:x="7" fg:w="1"/><text x="3.0388%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,demoparser::parsing::variants::PropAtom)&gt;&gt; (1 samples, 0.40%)</title><rect x="2.7888%" y="389" width="0.3984%" height="15" fill="rgb(247,98,35)" fg:x="7" fg:w="1"/><text x="3.0388%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="2.7888%" y="373" width="0.3984%" height="15" fill="rgb(247,138,52)" fg:x="7" fg:w="1"/><text x="3.0388%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.40%)</title><rect x="2.7888%" y="357" width="0.3984%" height="15" fill="rgb(213,79,30)" fg:x="7" fg:w="1"/><text x="3.0388%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.40%)</title><rect x="2.7888%" y="341" width="0.3984%" height="15" fill="rgb(246,177,23)" fg:x="7" fg:w="1"/><text x="3.0388%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.40%)</title><rect x="2.7888%" y="325" width="0.3984%" height="15" fill="rgb(230,62,27)" fg:x="7" fg:w="1"/><text x="3.0388%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,demoparser::parsing::variants::PropAtom)&gt; (1 samples, 0.40%)</title><rect x="2.7888%" y="309" width="0.3984%" height="15" fill="rgb(216,154,8)" fg:x="7" fg:w="1"/><text x="3.0388%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::PropAtom&gt; (1 samples, 0.40%)</title><rect x="2.7888%" y="293" width="0.3984%" height="15" fill="rgb(244,35,45)" fg:x="7" fg:w="1"/><text x="3.0388%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.40%)</title><rect x="2.7888%" y="277" width="0.3984%" height="15" fill="rgb(251,115,12)" fg:x="7" fg:w="1"/><text x="3.0388%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.40%)</title><rect x="2.7888%" y="261" width="0.3984%" height="15" fill="rgb(240,54,50)" fg:x="7" fg:w="1"/><text x="3.0388%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.40%)</title><rect x="2.7888%" y="245" width="0.3984%" height="15" fill="rgb(233,84,52)" fg:x="7" fg:w="1"/><text x="3.0388%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="2.7888%" y="229" width="0.3984%" height="15" fill="rgb(207,117,47)" fg:x="7" fg:w="1"/><text x="3.0388%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.40%)</title><rect x="2.7888%" y="213" width="0.3984%" height="15" fill="rgb(249,43,39)" fg:x="7" fg:w="1"/><text x="3.0388%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.40%)</title><rect x="2.7888%" y="197" width="0.3984%" height="15" fill="rgb(209,38,44)" fg:x="7" fg:w="1"/><text x="3.0388%" y="207.50"></text></g><g><title>mi_free (1 samples, 0.40%)</title><rect x="2.7888%" y="181" width="0.3984%" height="15" fill="rgb(236,212,23)" fg:x="7" fg:w="1"/><text x="3.0388%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::stringtables::StringTable&gt;&gt; (1 samples, 0.40%)</title><rect x="3.1873%" y="501" width="0.3984%" height="15" fill="rgb(242,79,21)" fg:x="8" fg:w="1"/><text x="3.4373%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="3.1873%" y="485" width="0.3984%" height="15" fill="rgb(211,96,35)" fg:x="8" fg:w="1"/><text x="3.4373%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::stringtables::StringTable]&gt; (1 samples, 0.40%)</title><rect x="3.1873%" y="469" width="0.3984%" height="15" fill="rgb(253,215,40)" fg:x="8" fg:w="1"/><text x="3.4373%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::stringtables::StringTable&gt; (1 samples, 0.40%)</title><rect x="3.1873%" y="453" width="0.3984%" height="15" fill="rgb(211,81,21)" fg:x="8" fg:w="1"/><text x="3.4373%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::stringtables::StField&gt;&gt; (1 samples, 0.40%)</title><rect x="3.1873%" y="437" width="0.3984%" height="15" fill="rgb(208,190,38)" fg:x="8" fg:w="1"/><text x="3.4373%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="3.1873%" y="421" width="0.3984%" height="15" fill="rgb(235,213,38)" fg:x="8" fg:w="1"/><text x="3.4373%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::stringtables::StField]&gt; (1 samples, 0.40%)</title><rect x="3.1873%" y="405" width="0.3984%" height="15" fill="rgb(237,122,38)" fg:x="8" fg:w="1"/><text x="3.4373%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::stringtables::StField&gt; (1 samples, 0.40%)</title><rect x="3.1873%" y="389" width="0.3984%" height="15" fill="rgb(244,218,35)" fg:x="8" fg:w="1"/><text x="3.4373%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.40%)</title><rect x="3.1873%" y="373" width="0.3984%" height="15" fill="rgb(240,68,47)" fg:x="8" fg:w="1"/><text x="3.4373%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.40%)</title><rect x="3.1873%" y="357" width="0.3984%" height="15" fill="rgb(210,16,53)" fg:x="8" fg:w="1"/><text x="3.4373%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.40%)</title><rect x="3.1873%" y="341" width="0.3984%" height="15" fill="rgb(235,124,12)" fg:x="8" fg:w="1"/><text x="3.4373%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="3.1873%" y="325" width="0.3984%" height="15" fill="rgb(224,169,11)" fg:x="8" fg:w="1"/><text x="3.4373%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.40%)</title><rect x="3.1873%" y="309" width="0.3984%" height="15" fill="rgb(250,166,2)" fg:x="8" fg:w="1"/><text x="3.4373%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt;&gt; (1 samples, 0.40%)</title><rect x="3.5857%" y="501" width="0.3984%" height="15" fill="rgb(242,216,29)" fg:x="9" fg:w="1"/><text x="3.8357%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.40%)</title><rect x="3.5857%" y="485" width="0.3984%" height="15" fill="rgb(230,116,27)" fg:x="9" fg:w="1"/><text x="3.8357%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.40%)</title><rect x="3.5857%" y="469" width="0.3984%" height="15" fill="rgb(228,99,48)" fg:x="9" fg:w="1"/><text x="3.8357%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable)&gt;&gt; (1 samples, 0.40%)</title><rect x="3.5857%" y="453" width="0.3984%" height="15" fill="rgb(253,11,6)" fg:x="9" fg:w="1"/><text x="3.8357%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="3.5857%" y="437" width="0.3984%" height="15" fill="rgb(247,143,39)" fg:x="9" fg:w="1"/><text x="3.8357%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.40%)</title><rect x="3.5857%" y="421" width="0.3984%" height="15" fill="rgb(236,97,10)" fg:x="9" fg:w="1"/><text x="3.8357%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.40%)</title><rect x="3.5857%" y="405" width="0.3984%" height="15" fill="rgb(233,208,19)" fg:x="9" fg:w="1"/><text x="3.8357%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.40%)</title><rect x="3.5857%" y="389" width="0.3984%" height="15" fill="rgb(216,164,2)" fg:x="9" fg:w="1"/><text x="3.8357%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable)&gt; (1 samples, 0.40%)</title><rect x="3.5857%" y="373" width="0.3984%" height="15" fill="rgb(220,129,5)" fg:x="9" fg:w="1"/><text x="3.8357%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::CSVCMsg_SendTable&gt; (1 samples, 0.40%)</title><rect x="3.5857%" y="357" width="0.3984%" height="15" fill="rgb(242,17,10)" fg:x="9" fg:w="1"/><text x="3.8357%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt;&gt; (1 samples, 0.40%)</title><rect x="3.5857%" y="341" width="0.3984%" height="15" fill="rgb(242,107,0)" fg:x="9" fg:w="1"/><text x="3.8357%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="3.5857%" y="325" width="0.3984%" height="15" fill="rgb(251,28,31)" fg:x="9" fg:w="1"/><text x="3.8357%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[csgoproto::netmessages::csvcmsg_send_table::Sendprop_t]&gt; (1 samples, 0.40%)</title><rect x="3.5857%" y="309" width="0.3984%" height="15" fill="rgb(233,223,10)" fg:x="9" fg:w="1"/><text x="3.8357%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt; (1 samples, 0.40%)</title><rect x="3.5857%" y="293" width="0.3984%" height="15" fill="rgb(215,21,27)" fg:x="9" fg:w="1"/><text x="3.8357%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1 samples, 0.40%)</title><rect x="3.5857%" y="277" width="0.3984%" height="15" fill="rgb(232,23,21)" fg:x="9" fg:w="1"/><text x="3.8357%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.40%)</title><rect x="3.5857%" y="261" width="0.3984%" height="15" fill="rgb(244,5,23)" fg:x="9" fg:w="1"/><text x="3.8357%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.40%)</title><rect x="3.5857%" y="245" width="0.3984%" height="15" fill="rgb(226,81,46)" fg:x="9" fg:w="1"/><text x="3.8357%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.40%)</title><rect x="3.5857%" y="229" width="0.3984%" height="15" fill="rgb(247,70,30)" fg:x="9" fg:w="1"/><text x="3.8357%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="3.5857%" y="213" width="0.3984%" height="15" fill="rgb(212,68,19)" fg:x="9" fg:w="1"/><text x="3.8357%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.40%)</title><rect x="3.5857%" y="197" width="0.3984%" height="15" fill="rgb(240,187,13)" fg:x="9" fg:w="1"/><text x="3.8357%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.40%)</title><rect x="3.5857%" y="181" width="0.3984%" height="15" fill="rgb(223,113,26)" fg:x="9" fg:w="1"/><text x="3.8357%" y="191.50"></text></g><g><title>mi_free (1 samples, 0.40%)</title><rect x="3.5857%" y="165" width="0.3984%" height="15" fill="rgb(206,192,2)" fg:x="9" fg:w="1"/><text x="3.8357%" y="175.50"></text></g><g><title>mi_block_set_next (1 samples, 0.40%)</title><rect x="3.5857%" y="149" width="0.3984%" height="15" fill="rgb(241,108,4)" fg:x="9" fg:w="1"/><text x="3.8357%" y="159.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.40%)</title><rect x="3.5857%" y="133" width="0.3984%" height="15" fill="rgb(247,173,49)" fg:x="9" fg:w="1"/><text x="3.8357%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::Demo&gt; (6 samples, 2.39%)</title><rect x="2.7888%" y="517" width="2.3904%" height="15" fill="rgb(224,114,35)" fg:x="7" fg:w="6"/><text x="3.0388%" y="527.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::BytesVariant&gt; (3 samples, 1.20%)</title><rect x="3.9841%" y="501" width="1.1952%" height="15" fill="rgb(245,159,27)" fg:x="10" fg:w="3"/><text x="4.2341%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap::Mmap&gt; (3 samples, 1.20%)</title><rect x="3.9841%" y="485" width="1.1952%" height="15" fill="rgb(245,172,44)" fg:x="10" fg:w="3"/><text x="4.2341%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap::unix::MmapInner&gt; (3 samples, 1.20%)</title><rect x="3.9841%" y="469" width="1.1952%" height="15" fill="rgb(236,23,11)" fg:x="10" fg:w="3"/><text x="4.2341%" y="479.50"></text></g><g><title>&lt;memmap::unix::MmapInner as core::ops::drop::Drop&gt;::drop (3 samples, 1.20%)</title><rect x="3.9841%" y="453" width="1.1952%" height="15" fill="rgb(205,117,38)" fg:x="10" fg:w="3"/><text x="4.2341%" y="463.50"></text></g><g><title>__GI___munmap (3 samples, 1.20%)</title><rect x="3.9841%" y="437" width="1.1952%" height="15" fill="rgb(237,72,25)" fg:x="10" fg:w="3"/><text x="4.2341%" y="447.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="3.9841%" y="421" width="1.1952%" height="15" fill="rgb(244,70,9)" fg:x="10" fg:w="3"/><text x="4.2341%" y="431.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="3.9841%" y="405" width="1.1952%" height="15" fill="rgb(217,125,39)" fg:x="10" fg:w="3"/><text x="4.2341%" y="415.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="3.9841%" y="389" width="1.1952%" height="15" fill="rgb(235,36,10)" fg:x="10" fg:w="3"/><text x="4.2341%" y="399.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="3.9841%" y="373" width="1.1952%" height="15" fill="rgb(251,123,47)" fg:x="10" fg:w="3"/><text x="4.2341%" y="383.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="3.9841%" y="357" width="1.1952%" height="15" fill="rgb(221,13,13)" fg:x="10" fg:w="3"/><text x="4.2341%" y="367.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="3.9841%" y="341" width="1.1952%" height="15" fill="rgb(238,131,9)" fg:x="10" fg:w="3"/><text x="4.2341%" y="351.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="3.9841%" y="325" width="1.1952%" height="15" fill="rgb(211,50,8)" fg:x="10" fg:w="3"/><text x="4.2341%" y="335.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="3.9841%" y="309" width="1.1952%" height="15" fill="rgb(245,182,24)" fg:x="10" fg:w="3"/><text x="4.2341%" y="319.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="3.9841%" y="293" width="1.1952%" height="15" fill="rgb(242,14,37)" fg:x="10" fg:w="3"/><text x="4.2341%" y="303.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="3.9841%" y="277" width="1.1952%" height="15" fill="rgb(246,228,12)" fg:x="10" fg:w="3"/><text x="4.2341%" y="287.50"></text></g><g><title>[unknown] (3 samples, 1.20%)</title><rect x="3.9841%" y="261" width="1.1952%" height="15" fill="rgb(213,55,15)" fg:x="10" fg:w="3"/><text x="4.2341%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.80%)</title><rect x="4.3825%" y="245" width="0.7968%" height="15" fill="rgb(209,9,3)" fg:x="11" fg:w="2"/><text x="4.6325%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.80%)</title><rect x="4.3825%" y="229" width="0.7968%" height="15" fill="rgb(230,59,30)" fg:x="11" fg:w="2"/><text x="4.6325%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.80%)</title><rect x="4.3825%" y="213" width="0.7968%" height="15" fill="rgb(209,121,21)" fg:x="11" fg:w="2"/><text x="4.6325%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="4.7809%" y="197" width="0.3984%" height="15" fill="rgb(220,109,13)" fg:x="12" fg:w="1"/><text x="5.0309%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="4.7809%" y="181" width="0.3984%" height="15" fill="rgb(232,18,1)" fg:x="12" fg:w="1"/><text x="5.0309%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="4.7809%" y="165" width="0.3984%" height="15" fill="rgb(215,41,42)" fg:x="12" fg:w="1"/><text x="5.0309%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="4.7809%" y="149" width="0.3984%" height="15" fill="rgb(224,123,36)" fg:x="12" fg:w="1"/><text x="5.0309%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,demoparser::parsing::variants::PropColumn,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.40%)</title><rect x="5.1793%" y="517" width="0.3984%" height="15" fill="rgb(240,125,3)" fg:x="13" fg:w="1"/><text x="5.4293%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,demoparser::parsing::variants::PropColumn,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.40%)</title><rect x="5.1793%" y="501" width="0.3984%" height="15" fill="rgb(205,98,50)" fg:x="13" fg:w="1"/><text x="5.4293%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,demoparser::parsing::variants::PropColumn)&gt;&gt; (1 samples, 0.40%)</title><rect x="5.1793%" y="485" width="0.3984%" height="15" fill="rgb(205,185,37)" fg:x="13" fg:w="1"/><text x="5.4293%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="5.1793%" y="469" width="0.3984%" height="15" fill="rgb(238,207,15)" fg:x="13" fg:w="1"/><text x="5.4293%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.40%)</title><rect x="5.1793%" y="453" width="0.3984%" height="15" fill="rgb(213,199,42)" fg:x="13" fg:w="1"/><text x="5.4293%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.40%)</title><rect x="5.1793%" y="437" width="0.3984%" height="15" fill="rgb(235,201,11)" fg:x="13" fg:w="1"/><text x="5.4293%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.40%)</title><rect x="5.1793%" y="421" width="0.3984%" height="15" fill="rgb(207,46,11)" fg:x="13" fg:w="1"/><text x="5.4293%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,demoparser::parsing::variants::PropColumn)&gt; (1 samples, 0.40%)</title><rect x="5.1793%" y="405" width="0.3984%" height="15" fill="rgb(241,35,35)" fg:x="13" fg:w="1"/><text x="5.4293%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::PropColumn&gt; (1 samples, 0.40%)</title><rect x="5.1793%" y="389" width="0.3984%" height="15" fill="rgb(243,32,47)" fg:x="13" fg:w="1"/><text x="5.4293%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::VarVec&gt; (1 samples, 0.40%)</title><rect x="5.1793%" y="373" width="0.3984%" height="15" fill="rgb(247,202,23)" fg:x="13" fg:w="1"/><text x="5.4293%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::string::String&gt;&gt;&gt; (1 samples, 0.40%)</title><rect x="5.1793%" y="357" width="0.3984%" height="15" fill="rgb(219,102,11)" fg:x="13" fg:w="1"/><text x="5.4293%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="5.1793%" y="341" width="0.3984%" height="15" fill="rgb(243,110,44)" fg:x="13" fg:w="1"/><text x="5.4293%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;alloc::string::String&gt;]&gt; (1 samples, 0.40%)</title><rect x="5.1793%" y="325" width="0.3984%" height="15" fill="rgb(222,74,54)" fg:x="13" fg:w="1"/><text x="5.4293%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1 samples, 0.40%)</title><rect x="5.1793%" y="309" width="0.3984%" height="15" fill="rgb(216,99,12)" fg:x="13" fg:w="1"/><text x="5.4293%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.40%)</title><rect x="5.1793%" y="293" width="0.3984%" height="15" fill="rgb(226,22,26)" fg:x="13" fg:w="1"/><text x="5.4293%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.40%)</title><rect x="5.1793%" y="277" width="0.3984%" height="15" fill="rgb(217,163,10)" fg:x="13" fg:w="1"/><text x="5.4293%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.40%)</title><rect x="5.1793%" y="261" width="0.3984%" height="15" fill="rgb(213,25,53)" fg:x="13" fg:w="1"/><text x="5.4293%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="5.1793%" y="245" width="0.3984%" height="15" fill="rgb(252,105,26)" fg:x="13" fg:w="1"/><text x="5.4293%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.40%)</title><rect x="5.1793%" y="229" width="0.3984%" height="15" fill="rgb(220,39,43)" fg:x="13" fg:w="1"/><text x="5.4293%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.40%)</title><rect x="5.1793%" y="213" width="0.3984%" height="15" fill="rgb(229,68,48)" fg:x="13" fg:w="1"/><text x="5.4293%" y="223.50"></text></g><g><title>mi_free (1 samples, 0.40%)</title><rect x="5.1793%" y="197" width="0.3984%" height="15" fill="rgb(252,8,32)" fg:x="13" fg:w="1"/><text x="5.4293%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="5.1793%" y="181" width="0.3984%" height="15" fill="rgb(223,20,43)" fg:x="13" fg:w="1"/><text x="5.4293%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="5.1793%" y="165" width="0.3984%" height="15" fill="rgb(229,81,49)" fg:x="13" fg:w="1"/><text x="5.4293%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="5.1793%" y="149" width="0.3984%" height="15" fill="rgb(236,28,36)" fg:x="13" fg:w="1"/><text x="5.4293%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="5.1793%" y="133" width="0.3984%" height="15" fill="rgb(249,185,26)" fg:x="13" fg:w="1"/><text x="5.4293%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="5.1793%" y="117" width="0.3984%" height="15" fill="rgb(249,174,33)" fg:x="13" fg:w="1"/><text x="5.4293%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="5.1793%" y="101" width="0.3984%" height="15" fill="rgb(233,201,37)" fg:x="13" fg:w="1"/><text x="5.4293%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="5.1793%" y="85" width="0.3984%" height="15" fill="rgb(221,78,26)" fg:x="13" fg:w="1"/><text x="5.4293%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="5.1793%" y="69" width="0.3984%" height="15" fill="rgb(250,127,30)" fg:x="13" fg:w="1"/><text x="5.4293%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="5.1793%" y="53" width="0.3984%" height="15" fill="rgb(230,49,44)" fg:x="13" fg:w="1"/><text x="5.4293%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="5.1793%" y="37" width="0.3984%" height="15" fill="rgb(229,67,23)" fg:x="13" fg:w="1"/><text x="5.4293%" y="47.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.40%)</title><rect x="6.7729%" y="437" width="0.3984%" height="15" fill="rgb(249,83,47)" fg:x="17" fg:w="1"/><text x="7.0229%" y="447.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.40%)</title><rect x="6.7729%" y="421" width="0.3984%" height="15" fill="rgb(215,43,3)" fg:x="17" fg:w="1"/><text x="7.0229%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.40%)</title><rect x="6.7729%" y="405" width="0.3984%" height="15" fill="rgb(238,154,13)" fg:x="17" fg:w="1"/><text x="7.0229%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.40%)</title><rect x="6.7729%" y="389" width="0.3984%" height="15" fill="rgb(219,56,2)" fg:x="17" fg:w="1"/><text x="7.0229%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.40%)</title><rect x="6.7729%" y="373" width="0.3984%" height="15" fill="rgb(233,0,4)" fg:x="17" fg:w="1"/><text x="7.0229%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.40%)</title><rect x="6.7729%" y="357" width="0.3984%" height="15" fill="rgb(235,30,7)" fg:x="17" fg:w="1"/><text x="7.0229%" y="367.50"></text></g><g><title>phf_shared::get_index (1 samples, 0.40%)</title><rect x="7.1713%" y="437" width="0.3984%" height="15" fill="rgb(250,79,13)" fg:x="18" fg:w="1"/><text x="7.4213%" y="447.50"></text></g><g><title>&lt;phf::map::Map&lt;K,V&gt; as core::ops::index::Index&lt;&amp;T&gt;&gt;::index (5 samples, 1.99%)</title><rect x="5.9761%" y="485" width="1.9920%" height="15" fill="rgb(211,146,34)" fg:x="15" fg:w="5"/><text x="6.2261%" y="495.50">&lt;..</text></g><g><title>phf::map::Map&lt;K,V&gt;::get (5 samples, 1.99%)</title><rect x="5.9761%" y="469" width="1.9920%" height="15" fill="rgb(228,22,38)" fg:x="15" fg:w="5"/><text x="6.2261%" y="479.50">p..</text></g><g><title>phf::map::Map&lt;K,V&gt;::get_entry (5 samples, 1.99%)</title><rect x="5.9761%" y="453" width="1.9920%" height="15" fill="rgb(235,168,5)" fg:x="15" fg:w="5"/><text x="6.2261%" y="463.50">p..</text></g><g><title>phf_shared::hash (1 samples, 0.40%)</title><rect x="7.5697%" y="437" width="0.3984%" height="15" fill="rgb(221,155,16)" fg:x="19" fg:w="1"/><text x="7.8197%" y="447.50"></text></g><g><title>&lt;str as phf_shared::PhfHash&gt;::phf_hash (1 samples, 0.40%)</title><rect x="7.5697%" y="421" width="0.3984%" height="15" fill="rgb(215,215,53)" fg:x="19" fg:w="1"/><text x="7.8197%" y="431.50"></text></g><g><title>&lt;[u8] as phf_shared::PhfHash&gt;::phf_hash (1 samples, 0.40%)</title><rect x="7.5697%" y="405" width="0.3984%" height="15" fill="rgb(223,4,10)" fg:x="19" fg:w="1"/><text x="7.8197%" y="415.50"></text></g><g><title>&lt;siphasher::sip128::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.40%)</title><rect x="7.5697%" y="389" width="0.3984%" height="15" fill="rgb(234,103,6)" fg:x="19" fg:w="1"/><text x="7.8197%" y="399.50"></text></g><g><title>&lt;siphasher::sip128::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.40%)</title><rect x="7.5697%" y="373" width="0.3984%" height="15" fill="rgb(227,97,0)" fg:x="19" fg:w="1"/><text x="7.8197%" y="383.50"></text></g><g><title>&lt;siphasher::sip128::Sip13Rounds as siphasher::sip128::Sip&gt;::c_rounds (1 samples, 0.40%)</title><rect x="7.5697%" y="357" width="0.3984%" height="15" fill="rgb(234,150,53)" fg:x="19" fg:w="1"/><text x="7.8197%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.40%)</title><rect x="7.5697%" y="341" width="0.3984%" height="15" fill="rgb(228,201,54)" fg:x="19" fg:w="1"/><text x="7.8197%" y="351.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (1 samples, 0.40%)</title><rect x="7.9681%" y="469" width="0.3984%" height="15" fill="rgb(222,22,37)" fg:x="20" fg:w="1"/><text x="8.2181%" y="479.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (1 samples, 0.40%)</title><rect x="7.9681%" y="453" width="0.3984%" height="15" fill="rgb(237,53,32)" fg:x="20" fg:w="1"/><text x="8.2181%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.40%)</title><rect x="7.9681%" y="437" width="0.3984%" height="15" fill="rgb(233,25,53)" fg:x="20" fg:w="1"/><text x="8.2181%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.40%)</title><rect x="7.9681%" y="421" width="0.3984%" height="15" fill="rgb(210,40,34)" fg:x="20" fg:w="1"/><text x="8.2181%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.40%)</title><rect x="7.9681%" y="405" width="0.3984%" height="15" fill="rgb(241,220,44)" fg:x="20" fg:w="1"/><text x="8.2181%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.40%)</title><rect x="7.9681%" y="389" width="0.3984%" height="15" fill="rgb(235,28,35)" fg:x="20" fg:w="1"/><text x="8.2181%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.40%)</title><rect x="7.9681%" y="373" width="0.3984%" height="15" fill="rgb(210,56,17)" fg:x="20" fg:w="1"/><text x="8.2181%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.40%)</title><rect x="7.9681%" y="357" width="0.3984%" height="15" fill="rgb(224,130,29)" fg:x="20" fg:w="1"/><text x="8.2181%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.40%)</title><rect x="7.9681%" y="341" width="0.3984%" height="15" fill="rgb(235,212,8)" fg:x="20" fg:w="1"/><text x="8.2181%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.40%)</title><rect x="7.9681%" y="325" width="0.3984%" height="15" fill="rgb(223,33,50)" fg:x="20" fg:w="1"/><text x="8.2181%" y="335.50"></text></g><g><title>demoparser::parsing::variants::VarVec::push_string (1 samples, 0.40%)</title><rect x="8.3665%" y="469" width="0.3984%" height="15" fill="rgb(219,149,13)" fg:x="21" fg:w="1"/><text x="8.6165%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.40%)</title><rect x="8.3665%" y="453" width="0.3984%" height="15" fill="rgb(250,156,29)" fg:x="21" fg:w="1"/><text x="8.6165%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.40%)</title><rect x="8.3665%" y="437" width="0.3984%" height="15" fill="rgb(216,193,19)" fg:x="21" fg:w="1"/><text x="8.6165%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.40%)</title><rect x="8.3665%" y="421" width="0.3984%" height="15" fill="rgb(216,135,14)" fg:x="21" fg:w="1"/><text x="8.6165%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.40%)</title><rect x="8.3665%" y="405" width="0.3984%" height="15" fill="rgb(241,47,5)" fg:x="21" fg:w="1"/><text x="8.6165%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.40%)</title><rect x="8.3665%" y="389" width="0.3984%" height="15" fill="rgb(233,42,35)" fg:x="21" fg:w="1"/><text x="8.6165%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.40%)</title><rect x="8.3665%" y="373" width="0.3984%" height="15" fill="rgb(231,13,6)" fg:x="21" fg:w="1"/><text x="8.6165%" y="383.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.40%)</title><rect x="8.3665%" y="357" width="0.3984%" height="15" fill="rgb(207,181,40)" fg:x="21" fg:w="1"/><text x="8.6165%" y="367.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.40%)</title><rect x="8.3665%" y="341" width="0.3984%" height="15" fill="rgb(254,173,49)" fg:x="21" fg:w="1"/><text x="8.6165%" y="351.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.40%)</title><rect x="8.3665%" y="325" width="0.3984%" height="15" fill="rgb(221,1,38)" fg:x="21" fg:w="1"/><text x="8.6165%" y="335.50"></text></g><g><title>_mi_memcpy (1 samples, 0.40%)</title><rect x="8.3665%" y="309" width="0.3984%" height="15" fill="rgb(206,124,46)" fg:x="21" fg:w="1"/><text x="8.6165%" y="319.50"></text></g><g><title>memcpy (1 samples, 0.40%)</title><rect x="8.3665%" y="293" width="0.3984%" height="15" fill="rgb(249,21,11)" fg:x="21" fg:w="1"/><text x="8.6165%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.40%)</title><rect x="8.3665%" y="277" width="0.3984%" height="15" fill="rgb(222,201,40)" fg:x="21" fg:w="1"/><text x="8.6165%" y="287.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.40%)</title><rect x="8.7649%" y="389" width="0.3984%" height="15" fill="rgb(235,61,29)" fg:x="22" fg:w="1"/><text x="9.0149%" y="399.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.40%)</title><rect x="8.7649%" y="373" width="0.3984%" height="15" fill="rgb(219,207,3)" fg:x="22" fg:w="1"/><text x="9.0149%" y="383.50"></text></g><g><title>hashbrown::map::make_insert_hash (2 samples, 0.80%)</title><rect x="8.7649%" y="437" width="0.7968%" height="15" fill="rgb(222,56,46)" fg:x="22" fg:w="2"/><text x="9.0149%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.80%)</title><rect x="8.7649%" y="421" width="0.7968%" height="15" fill="rgb(239,76,54)" fg:x="22" fg:w="2"/><text x="9.0149%" y="431.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (2 samples, 0.80%)</title><rect x="8.7649%" y="405" width="0.7968%" height="15" fill="rgb(231,124,27)" fg:x="22" fg:w="2"/><text x="9.0149%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.40%)</title><rect x="9.1633%" y="389" width="0.3984%" height="15" fill="rgb(249,195,6)" fg:x="23" fg:w="1"/><text x="9.4133%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 1.99%)</title><rect x="8.7649%" y="453" width="1.9920%" height="15" fill="rgb(237,174,47)" fg:x="22" fg:w="5"/><text x="9.0149%" y="463.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 1.20%)</title><rect x="9.5618%" y="437" width="1.1952%" height="15" fill="rgb(206,201,31)" fg:x="24" fg:w="3"/><text x="9.8118%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (3 samples, 1.20%)</title><rect x="9.5618%" y="421" width="1.1952%" height="15" fill="rgb(231,57,52)" fg:x="24" fg:w="3"/><text x="9.8118%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 1.20%)</title><rect x="9.5618%" y="405" width="1.1952%" height="15" fill="rgb(248,177,22)" fg:x="24" fg:w="3"/><text x="9.8118%" y="415.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (3 samples, 1.20%)</title><rect x="9.5618%" y="389" width="1.1952%" height="15" fill="rgb(215,211,37)" fg:x="24" fg:w="3"/><text x="9.8118%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (3 samples, 1.20%)</title><rect x="9.5618%" y="373" width="1.1952%" height="15" fill="rgb(241,128,51)" fg:x="24" fg:w="3"/><text x="9.8118%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (3 samples, 1.20%)</title><rect x="9.5618%" y="357" width="1.1952%" height="15" fill="rgb(227,165,31)" fg:x="24" fg:w="3"/><text x="9.8118%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 1.20%)</title><rect x="9.5618%" y="341" width="1.1952%" height="15" fill="rgb(228,167,24)" fg:x="24" fg:w="3"/><text x="9.8118%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3 samples, 1.20%)</title><rect x="9.5618%" y="325" width="1.1952%" height="15" fill="rgb(228,143,12)" fg:x="24" fg:w="3"/><text x="9.8118%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 1.20%)</title><rect x="9.5618%" y="309" width="1.1952%" height="15" fill="rgb(249,149,8)" fg:x="24" fg:w="3"/><text x="9.8118%" y="319.50"></text></g><g><title>[libc.so.6] (2 samples, 0.80%)</title><rect x="9.9602%" y="293" width="0.7968%" height="15" fill="rgb(243,35,44)" fg:x="25" fg:w="2"/><text x="10.2102%" y="303.50"></text></g><g><title>demoparser::parsing::collect_data::insert_metadata (8 samples, 3.19%)</title><rect x="7.9681%" y="485" width="3.1873%" height="15" fill="rgb(246,89,9)" fg:x="20" fg:w="8"/><text x="8.2181%" y="495.50">dem..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (6 samples, 2.39%)</title><rect x="8.7649%" y="469" width="2.3904%" height="15" fill="rgb(233,213,13)" fg:x="22" fg:w="6"/><text x="9.0149%" y="479.50">st..</text></g><g><title>std::collections::hash::map::map_entry (1 samples, 0.40%)</title><rect x="10.7570%" y="453" width="0.3984%" height="15" fill="rgb(233,141,41)" fg:x="27" fg:w="1"/><text x="11.0070%" y="463.50"></text></g><g><title>demoparser::parsing::variants::VarVec::push_propdata (1 samples, 0.40%)</title><rect x="11.1554%" y="469" width="0.3984%" height="15" fill="rgb(239,167,4)" fg:x="28" fg:w="1"/><text x="11.4054%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.40%)</title><rect x="11.1554%" y="453" width="0.3984%" height="15" fill="rgb(209,217,16)" fg:x="28" fg:w="1"/><text x="11.4054%" y="463.50"></text></g><g><title>core::ptr::write (1 samples, 0.40%)</title><rect x="11.1554%" y="437" width="0.3984%" height="15" fill="rgb(219,88,35)" fg:x="28" fg:w="1"/><text x="11.4054%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="11.1554%" y="421" width="0.3984%" height="15" fill="rgb(220,193,23)" fg:x="28" fg:w="1"/><text x="11.4054%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="11.1554%" y="405" width="0.3984%" height="15" fill="rgb(230,90,52)" fg:x="28" fg:w="1"/><text x="11.4054%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="11.1554%" y="389" width="0.3984%" height="15" fill="rgb(252,106,19)" fg:x="28" fg:w="1"/><text x="11.4054%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="11.1554%" y="373" width="0.3984%" height="15" fill="rgb(206,74,20)" fg:x="28" fg:w="1"/><text x="11.4054%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="11.1554%" y="357" width="0.3984%" height="15" fill="rgb(230,138,44)" fg:x="28" fg:w="1"/><text x="11.4054%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="11.1554%" y="341" width="0.3984%" height="15" fill="rgb(235,182,43)" fg:x="28" fg:w="1"/><text x="11.4054%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="11.1554%" y="325" width="0.3984%" height="15" fill="rgb(242,16,51)" fg:x="28" fg:w="1"/><text x="11.4054%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="11.1554%" y="309" width="0.3984%" height="15" fill="rgb(248,9,4)" fg:x="28" fg:w="1"/><text x="11.4054%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="11.1554%" y="293" width="0.3984%" height="15" fill="rgb(210,31,22)" fg:x="28" fg:w="1"/><text x="11.4054%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="11.1554%" y="277" width="0.3984%" height="15" fill="rgb(239,54,39)" fg:x="28" fg:w="1"/><text x="11.4054%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="11.1554%" y="261" width="0.3984%" height="15" fill="rgb(230,99,41)" fg:x="28" fg:w="1"/><text x="11.4054%" y="271.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.40%)</title><rect x="11.5538%" y="437" width="0.3984%" height="15" fill="rgb(253,106,12)" fg:x="29" fg:w="1"/><text x="11.8038%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.40%)</title><rect x="11.5538%" y="421" width="0.3984%" height="15" fill="rgb(213,46,41)" fg:x="29" fg:w="1"/><text x="11.8038%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.40%)</title><rect x="11.5538%" y="405" width="0.3984%" height="15" fill="rgb(215,133,35)" fg:x="29" fg:w="1"/><text x="11.8038%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.40%)</title><rect x="11.5538%" y="389" width="0.3984%" height="15" fill="rgb(213,28,5)" fg:x="29" fg:w="1"/><text x="11.8038%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.40%)</title><rect x="11.5538%" y="373" width="0.3984%" height="15" fill="rgb(215,77,49)" fg:x="29" fg:w="1"/><text x="11.8038%" y="383.50"></text></g><g><title>core::hash::Hasher::write_str (1 samples, 0.40%)</title><rect x="11.5538%" y="357" width="0.3984%" height="15" fill="rgb(248,100,22)" fg:x="29" fg:w="1"/><text x="11.8038%" y="367.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (1 samples, 0.40%)</title><rect x="11.5538%" y="341" width="0.3984%" height="15" fill="rgb(208,67,9)" fg:x="29" fg:w="1"/><text x="11.8038%" y="351.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (1 samples, 0.40%)</title><rect x="11.5538%" y="325" width="0.3984%" height="15" fill="rgb(219,133,21)" fg:x="29" fg:w="1"/><text x="11.8038%" y="335.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2 samples, 0.80%)</title><rect x="11.5538%" y="469" width="0.7968%" height="15" fill="rgb(246,46,29)" fg:x="29" fg:w="2"/><text x="11.8038%" y="479.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.80%)</title><rect x="11.5538%" y="453" width="0.7968%" height="15" fill="rgb(246,185,52)" fg:x="29" fg:w="2"/><text x="11.8038%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.40%)</title><rect x="11.9522%" y="437" width="0.3984%" height="15" fill="rgb(252,136,11)" fg:x="30" fg:w="1"/><text x="12.2022%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.40%)</title><rect x="11.9522%" y="421" width="0.3984%" height="15" fill="rgb(219,138,53)" fg:x="30" fg:w="1"/><text x="12.2022%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.40%)</title><rect x="11.9522%" y="405" width="0.3984%" height="15" fill="rgb(211,51,23)" fg:x="30" fg:w="1"/><text x="12.2022%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.40%)</title><rect x="11.9522%" y="389" width="0.3984%" height="15" fill="rgb(247,221,28)" fg:x="30" fg:w="1"/><text x="12.2022%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.40%)</title><rect x="12.3506%" y="373" width="0.3984%" height="15" fill="rgb(251,222,45)" fg:x="31" fg:w="1"/><text x="12.6006%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.40%)</title><rect x="12.3506%" y="357" width="0.3984%" height="15" fill="rgb(217,162,53)" fg:x="31" fg:w="1"/><text x="12.6006%" y="367.50"></text></g><g><title>demoparser::parsing::collect_data::insert_propcolumn (5 samples, 1.99%)</title><rect x="11.1554%" y="485" width="1.9920%" height="15" fill="rgb(229,93,14)" fg:x="28" fg:w="5"/><text x="11.4054%" y="495.50">d..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.80%)</title><rect x="12.3506%" y="469" width="0.7968%" height="15" fill="rgb(209,67,49)" fg:x="31" fg:w="2"/><text x="12.6006%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.80%)</title><rect x="12.3506%" y="453" width="0.7968%" height="15" fill="rgb(213,87,29)" fg:x="31" fg:w="2"/><text x="12.6006%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.80%)</title><rect x="12.3506%" y="437" width="0.7968%" height="15" fill="rgb(205,151,52)" fg:x="31" fg:w="2"/><text x="12.6006%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.80%)</title><rect x="12.3506%" y="421" width="0.7968%" height="15" fill="rgb(253,215,39)" fg:x="31" fg:w="2"/><text x="12.6006%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.80%)</title><rect x="12.3506%" y="405" width="0.7968%" height="15" fill="rgb(221,220,41)" fg:x="31" fg:w="2"/><text x="12.6006%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.80%)</title><rect x="12.3506%" y="389" width="0.7968%" height="15" fill="rgb(218,133,21)" fg:x="31" fg:w="2"/><text x="12.6006%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.40%)</title><rect x="12.7490%" y="373" width="0.3984%" height="15" fill="rgb(221,193,43)" fg:x="32" fg:w="1"/><text x="12.9990%" y="383.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.40%)</title><rect x="12.7490%" y="357" width="0.3984%" height="15" fill="rgb(240,128,52)" fg:x="32" fg:w="1"/><text x="12.9990%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 0.40%)</title><rect x="12.7490%" y="341" width="0.3984%" height="15" fill="rgb(253,114,12)" fg:x="32" fg:w="1"/><text x="12.9990%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.40%)</title><rect x="12.7490%" y="325" width="0.3984%" height="15" fill="rgb(215,223,47)" fg:x="32" fg:w="1"/><text x="12.9990%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.40%)</title><rect x="12.7490%" y="309" width="0.3984%" height="15" fill="rgb(248,225,23)" fg:x="32" fg:w="1"/><text x="12.9990%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.40%)</title><rect x="12.7490%" y="293" width="0.3984%" height="15" fill="rgb(250,108,0)" fg:x="32" fg:w="1"/><text x="12.9990%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.40%)</title><rect x="12.7490%" y="277" width="0.3984%" height="15" fill="rgb(228,208,7)" fg:x="32" fg:w="1"/><text x="12.9990%" y="287.50"></text></g><g><title>demoparser::parsing::collect_data::&lt;impl demoparser::parsing::parser::Demo&gt;::collect_player_data (20 samples, 7.97%)</title><rect x="5.5777%" y="501" width="7.9681%" height="15" fill="rgb(244,45,10)" fg:x="14" fg:w="20"/><text x="5.8277%" y="511.50">demoparser:..</text></g><g><title>demoparser::parsing::collect_data::weap_id_from_ent (1 samples, 0.40%)</title><rect x="13.1474%" y="485" width="0.3984%" height="15" fill="rgb(207,125,25)" fg:x="33" fg:w="1"/><text x="13.3974%" y="495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.40%)</title><rect x="13.1474%" y="469" width="0.3984%" height="15" fill="rgb(210,195,18)" fg:x="33" fg:w="1"/><text x="13.3974%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.40%)</title><rect x="13.1474%" y="453" width="0.3984%" height="15" fill="rgb(249,80,12)" fg:x="33" fg:w="1"/><text x="13.3974%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.40%)</title><rect x="13.1474%" y="437" width="0.3984%" height="15" fill="rgb(221,65,9)" fg:x="33" fg:w="1"/><text x="13.3974%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.40%)</title><rect x="13.1474%" y="421" width="0.3984%" height="15" fill="rgb(235,49,36)" fg:x="33" fg:w="1"/><text x="13.3974%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.40%)</title><rect x="13.1474%" y="405" width="0.3984%" height="15" fill="rgb(225,32,20)" fg:x="33" fg:w="1"/><text x="13.3974%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.40%)</title><rect x="13.1474%" y="389" width="0.3984%" height="15" fill="rgb(215,141,46)" fg:x="33" fg:w="1"/><text x="13.3974%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.40%)</title><rect x="13.1474%" y="373" width="0.3984%" height="15" fill="rgb(250,160,47)" fg:x="33" fg:w="1"/><text x="13.3974%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.40%)</title><rect x="13.1474%" y="357" width="0.3984%" height="15" fill="rgb(216,222,40)" fg:x="33" fg:w="1"/><text x="13.3974%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.80%)</title><rect x="13.5458%" y="421" width="0.7968%" height="15" fill="rgb(234,217,39)" fg:x="34" fg:w="2"/><text x="13.7958%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.80%)</title><rect x="13.5458%" y="405" width="0.7968%" height="15" fill="rgb(207,178,40)" fg:x="34" fg:w="2"/><text x="13.7958%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.80%)</title><rect x="13.5458%" y="389" width="0.7968%" height="15" fill="rgb(221,136,13)" fg:x="34" fg:w="2"/><text x="13.7958%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.80%)</title><rect x="13.5458%" y="373" width="0.7968%" height="15" fill="rgb(249,199,10)" fg:x="34" fg:w="2"/><text x="13.7958%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.80%)</title><rect x="13.5458%" y="357" width="0.7968%" height="15" fill="rgb(249,222,13)" fg:x="34" fg:w="2"/><text x="13.7958%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.80%)</title><rect x="13.5458%" y="341" width="0.7968%" height="15" fill="rgb(244,185,38)" fg:x="34" fg:w="2"/><text x="13.7958%" y="351.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.80%)</title><rect x="13.5458%" y="325" width="0.7968%" height="15" fill="rgb(236,202,9)" fg:x="34" fg:w="2"/><text x="13.7958%" y="335.50"></text></g><g><title>_mi_heap_realloc_zero (2 samples, 0.80%)</title><rect x="13.5458%" y="309" width="0.7968%" height="15" fill="rgb(250,229,37)" fg:x="34" fg:w="2"/><text x="13.7958%" y="319.50"></text></g><g><title>_mi_memcpy_aligned (2 samples, 0.80%)</title><rect x="13.5458%" y="293" width="0.7968%" height="15" fill="rgb(206,174,23)" fg:x="34" fg:w="2"/><text x="13.7958%" y="303.50"></text></g><g><title>_mi_memcpy (2 samples, 0.80%)</title><rect x="13.5458%" y="277" width="0.7968%" height="15" fill="rgb(211,33,43)" fg:x="34" fg:w="2"/><text x="13.7958%" y="287.50"></text></g><g><title>memcpy (2 samples, 0.80%)</title><rect x="13.5458%" y="261" width="0.7968%" height="15" fill="rgb(245,58,50)" fg:x="34" fg:w="2"/><text x="13.7958%" y="271.50"></text></g><g><title>[libc.so.6] (2 samples, 0.80%)</title><rect x="13.5458%" y="245" width="0.7968%" height="15" fill="rgb(244,68,36)" fg:x="34" fg:w="2"/><text x="13.7958%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.80%)</title><rect x="13.5458%" y="229" width="0.7968%" height="15" fill="rgb(232,229,15)" fg:x="34" fg:w="2"/><text x="13.7958%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.40%)</title><rect x="14.3426%" y="389" width="0.3984%" height="15" fill="rgb(254,30,23)" fg:x="36" fg:w="1"/><text x="14.5926%" y="399.50"></text></g><g><title>core::ptr::write (1 samples, 0.40%)</title><rect x="14.3426%" y="373" width="0.3984%" height="15" fill="rgb(235,160,14)" fg:x="36" fg:w="1"/><text x="14.5926%" y="383.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (2 samples, 0.80%)</title><rect x="14.3426%" y="421" width="0.7968%" height="15" fill="rgb(212,155,44)" fg:x="36" fg:w="2"/><text x="14.5926%" y="431.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (2 samples, 0.80%)</title><rect x="14.3426%" y="405" width="0.7968%" height="15" fill="rgb(226,2,50)" fg:x="36" fg:w="2"/><text x="14.5926%" y="415.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (1 samples, 0.40%)</title><rect x="14.7410%" y="389" width="0.3984%" height="15" fill="rgb(234,177,6)" fg:x="37" fg:w="1"/><text x="14.9910%" y="399.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (1 samples, 0.40%)</title><rect x="14.7410%" y="373" width="0.3984%" height="15" fill="rgb(217,24,9)" fg:x="37" fg:w="1"/><text x="14.9910%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (1 samples, 0.40%)</title><rect x="14.7410%" y="357" width="0.3984%" height="15" fill="rgb(220,13,46)" fg:x="37" fg:w="1"/><text x="14.9910%" y="367.50"></text></g><g><title>alloc::slice::merge_sort (1 samples, 0.40%)</title><rect x="14.7410%" y="341" width="0.3984%" height="15" fill="rgb(239,221,27)" fg:x="37" fg:w="1"/><text x="14.9910%" y="351.50"></text></g><g><title>alloc::slice::merge (1 samples, 0.40%)</title><rect x="14.7410%" y="325" width="0.3984%" height="15" fill="rgb(222,198,25)" fg:x="37" fg:w="1"/><text x="14.9910%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.40%)</title><rect x="14.7410%" y="309" width="0.3984%" height="15" fill="rgb(211,99,13)" fg:x="37" fg:w="1"/><text x="14.9910%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.40%)</title><rect x="14.7410%" y="293" width="0.3984%" height="15" fill="rgb(232,111,31)" fg:x="37" fg:w="1"/><text x="14.9910%" y="303.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::flatten_dt (5 samples, 1.99%)</title><rect x="13.5458%" y="469" width="1.9920%" height="15" fill="rgb(245,82,37)" fg:x="34" fg:w="5"/><text x="13.7958%" y="479.50">d..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (5 samples, 1.99%)</title><rect x="13.5458%" y="453" width="1.9920%" height="15" fill="rgb(227,149,46)" fg:x="34" fg:w="5"/><text x="13.7958%" y="463.50">d..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (5 samples, 1.99%)</title><rect x="13.5458%" y="437" width="1.9920%" height="15" fill="rgb(218,36,50)" fg:x="34" fg:w="5"/><text x="13.7958%" y="447.50">d..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::is_prop_excl (1 samples, 0.40%)</title><rect x="15.1394%" y="421" width="0.3984%" height="15" fill="rgb(226,80,48)" fg:x="38" fg:w="1"/><text x="15.3894%" y="431.50"></text></g><g><title>csgoproto::netmessages::CSVCMsg_SendTable::net_table_name (1 samples, 0.40%)</title><rect x="15.1394%" y="405" width="0.3984%" height="15" fill="rgb(238,224,15)" fg:x="38" fg:w="1"/><text x="15.3894%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.40%)</title><rect x="15.1394%" y="389" width="0.3984%" height="15" fill="rgb(241,136,10)" fg:x="38" fg:w="1"/><text x="15.3894%" y="399.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_datatable (6 samples, 2.39%)</title><rect x="13.5458%" y="485" width="2.3904%" height="15" fill="rgb(208,32,45)" fg:x="34" fg:w="6"/><text x="13.7958%" y="495.50">de..</text></g><g><title>protobuf::message::Message::parse_from_bytes (1 samples, 0.40%)</title><rect x="15.5378%" y="469" width="0.3984%" height="15" fill="rgb(207,135,9)" fg:x="39" fg:w="1"/><text x="15.7878%" y="479.50"></text></g><g><title>protobuf::message::Message::parse_from (1 samples, 0.40%)</title><rect x="15.5378%" y="453" width="0.3984%" height="15" fill="rgb(206,86,44)" fg:x="39" fg:w="1"/><text x="15.7878%" y="463.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as protobuf::message::Message&gt;::merge_from (1 samples, 0.40%)</title><rect x="15.5378%" y="437" width="0.3984%" height="15" fill="rgb(245,177,15)" fg:x="39" fg:w="1"/><text x="15.7878%" y="447.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (1 samples, 0.40%)</title><rect x="15.5378%" y="421" width="0.3984%" height="15" fill="rgb(206,64,50)" fg:x="39" fg:w="1"/><text x="15.7878%" y="431.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (1 samples, 0.40%)</title><rect x="15.5378%" y="405" width="0.3984%" height="15" fill="rgb(234,36,40)" fg:x="39" fg:w="1"/><text x="15.7878%" y="415.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as protobuf::message::Message&gt;::merge_from (1 samples, 0.40%)</title><rect x="15.5378%" y="389" width="0.3984%" height="15" fill="rgb(213,64,8)" fg:x="39" fg:w="1"/><text x="15.7878%" y="399.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (1 samples, 0.40%)</title><rect x="15.5378%" y="373" width="0.3984%" height="15" fill="rgb(210,75,36)" fg:x="39" fg:w="1"/><text x="15.7878%" y="383.50"></text></g><g><title>__rg_alloc (1 samples, 0.40%)</title><rect x="19.1235%" y="245" width="0.3984%" height="15" fill="rgb(229,88,21)" fg:x="48" fg:w="1"/><text x="19.3735%" y="255.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.40%)</title><rect x="19.1235%" y="229" width="0.3984%" height="15" fill="rgb(252,204,47)" fg:x="48" fg:w="1"/><text x="19.3735%" y="239.50"></text></g><g><title>mimalloc::may_use_unaligned_api (1 samples, 0.40%)</title><rect x="19.1235%" y="213" width="0.3984%" height="15" fill="rgb(208,77,27)" fg:x="48" fg:w="1"/><text x="19.3735%" y="223.50"></text></g><g><title>mi_get_default_heap (1 samples, 0.40%)</title><rect x="19.5219%" y="229" width="0.3984%" height="15" fill="rgb(221,76,26)" fg:x="49" fg:w="1"/><text x="19.7719%" y="239.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (11 samples, 4.38%)</title><rect x="17.5299%" y="453" width="4.3825%" height="15" fill="rgb(225,139,18)" fg:x="44" fg:w="11"/><text x="17.7799%" y="463.50">&lt;allo..</text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (11 samples, 4.38%)</title><rect x="17.5299%" y="437" width="4.3825%" height="15" fill="rgb(230,137,11)" fg:x="44" fg:w="11"/><text x="17.7799%" y="447.50">&lt;T as..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 4.38%)</title><rect x="17.5299%" y="421" width="4.3825%" height="15" fill="rgb(212,28,1)" fg:x="44" fg:w="11"/><text x="17.7799%" y="431.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 3.59%)</title><rect x="18.3267%" y="405" width="3.5857%" height="15" fill="rgb(248,164,17)" fg:x="46" fg:w="9"/><text x="18.5767%" y="415.50">&lt;all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 3.59%)</title><rect x="18.3267%" y="389" width="3.5857%" height="15" fill="rgb(222,171,42)" fg:x="46" fg:w="9"/><text x="18.5767%" y="399.50">allo..</text></g><g><title>alloc::slice::hack::to_vec (9 samples, 3.59%)</title><rect x="18.3267%" y="373" width="3.5857%" height="15" fill="rgb(243,84,45)" fg:x="46" fg:w="9"/><text x="18.5767%" y="383.50">allo..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 3.59%)</title><rect x="18.3267%" y="357" width="3.5857%" height="15" fill="rgb(252,49,23)" fg:x="46" fg:w="9"/><text x="18.5767%" y="367.50">&lt;T a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 3.59%)</title><rect x="18.3267%" y="341" width="3.5857%" height="15" fill="rgb(215,19,7)" fg:x="46" fg:w="9"/><text x="18.5767%" y="351.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 3.59%)</title><rect x="18.3267%" y="325" width="3.5857%" height="15" fill="rgb(238,81,41)" fg:x="46" fg:w="9"/><text x="18.5767%" y="335.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 3.59%)</title><rect x="18.3267%" y="309" width="3.5857%" height="15" fill="rgb(210,199,37)" fg:x="46" fg:w="9"/><text x="18.5767%" y="319.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 2.79%)</title><rect x="19.1235%" y="293" width="2.7888%" height="15" fill="rgb(244,192,49)" fg:x="48" fg:w="7"/><text x="19.3735%" y="303.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 2.79%)</title><rect x="19.1235%" y="277" width="2.7888%" height="15" fill="rgb(226,211,11)" fg:x="48" fg:w="7"/><text x="19.3735%" y="287.50">al..</text></g><g><title>alloc::alloc::alloc (7 samples, 2.79%)</title><rect x="19.1235%" y="261" width="2.7888%" height="15" fill="rgb(236,162,54)" fg:x="48" fg:w="7"/><text x="19.3735%" y="271.50">al..</text></g><g><title>mi_malloc (6 samples, 2.39%)</title><rect x="19.5219%" y="245" width="2.3904%" height="15" fill="rgb(220,229,9)" fg:x="49" fg:w="6"/><text x="19.7719%" y="255.50">mi..</text></g><g><title>mi_heap_malloc (5 samples, 1.99%)</title><rect x="19.9203%" y="229" width="1.9920%" height="15" fill="rgb(250,87,22)" fg:x="50" fg:w="5"/><text x="20.1703%" y="239.50">m..</text></g><g><title>mi_heap_malloc_small (5 samples, 1.99%)</title><rect x="19.9203%" y="213" width="1.9920%" height="15" fill="rgb(239,43,17)" fg:x="50" fg:w="5"/><text x="20.1703%" y="223.50">m..</text></g><g><title>_mi_page_malloc (5 samples, 1.99%)</title><rect x="19.9203%" y="197" width="1.9920%" height="15" fill="rgb(231,177,25)" fg:x="50" fg:w="5"/><text x="20.1703%" y="207.50">_..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.40%)</title><rect x="21.9124%" y="453" width="0.3984%" height="15" fill="rgb(219,179,1)" fg:x="55" fg:w="1"/><text x="22.1624%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.40%)</title><rect x="21.9124%" y="437" width="0.3984%" height="15" fill="rgb(238,219,53)" fg:x="55" fg:w="1"/><text x="22.1624%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.40%)</title><rect x="22.3108%" y="453" width="0.3984%" height="15" fill="rgb(232,167,36)" fg:x="56" fg:w="1"/><text x="22.5608%" y="463.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.40%)</title><rect x="22.3108%" y="437" width="0.3984%" height="15" fill="rgb(244,19,51)" fg:x="56" fg:w="1"/><text x="22.5608%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.80%)</title><rect x="22.7092%" y="293" width="0.7968%" height="15" fill="rgb(224,6,22)" fg:x="57" fg:w="2"/><text x="22.9592%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.80%)</title><rect x="22.7092%" y="277" width="0.7968%" height="15" fill="rgb(224,145,5)" fg:x="57" fg:w="2"/><text x="22.9592%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.80%)</title><rect x="22.7092%" y="261" width="0.7968%" height="15" fill="rgb(234,130,49)" fg:x="57" fg:w="2"/><text x="22.9592%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.80%)</title><rect x="22.7092%" y="245" width="0.7968%" height="15" fill="rgb(254,6,2)" fg:x="57" fg:w="2"/><text x="22.9592%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.80%)</title><rect x="22.7092%" y="229" width="0.7968%" height="15" fill="rgb(208,96,46)" fg:x="57" fg:w="2"/><text x="22.9592%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.80%)</title><rect x="22.7092%" y="213" width="0.7968%" height="15" fill="rgb(239,3,39)" fg:x="57" fg:w="2"/><text x="22.9592%" y="223.50"></text></g><g><title>mi_free (2 samples, 0.80%)</title><rect x="22.7092%" y="197" width="0.7968%" height="15" fill="rgb(233,210,1)" fg:x="57" fg:w="2"/><text x="22.9592%" y="207.50"></text></g><g><title>__rg_dealloc (1 samples, 0.40%)</title><rect x="23.5060%" y="181" width="0.3984%" height="15" fill="rgb(244,137,37)" fg:x="59" fg:w="1"/><text x="23.7560%" y="191.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.40%)</title><rect x="23.5060%" y="165" width="0.3984%" height="15" fill="rgb(240,136,2)" fg:x="59" fg:w="1"/><text x="23.7560%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u32,demoparser::parsing::entities::Entity)&gt; (4 samples, 1.59%)</title><rect x="22.7092%" y="453" width="1.5936%" height="15" fill="rgb(239,18,37)" fg:x="57" fg:w="4"/><text x="22.9592%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::entities::Entity&gt; (4 samples, 1.59%)</title><rect x="22.7092%" y="437" width="1.5936%" height="15" fill="rgb(218,185,22)" fg:x="57" fg:w="4"/><text x="22.9592%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,demoparser::parsing::variants::PropAtom,ahash::random_state::RandomState&gt;&gt; (4 samples, 1.59%)</title><rect x="22.7092%" y="421" width="1.5936%" height="15" fill="rgb(225,218,4)" fg:x="57" fg:w="4"/><text x="22.9592%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,demoparser::parsing::variants::PropAtom,ahash::random_state::RandomState&gt;&gt; (4 samples, 1.59%)</title><rect x="22.7092%" y="405" width="1.5936%" height="15" fill="rgb(230,182,32)" fg:x="57" fg:w="4"/><text x="22.9592%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,demoparser::parsing::variants::PropAtom)&gt;&gt; (4 samples, 1.59%)</title><rect x="22.7092%" y="389" width="1.5936%" height="15" fill="rgb(242,56,43)" fg:x="57" fg:w="4"/><text x="22.9592%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 1.59%)</title><rect x="22.7092%" y="373" width="1.5936%" height="15" fill="rgb(233,99,24)" fg:x="57" fg:w="4"/><text x="22.9592%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (4 samples, 1.59%)</title><rect x="22.7092%" y="357" width="1.5936%" height="15" fill="rgb(234,209,42)" fg:x="57" fg:w="4"/><text x="22.9592%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4 samples, 1.59%)</title><rect x="22.7092%" y="341" width="1.5936%" height="15" fill="rgb(227,7,12)" fg:x="57" fg:w="4"/><text x="22.9592%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (4 samples, 1.59%)</title><rect x="22.7092%" y="325" width="1.5936%" height="15" fill="rgb(245,203,43)" fg:x="57" fg:w="4"/><text x="22.9592%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,demoparser::parsing::variants::PropAtom)&gt; (4 samples, 1.59%)</title><rect x="22.7092%" y="309" width="1.5936%" height="15" fill="rgb(238,205,33)" fg:x="57" fg:w="4"/><text x="22.9592%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::PropAtom&gt; (2 samples, 0.80%)</title><rect x="23.5060%" y="293" width="0.7968%" height="15" fill="rgb(231,56,7)" fg:x="59" fg:w="2"/><text x="23.7560%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.80%)</title><rect x="23.5060%" y="277" width="0.7968%" height="15" fill="rgb(244,186,29)" fg:x="59" fg:w="2"/><text x="23.7560%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.80%)</title><rect x="23.5060%" y="261" width="0.7968%" height="15" fill="rgb(234,111,31)" fg:x="59" fg:w="2"/><text x="23.7560%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.80%)</title><rect x="23.5060%" y="245" width="0.7968%" height="15" fill="rgb(241,149,10)" fg:x="59" fg:w="2"/><text x="23.7560%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.80%)</title><rect x="23.5060%" y="229" width="0.7968%" height="15" fill="rgb(249,206,44)" fg:x="59" fg:w="2"/><text x="23.7560%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.80%)</title><rect x="23.5060%" y="213" width="0.7968%" height="15" fill="rgb(251,153,30)" fg:x="59" fg:w="2"/><text x="23.7560%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.80%)</title><rect x="23.5060%" y="197" width="0.7968%" height="15" fill="rgb(239,152,38)" fg:x="59" fg:w="2"/><text x="23.7560%" y="207.50"></text></g><g><title>mi_free (1 samples, 0.40%)</title><rect x="23.9044%" y="181" width="0.3984%" height="15" fill="rgb(249,139,47)" fg:x="60" fg:w="1"/><text x="24.1544%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;demoparser::parsing::variants::PropAtom&gt;&gt; (1 samples, 0.40%)</title><rect x="24.3028%" y="453" width="0.3984%" height="15" fill="rgb(244,64,35)" fg:x="61" fg:w="1"/><text x="24.5528%" y="463.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.40%)</title><rect x="24.7012%" y="437" width="0.3984%" height="15" fill="rgb(216,46,15)" fg:x="62" fg:w="1"/><text x="24.9512%" y="447.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::TryFrom&lt;u32&gt; for u16&gt;::try_from (1 samples, 0.40%)</title><rect x="24.7012%" y="421" width="0.3984%" height="15" fill="rgb(250,74,19)" fg:x="62" fg:w="1"/><text x="24.9512%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.40%)</title><rect x="25.8964%" y="325" width="0.3984%" height="15" fill="rgb(249,42,33)" fg:x="65" fg:w="1"/><text x="26.1464%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.40%)</title><rect x="26.2948%" y="325" width="0.3984%" height="15" fill="rgb(242,149,17)" fg:x="66" fg:w="1"/><text x="26.5448%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.40%)</title><rect x="26.2948%" y="309" width="0.3984%" height="15" fill="rgb(244,29,21)" fg:x="66" fg:w="1"/><text x="26.5448%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (2 samples, 0.80%)</title><rect x="26.6932%" y="325" width="0.7968%" height="15" fill="rgb(220,130,37)" fg:x="67" fg:w="2"/><text x="26.9432%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (7 samples, 2.79%)</title><rect x="25.0996%" y="437" width="2.7888%" height="15" fill="rgb(211,67,2)" fg:x="63" fg:w="7"/><text x="25.3496%" y="447.50">&lt;s..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (7 samples, 2.79%)</title><rect x="25.0996%" y="421" width="2.7888%" height="15" fill="rgb(235,68,52)" fg:x="63" fg:w="7"/><text x="25.3496%" y="431.50">st..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (7 samples, 2.79%)</title><rect x="25.0996%" y="405" width="2.7888%" height="15" fill="rgb(246,142,3)" fg:x="63" fg:w="7"/><text x="25.3496%" y="415.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7 samples, 2.79%)</title><rect x="25.0996%" y="389" width="2.7888%" height="15" fill="rgb(241,25,7)" fg:x="63" fg:w="7"/><text x="25.3496%" y="399.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (7 samples, 2.79%)</title><rect x="25.0996%" y="373" width="2.7888%" height="15" fill="rgb(242,119,39)" fg:x="63" fg:w="7"/><text x="25.3496%" y="383.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7 samples, 2.79%)</title><rect x="25.0996%" y="357" width="2.7888%" height="15" fill="rgb(241,98,45)" fg:x="63" fg:w="7"/><text x="25.3496%" y="367.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (7 samples, 2.79%)</title><rect x="25.0996%" y="341" width="2.7888%" height="15" fill="rgb(254,28,30)" fg:x="63" fg:w="7"/><text x="25.3496%" y="351.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.40%)</title><rect x="27.4900%" y="325" width="0.3984%" height="15" fill="rgb(241,142,54)" fg:x="69" fg:w="1"/><text x="27.7400%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.40%)</title><rect x="27.4900%" y="309" width="0.3984%" height="15" fill="rgb(222,85,15)" fg:x="69" fg:w="1"/><text x="27.7400%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 1.20%)</title><rect x="32.2709%" y="421" width="1.1952%" height="15" fill="rgb(210,85,47)" fg:x="81" fg:w="3"/><text x="32.5209%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 1.20%)</title><rect x="32.2709%" y="405" width="1.1952%" height="15" fill="rgb(224,206,25)" fg:x="81" fg:w="3"/><text x="32.5209%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.80%)</title><rect x="33.4661%" y="421" width="0.7968%" height="15" fill="rgb(243,201,19)" fg:x="84" fg:w="2"/><text x="33.7161%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.80%)</title><rect x="33.4661%" y="405" width="0.7968%" height="15" fill="rgb(236,59,4)" fg:x="84" fg:w="2"/><text x="33.7161%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.80%)</title><rect x="33.4661%" y="389" width="0.7968%" height="15" fill="rgb(254,179,45)" fg:x="84" fg:w="2"/><text x="33.7161%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.80%)</title><rect x="34.2629%" y="421" width="0.7968%" height="15" fill="rgb(226,14,10)" fg:x="86" fg:w="2"/><text x="34.5129%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.80%)</title><rect x="34.2629%" y="405" width="0.7968%" height="15" fill="rgb(244,27,41)" fg:x="86" fg:w="2"/><text x="34.5129%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::PropData&gt; (4 samples, 1.59%)</title><rect x="35.0598%" y="421" width="1.5936%" height="15" fill="rgb(235,35,32)" fg:x="88" fg:w="4"/><text x="35.3098%" y="431.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_special_float (7 samples, 2.79%)</title><rect x="54.5817%" y="389" width="2.7888%" height="15" fill="rgb(218,68,31)" fg:x="137" fg:w="7"/><text x="54.8317%" y="399.50">de..</text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_f32 (4 samples, 1.59%)</title><rect x="55.7769%" y="373" width="1.5936%" height="15" fill="rgb(207,120,37)" fg:x="140" fg:w="4"/><text x="56.0269%" y="383.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_u32 (4 samples, 1.59%)</title><rect x="55.7769%" y="357" width="1.5936%" height="15" fill="rgb(227,98,0)" fg:x="140" fg:w="4"/><text x="56.0269%" y="367.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (4 samples, 1.59%)</title><rect x="55.7769%" y="341" width="1.5936%" height="15" fill="rgb(207,7,3)" fg:x="140" fg:w="4"/><text x="56.0269%" y="351.50"></text></g><g><title>bitter::LittleEndianReader::refill (2 samples, 0.80%)</title><rect x="56.5737%" y="325" width="0.7968%" height="15" fill="rgb(206,98,19)" fg:x="142" fg:w="2"/><text x="56.8237%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub (1 samples, 0.40%)</title><rect x="56.9721%" y="309" width="0.3984%" height="15" fill="rgb(217,5,26)" fg:x="143" fg:w="1"/><text x="57.2221%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.40%)</title><rect x="56.9721%" y="293" width="0.3984%" height="15" fill="rgb(235,190,38)" fg:x="143" fg:w="1"/><text x="57.2221%" y="303.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_float (31 samples, 12.35%)</title><rect x="46.2151%" y="405" width="12.3506%" height="15" fill="rgb(247,86,24)" fg:x="116" fg:w="31"/><text x="46.4651%" y="415.50">demoparser::parsin..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (3 samples, 1.20%)</title><rect x="57.3705%" y="389" width="1.1952%" height="15" fill="rgb(205,101,16)" fg:x="144" fg:w="3"/><text x="57.6205%" y="399.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (3 samples, 1.20%)</title><rect x="57.3705%" y="373" width="1.1952%" height="15" fill="rgb(246,168,33)" fg:x="144" fg:w="3"/><text x="57.6205%" y="383.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (1 samples, 0.40%)</title><rect x="58.9641%" y="389" width="0.3984%" height="15" fill="rgb(231,114,1)" fg:x="148" fg:w="1"/><text x="59.2141%" y="399.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.40%)</title><rect x="58.9641%" y="373" width="0.3984%" height="15" fill="rgb(207,184,53)" fg:x="148" fg:w="1"/><text x="59.2141%" y="383.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_int (3 samples, 1.20%)</title><rect x="58.5657%" y="405" width="1.1952%" height="15" fill="rgb(224,95,51)" fg:x="147" fg:w="3"/><text x="58.8157%" y="415.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_sbit_long (1 samples, 0.40%)</title><rect x="59.3625%" y="389" width="0.3984%" height="15" fill="rgb(212,188,45)" fg:x="149" fg:w="1"/><text x="59.6125%" y="399.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_vec (3 samples, 1.20%)</title><rect x="59.7610%" y="405" width="1.1952%" height="15" fill="rgb(223,154,38)" fg:x="150" fg:w="3"/><text x="60.0110%" y="415.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_float (3 samples, 1.20%)</title><rect x="59.7610%" y="389" width="1.1952%" height="15" fill="rgb(251,22,52)" fg:x="150" fg:w="3"/><text x="60.0110%" y="399.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_special_float (2 samples, 0.80%)</title><rect x="60.1594%" y="373" width="0.7968%" height="15" fill="rgb(229,209,22)" fg:x="151" fg:w="2"/><text x="60.4094%" y="383.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_bit_coord (2 samples, 0.80%)</title><rect x="60.1594%" y="357" width="0.7968%" height="15" fill="rgb(234,138,34)" fg:x="151" fg:w="2"/><text x="60.4094%" y="367.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (1 samples, 0.40%)</title><rect x="60.5578%" y="341" width="0.3984%" height="15" fill="rgb(212,95,11)" fg:x="152" fg:w="1"/><text x="60.8078%" y="351.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.40%)</title><rect x="60.5578%" y="325" width="0.3984%" height="15" fill="rgb(240,179,47)" fg:x="152" fg:w="1"/><text x="60.8078%" y="335.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode (65 samples, 25.90%)</title><rect x="36.6534%" y="421" width="25.8964%" height="15" fill="rgb(240,163,11)" fg:x="92" fg:w="65"/><text x="36.9034%" y="431.50">demoparser::parsing::read_bits::MyBitread..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_vec_xy (4 samples, 1.59%)</title><rect x="60.9562%" y="405" width="1.5936%" height="15" fill="rgb(236,37,12)" fg:x="153" fg:w="4"/><text x="61.2062%" y="415.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_float (4 samples, 1.59%)</title><rect x="60.9562%" y="389" width="1.5936%" height="15" fill="rgb(232,164,16)" fg:x="153" fg:w="4"/><text x="61.2062%" y="399.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_special_float (2 samples, 0.80%)</title><rect x="61.7530%" y="373" width="0.7968%" height="15" fill="rgb(244,205,15)" fg:x="155" fg:w="2"/><text x="62.0030%" y="383.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_f32 (1 samples, 0.40%)</title><rect x="62.1514%" y="357" width="0.3984%" height="15" fill="rgb(223,117,47)" fg:x="156" fg:w="1"/><text x="62.4014%" y="367.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_u32 (1 samples, 0.40%)</title><rect x="62.1514%" y="341" width="0.3984%" height="15" fill="rgb(244,107,35)" fg:x="156" fg:w="1"/><text x="62.4014%" y="351.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.40%)</title><rect x="62.1514%" y="325" width="0.3984%" height="15" fill="rgb(205,140,8)" fg:x="156" fg:w="1"/><text x="62.4014%" y="335.50"></text></g><g><title>bitter::LittleEndianReader::refill (1 samples, 0.40%)</title><rect x="62.1514%" y="309" width="0.3984%" height="15" fill="rgb(228,84,46)" fg:x="156" fg:w="1"/><text x="62.4014%" y="319.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_boolie (3 samples, 1.20%)</title><rect x="65.3386%" y="405" width="1.1952%" height="15" fill="rgb(254,188,9)" fg:x="164" fg:w="3"/><text x="65.5886%" y="415.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bit (3 samples, 1.20%)</title><rect x="65.3386%" y="389" width="1.1952%" height="15" fill="rgb(206,112,54)" fg:x="164" fg:w="3"/><text x="65.5886%" y="399.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (3 samples, 1.20%)</title><rect x="65.3386%" y="373" width="1.1952%" height="15" fill="rgb(216,84,49)" fg:x="164" fg:w="3"/><text x="65.5886%" y="383.50"></text></g><g><title>bitter::LittleEndianReader::refill (1 samples, 0.40%)</title><rect x="66.1355%" y="357" width="0.3984%" height="15" fill="rgb(214,194,35)" fg:x="166" fg:w="1"/><text x="66.3855%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.40%)</title><rect x="66.1355%" y="341" width="0.3984%" height="15" fill="rgb(249,28,3)" fg:x="166" fg:w="1"/><text x="66.3855%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.40%)</title><rect x="66.1355%" y="325" width="0.3984%" height="15" fill="rgb(222,56,52)" fg:x="166" fg:w="1"/><text x="66.3855%" y="335.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_inx (20 samples, 7.97%)</title><rect x="62.5498%" y="421" width="7.9681%" height="15" fill="rgb(245,217,50)" fg:x="157" fg:w="20"/><text x="62.7998%" y="431.50">demoparser:..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (10 samples, 3.98%)</title><rect x="66.5339%" y="405" width="3.9841%" height="15" fill="rgb(213,201,24)" fg:x="167" fg:w="10"/><text x="66.7839%" y="415.50">demo..</text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (10 samples, 3.98%)</title><rect x="66.5339%" y="389" width="3.9841%" height="15" fill="rgb(248,116,28)" fg:x="167" fg:w="10"/><text x="66.7839%" y="399.50">&lt;bit..</text></g><g><title>demoparser::parsing::entities::update_entity (116 samples, 46.22%)</title><rect x="24.7012%" y="453" width="46.2151%" height="15" fill="rgb(219,72,43)" fg:x="62" fg:w="116"/><text x="24.9512%" y="463.50">demoparser::parsing::entities::update_entity</text></g><g><title>demoparser::parsing::entities::parse_ent_props (108 samples, 43.03%)</title><rect x="27.8884%" y="437" width="43.0279%" height="15" fill="rgb(209,138,14)" fg:x="70" fg:w="108"/><text x="28.1384%" y="447.50">demoparser::parsing::entities::parse_ent_props</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.40%)</title><rect x="70.5179%" y="421" width="0.3984%" height="15" fill="rgb(222,18,33)" fg:x="177" fg:w="1"/><text x="70.7679%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.40%)</title><rect x="70.5179%" y="405" width="0.3984%" height="15" fill="rgb(213,199,7)" fg:x="177" fg:w="1"/><text x="70.7679%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.40%)</title><rect x="70.5179%" y="389" width="0.3984%" height="15" fill="rgb(250,110,10)" fg:x="177" fg:w="1"/><text x="70.7679%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.40%)</title><rect x="70.5179%" y="373" width="0.3984%" height="15" fill="rgb(248,123,6)" fg:x="177" fg:w="1"/><text x="70.7679%" y="383.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_boolie (2 samples, 0.80%)</title><rect x="70.9163%" y="453" width="0.7968%" height="15" fill="rgb(206,91,31)" fg:x="178" fg:w="2"/><text x="71.1663%" y="463.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bit (2 samples, 0.80%)</title><rect x="70.9163%" y="437" width="0.7968%" height="15" fill="rgb(211,154,13)" fg:x="178" fg:w="2"/><text x="71.1663%" y="447.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (2 samples, 0.80%)</title><rect x="70.9163%" y="421" width="0.7968%" height="15" fill="rgb(225,148,7)" fg:x="178" fg:w="2"/><text x="71.1663%" y="431.50"></text></g><g><title>bitter::LittleEndianReader::read_bits_eof (1 samples, 0.40%)</title><rect x="71.3147%" y="405" width="0.3984%" height="15" fill="rgb(220,160,43)" fg:x="179" fg:w="1"/><text x="71.5647%" y="415.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_u_bit_var (4 samples, 1.59%)</title><rect x="71.7131%" y="453" width="1.5936%" height="15" fill="rgb(213,52,39)" fg:x="180" fg:w="4"/><text x="71.9631%" y="463.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (3 samples, 1.20%)</title><rect x="72.1116%" y="437" width="1.1952%" height="15" fill="rgb(243,137,7)" fg:x="181" fg:w="3"/><text x="72.3616%" y="447.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (3 samples, 1.20%)</title><rect x="72.1116%" y="421" width="1.1952%" height="15" fill="rgb(230,79,13)" fg:x="181" fg:w="3"/><text x="72.3616%" y="431.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (2 samples, 0.80%)</title><rect x="74.1036%" y="389" width="0.7968%" height="15" fill="rgb(247,105,23)" fg:x="186" fg:w="2"/><text x="74.3536%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.80%)</title><rect x="74.1036%" y="373" width="0.7968%" height="15" fill="rgb(223,179,41)" fg:x="186" fg:w="2"/><text x="74.3536%" y="383.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (1 samples, 0.40%)</title><rect x="75.6972%" y="309" width="0.3984%" height="15" fill="rgb(218,9,34)" fg:x="190" fg:w="1"/><text x="75.9472%" y="319.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (4 samples, 1.59%)</title><rect x="74.9004%" y="325" width="1.5936%" height="15" fill="rgb(222,106,8)" fg:x="188" fg:w="4"/><text x="75.1504%" y="335.50"></text></g><g><title>ahash::operations::read_small (1 samples, 0.40%)</title><rect x="76.0956%" y="309" width="0.3984%" height="15" fill="rgb(211,220,0)" fg:x="191" fg:w="1"/><text x="76.3456%" y="319.50"></text></g><g><title>hashbrown::map::make_insert_hash (9 samples, 3.59%)</title><rect x="74.1036%" y="421" width="3.5857%" height="15" fill="rgb(229,52,16)" fg:x="186" fg:w="9"/><text x="74.3536%" y="431.50">hash..</text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 3.59%)</title><rect x="74.1036%" y="405" width="3.5857%" height="15" fill="rgb(212,155,18)" fg:x="186" fg:w="9"/><text x="74.3536%" y="415.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 2.79%)</title><rect x="74.9004%" y="389" width="2.7888%" height="15" fill="rgb(242,21,14)" fg:x="188" fg:w="7"/><text x="75.1504%" y="399.50">co..</text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (7 samples, 2.79%)</title><rect x="74.9004%" y="373" width="2.7888%" height="15" fill="rgb(222,19,48)" fg:x="188" fg:w="7"/><text x="75.1504%" y="383.50">&lt;a..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (7 samples, 2.79%)</title><rect x="74.9004%" y="357" width="2.7888%" height="15" fill="rgb(232,45,27)" fg:x="188" fg:w="7"/><text x="75.1504%" y="367.50">co..</text></g><g><title>core::hash::Hasher::write_str (7 samples, 2.79%)</title><rect x="74.9004%" y="341" width="2.7888%" height="15" fill="rgb(249,103,42)" fg:x="188" fg:w="7"/><text x="75.1504%" y="351.50">co..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (3 samples, 1.20%)</title><rect x="76.4940%" y="325" width="1.1952%" height="15" fill="rgb(246,81,33)" fg:x="192" fg:w="3"/><text x="76.7440%" y="335.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (3 samples, 1.20%)</title><rect x="76.4940%" y="309" width="1.1952%" height="15" fill="rgb(252,33,42)" fg:x="192" fg:w="3"/><text x="76.7440%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3 samples, 1.20%)</title><rect x="77.6892%" y="421" width="1.1952%" height="15" fill="rgb(209,212,41)" fg:x="195" fg:w="3"/><text x="77.9392%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 1.20%)</title><rect x="77.6892%" y="405" width="1.1952%" height="15" fill="rgb(207,154,6)" fg:x="195" fg:w="3"/><text x="77.9392%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (3 samples, 1.20%)</title><rect x="77.6892%" y="389" width="1.1952%" height="15" fill="rgb(223,64,47)" fg:x="195" fg:w="3"/><text x="77.9392%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.80%)</title><rect x="78.0876%" y="373" width="0.7968%" height="15" fill="rgb(211,161,38)" fg:x="196" fg:w="2"/><text x="78.3376%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.80%)</title><rect x="78.0876%" y="357" width="0.7968%" height="15" fill="rgb(219,138,40)" fg:x="196" fg:w="2"/><text x="78.3376%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.80%)</title><rect x="78.0876%" y="341" width="0.7968%" height="15" fill="rgb(241,228,46)" fg:x="196" fg:w="2"/><text x="78.3376%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.80%)</title><rect x="78.8845%" y="405" width="0.7968%" height="15" fill="rgb(223,209,38)" fg:x="198" fg:w="2"/><text x="79.1345%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.80%)</title><rect x="78.8845%" y="389" width="0.7968%" height="15" fill="rgb(236,164,45)" fg:x="198" fg:w="2"/><text x="79.1345%" y="399.50"></text></g><g><title>core::ptr::write (2 samples, 0.80%)</title><rect x="78.8845%" y="373" width="0.7968%" height="15" fill="rgb(231,15,5)" fg:x="198" fg:w="2"/><text x="79.1345%" y="383.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (1 samples, 0.40%)</title><rect x="79.6813%" y="213" width="0.3984%" height="15" fill="rgb(252,35,15)" fg:x="200" fg:w="1"/><text x="79.9313%" y="223.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (1 samples, 0.40%)</title><rect x="79.6813%" y="197" width="0.3984%" height="15" fill="rgb(248,181,18)" fg:x="200" fg:w="1"/><text x="79.9313%" y="207.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (2 samples, 0.80%)</title><rect x="79.6813%" y="325" width="0.7968%" height="15" fill="rgb(233,39,42)" fg:x="200" fg:w="2"/><text x="79.9313%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.80%)</title><rect x="79.6813%" y="309" width="0.7968%" height="15" fill="rgb(238,110,33)" fg:x="200" fg:w="2"/><text x="79.9313%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.80%)</title><rect x="79.6813%" y="293" width="0.7968%" height="15" fill="rgb(233,195,10)" fg:x="200" fg:w="2"/><text x="79.9313%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.80%)</title><rect x="79.6813%" y="277" width="0.7968%" height="15" fill="rgb(254,105,3)" fg:x="200" fg:w="2"/><text x="79.9313%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (2 samples, 0.80%)</title><rect x="79.6813%" y="261" width="0.7968%" height="15" fill="rgb(221,225,9)" fg:x="200" fg:w="2"/><text x="79.9313%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2 samples, 0.80%)</title><rect x="79.6813%" y="245" width="0.7968%" height="15" fill="rgb(224,227,45)" fg:x="200" fg:w="2"/><text x="79.9313%" y="255.50"></text></g><g><title>core::hash::Hasher::write_str (2 samples, 0.80%)</title><rect x="79.6813%" y="229" width="0.7968%" height="15" fill="rgb(229,198,43)" fg:x="200" fg:w="2"/><text x="79.9313%" y="239.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (1 samples, 0.40%)</title><rect x="80.0797%" y="213" width="0.3984%" height="15" fill="rgb(206,209,35)" fg:x="201" fg:w="1"/><text x="80.3297%" y="223.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (1 samples, 0.40%)</title><rect x="80.0797%" y="197" width="0.3984%" height="15" fill="rgb(245,195,53)" fg:x="201" fg:w="1"/><text x="80.3297%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (3 samples, 1.20%)</title><rect x="79.6813%" y="341" width="1.1952%" height="15" fill="rgb(240,92,26)" fg:x="200" fg:w="3"/><text x="79.9313%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (1 samples, 0.40%)</title><rect x="80.4781%" y="325" width="0.3984%" height="15" fill="rgb(207,40,23)" fg:x="202" fg:w="1"/><text x="80.7281%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.40%)</title><rect x="80.4781%" y="309" width="0.3984%" height="15" fill="rgb(223,111,35)" fg:x="202" fg:w="1"/><text x="80.7281%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.40%)</title><rect x="80.4781%" y="293" width="0.3984%" height="15" fill="rgb(229,147,28)" fg:x="202" fg:w="1"/><text x="80.7281%" y="303.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (1 samples, 0.40%)</title><rect x="80.4781%" y="277" width="0.3984%" height="15" fill="rgb(211,29,28)" fg:x="202" fg:w="1"/><text x="80.7281%" y="287.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (1 samples, 0.40%)</title><rect x="80.4781%" y="261" width="0.3984%" height="15" fill="rgb(228,72,33)" fg:x="202" fg:w="1"/><text x="80.7281%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (1 samples, 0.40%)</title><rect x="80.8765%" y="341" width="0.3984%" height="15" fill="rgb(205,214,31)" fg:x="203" fg:w="1"/><text x="81.1265%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1 samples, 0.40%)</title><rect x="80.8765%" y="325" width="0.3984%" height="15" fill="rgb(224,111,15)" fg:x="203" fg:w="1"/><text x="81.1265%" y="335.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.40%)</title><rect x="81.2749%" y="181" width="0.3984%" height="15" fill="rgb(253,21,26)" fg:x="204" fg:w="1"/><text x="81.5249%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (6 samples, 2.39%)</title><rect x="79.6813%" y="405" width="2.3904%" height="15" fill="rgb(245,139,43)" fg:x="200" fg:w="6"/><text x="79.9313%" y="415.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 2.39%)</title><rect x="79.6813%" y="389" width="2.3904%" height="15" fill="rgb(252,170,7)" fg:x="200" fg:w="6"/><text x="79.9313%" y="399.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (6 samples, 2.39%)</title><rect x="79.6813%" y="373" width="2.3904%" height="15" fill="rgb(231,118,14)" fg:x="200" fg:w="6"/><text x="79.9313%" y="383.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (6 samples, 2.39%)</title><rect x="79.6813%" y="357" width="2.3904%" height="15" fill="rgb(238,83,0)" fg:x="200" fg:w="6"/><text x="79.9313%" y="367.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (2 samples, 0.80%)</title><rect x="81.2749%" y="341" width="0.7968%" height="15" fill="rgb(221,39,39)" fg:x="204" fg:w="2"/><text x="81.5249%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (2 samples, 0.80%)</title><rect x="81.2749%" y="325" width="0.7968%" height="15" fill="rgb(222,119,46)" fg:x="204" fg:w="2"/><text x="81.5249%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (2 samples, 0.80%)</title><rect x="81.2749%" y="309" width="0.7968%" height="15" fill="rgb(222,165,49)" fg:x="204" fg:w="2"/><text x="81.5249%" y="319.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 0.80%)</title><rect x="81.2749%" y="293" width="0.7968%" height="15" fill="rgb(219,113,52)" fg:x="204" fg:w="2"/><text x="81.5249%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.80%)</title><rect x="81.2749%" y="277" width="0.7968%" height="15" fill="rgb(214,7,15)" fg:x="204" fg:w="2"/><text x="81.5249%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.80%)</title><rect x="81.2749%" y="261" width="0.7968%" height="15" fill="rgb(235,32,4)" fg:x="204" fg:w="2"/><text x="81.5249%" y="271.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.80%)</title><rect x="81.2749%" y="245" width="0.7968%" height="15" fill="rgb(238,90,54)" fg:x="204" fg:w="2"/><text x="81.5249%" y="255.50"></text></g><g><title>_mi_malloc_generic (2 samples, 0.80%)</title><rect x="81.2749%" y="229" width="0.7968%" height="15" fill="rgb(213,208,19)" fg:x="204" fg:w="2"/><text x="81.5249%" y="239.50"></text></g><g><title>mi_find_page (2 samples, 0.80%)</title><rect x="81.2749%" y="213" width="0.7968%" height="15" fill="rgb(233,156,4)" fg:x="204" fg:w="2"/><text x="81.5249%" y="223.50"></text></g><g><title>mi_find_free_page (2 samples, 0.80%)</title><rect x="81.2749%" y="197" width="0.7968%" height="15" fill="rgb(207,194,5)" fg:x="204" fg:w="2"/><text x="81.5249%" y="207.50"></text></g><g><title>mi_page_queue (1 samples, 0.40%)</title><rect x="81.6733%" y="181" width="0.3984%" height="15" fill="rgb(206,111,30)" fg:x="205" fg:w="1"/><text x="81.9233%" y="191.50"></text></g><g><title>_mi_bin (1 samples, 0.40%)</title><rect x="81.6733%" y="165" width="0.3984%" height="15" fill="rgb(243,70,54)" fg:x="205" fg:w="1"/><text x="81.9233%" y="175.50"></text></g><g><title>mi_bin (1 samples, 0.40%)</title><rect x="81.6733%" y="149" width="0.3984%" height="15" fill="rgb(242,28,8)" fg:x="205" fg:w="1"/><text x="81.9233%" y="159.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.80%)</title><rect x="82.0717%" y="389" width="0.7968%" height="15" fill="rgb(219,106,18)" fg:x="206" fg:w="2"/><text x="82.3217%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (3 samples, 1.20%)</title><rect x="82.0717%" y="405" width="1.1952%" height="15" fill="rgb(244,222,10)" fg:x="206" fg:w="3"/><text x="82.3217%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.40%)</title><rect x="82.8685%" y="389" width="0.3984%" height="15" fill="rgb(236,179,52)" fg:x="208" fg:w="1"/><text x="83.1185%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.40%)</title><rect x="82.8685%" y="373" width="0.3984%" height="15" fill="rgb(213,23,39)" fg:x="208" fg:w="1"/><text x="83.1185%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.40%)</title><rect x="82.8685%" y="357" width="0.3984%" height="15" fill="rgb(238,48,10)" fg:x="208" fg:w="1"/><text x="83.1185%" y="367.50"></text></g><g><title>demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_packet_entities (168 samples, 66.93%)</title><rect x="16.7331%" y="469" width="66.9323%" height="15" fill="rgb(251,196,23)" fg:x="42" fg:w="168"/><text x="16.9831%" y="479.50">demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_packet_entities</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (26 samples, 10.36%)</title><rect x="73.3068%" y="453" width="10.3586%" height="15" fill="rgb(250,152,24)" fg:x="184" fg:w="26"/><text x="73.5568%" y="463.50">std::collection..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24 samples, 9.56%)</title><rect x="74.1036%" y="437" width="9.5618%" height="15" fill="rgb(209,150,17)" fg:x="186" fg:w="24"/><text x="74.3536%" y="447.50">hashbrown::map..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (12 samples, 4.78%)</title><rect x="78.8845%" y="421" width="4.7809%" height="15" fill="rgb(234,202,34)" fg:x="198" fg:w="12"/><text x="79.1345%" y="431.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (1 samples, 0.40%)</title><rect x="83.2669%" y="405" width="0.3984%" height="15" fill="rgb(253,148,53)" fg:x="209" fg:w="1"/><text x="83.5169%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (1 samples, 0.40%)</title><rect x="83.2669%" y="389" width="0.3984%" height="15" fill="rgb(218,129,16)" fg:x="209" fg:w="1"/><text x="83.5169%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (1 samples, 0.40%)</title><rect x="83.2669%" y="373" width="0.3984%" height="15" fill="rgb(216,85,19)" fg:x="209" fg:w="1"/><text x="83.5169%" y="383.50"></text></g><g><title>demoparser::parsing::parser::check_round_change (1 samples, 0.40%)</title><rect x="83.6653%" y="469" width="0.3984%" height="15" fill="rgb(235,228,7)" fg:x="210" fg:w="1"/><text x="83.9153%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.40%)</title><rect x="83.6653%" y="453" width="0.3984%" height="15" fill="rgb(245,175,0)" fg:x="210" fg:w="1"/><text x="83.9153%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.40%)</title><rect x="83.6653%" y="437" width="0.3984%" height="15" fill="rgb(208,168,36)" fg:x="210" fg:w="1"/><text x="83.9153%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.40%)</title><rect x="83.6653%" y="421" width="0.3984%" height="15" fill="rgb(246,171,24)" fg:x="210" fg:w="1"/><text x="83.9153%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.40%)</title><rect x="83.6653%" y="405" width="0.3984%" height="15" fill="rgb(215,142,24)" fg:x="210" fg:w="1"/><text x="83.9153%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.40%)</title><rect x="83.6653%" y="389" width="0.3984%" height="15" fill="rgb(250,187,7)" fg:x="210" fg:w="1"/><text x="83.9153%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.40%)</title><rect x="83.6653%" y="373" width="0.3984%" height="15" fill="rgb(228,66,33)" fg:x="210" fg:w="1"/><text x="83.9153%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.40%)</title><rect x="83.6653%" y="357" width="0.3984%" height="15" fill="rgb(234,215,21)" fg:x="210" fg:w="1"/><text x="83.9153%" y="367.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.40%)</title><rect x="83.6653%" y="341" width="0.3984%" height="15" fill="rgb(222,191,20)" fg:x="210" fg:w="1"/><text x="83.9153%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.40%)</title><rect x="83.6653%" y="325" width="0.3984%" height="15" fill="rgb(245,79,54)" fg:x="210" fg:w="1"/><text x="83.9153%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.40%)</title><rect x="83.6653%" y="309" width="0.3984%" height="15" fill="rgb(240,10,37)" fg:x="210" fg:w="1"/><text x="83.9153%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.40%)</title><rect x="83.6653%" y="293" width="0.3984%" height="15" fill="rgb(214,192,32)" fg:x="210" fg:w="1"/><text x="83.9153%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.40%)</title><rect x="83.6653%" y="277" width="0.3984%" height="15" fill="rgb(209,36,54)" fg:x="210" fg:w="1"/><text x="83.9153%" y="287.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_varint (1 samples, 0.40%)</title><rect x="84.0637%" y="469" width="0.3984%" height="15" fill="rgb(220,10,11)" fg:x="211" fg:w="1"/><text x="84.3137%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.40%)</title><rect x="84.4622%" y="437" width="0.3984%" height="15" fill="rgb(221,106,17)" fg:x="212" fg:w="1"/><text x="84.7122%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.40%)</title><rect x="84.4622%" y="421" width="0.3984%" height="15" fill="rgb(251,142,44)" fg:x="212" fg:w="1"/><text x="84.7122%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.40%)</title><rect x="84.4622%" y="405" width="0.3984%" height="15" fill="rgb(238,13,15)" fg:x="212" fg:w="1"/><text x="84.7122%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.40%)</title><rect x="84.4622%" y="389" width="0.3984%" height="15" fill="rgb(208,107,27)" fg:x="212" fg:w="1"/><text x="84.7122%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.40%)</title><rect x="84.4622%" y="373" width="0.3984%" height="15" fill="rgb(205,136,37)" fg:x="212" fg:w="1"/><text x="84.7122%" y="383.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.40%)</title><rect x="84.4622%" y="357" width="0.3984%" height="15" fill="rgb(250,205,27)" fg:x="212" fg:w="1"/><text x="84.7122%" y="367.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.40%)</title><rect x="84.4622%" y="341" width="0.3984%" height="15" fill="rgb(210,80,43)" fg:x="212" fg:w="1"/><text x="84.7122%" y="351.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.40%)</title><rect x="84.4622%" y="325" width="0.3984%" height="15" fill="rgb(247,160,36)" fg:x="212" fg:w="1"/><text x="84.7122%" y="335.50"></text></g><g><title>_mi_memcpy (1 samples, 0.40%)</title><rect x="84.4622%" y="309" width="0.3984%" height="15" fill="rgb(234,13,49)" fg:x="212" fg:w="1"/><text x="84.7122%" y="319.50"></text></g><g><title>memcpy (1 samples, 0.40%)</title><rect x="84.4622%" y="293" width="0.3984%" height="15" fill="rgb(234,122,0)" fg:x="212" fg:w="1"/><text x="84.7122%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.40%)</title><rect x="84.4622%" y="277" width="0.3984%" height="15" fill="rgb(207,146,38)" fg:x="212" fg:w="1"/><text x="84.7122%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="84.4622%" y="261" width="0.3984%" height="15" fill="rgb(207,177,25)" fg:x="212" fg:w="1"/><text x="84.7122%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="84.4622%" y="245" width="0.3984%" height="15" fill="rgb(211,178,42)" fg:x="212" fg:w="1"/><text x="84.7122%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="84.4622%" y="229" width="0.3984%" height="15" fill="rgb(230,69,54)" fg:x="212" fg:w="1"/><text x="84.7122%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="84.4622%" y="213" width="0.3984%" height="15" fill="rgb(214,135,41)" fg:x="212" fg:w="1"/><text x="84.7122%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="84.4622%" y="197" width="0.3984%" height="15" fill="rgb(237,67,25)" fg:x="212" fg:w="1"/><text x="84.7122%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="84.4622%" y="181" width="0.3984%" height="15" fill="rgb(222,189,50)" fg:x="212" fg:w="1"/><text x="84.7122%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="84.4622%" y="165" width="0.3984%" height="15" fill="rgb(245,148,34)" fg:x="212" fg:w="1"/><text x="84.7122%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="84.4622%" y="149" width="0.3984%" height="15" fill="rgb(222,29,6)" fg:x="212" fg:w="1"/><text x="84.7122%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="84.4622%" y="133" width="0.3984%" height="15" fill="rgb(221,189,43)" fg:x="212" fg:w="1"/><text x="84.7122%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="84.4622%" y="117" width="0.3984%" height="15" fill="rgb(207,36,27)" fg:x="212" fg:w="1"/><text x="84.7122%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="84.4622%" y="101" width="0.3984%" height="15" fill="rgb(217,90,24)" fg:x="212" fg:w="1"/><text x="84.7122%" y="111.50"></text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Demo&gt;::create_string_table (2 samples, 0.80%)</title><rect x="84.4622%" y="469" width="0.7968%" height="15" fill="rgb(224,66,35)" fg:x="212" fg:w="2"/><text x="84.7122%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.80%)</title><rect x="84.4622%" y="453" width="0.7968%" height="15" fill="rgb(221,13,50)" fg:x="212" fg:w="2"/><text x="84.7122%" y="463.50"></text></g><g><title>core::ptr::write (1 samples, 0.40%)</title><rect x="84.8606%" y="437" width="0.3984%" height="15" fill="rgb(236,68,49)" fg:x="213" fg:w="1"/><text x="85.1106%" y="447.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (2 samples, 0.80%)</title><rect x="85.2590%" y="453" width="0.7968%" height="15" fill="rgb(229,146,28)" fg:x="214" fg:w="2"/><text x="85.5090%" y="463.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (2 samples, 0.80%)</title><rect x="85.2590%" y="437" width="0.7968%" height="15" fill="rgb(225,31,38)" fg:x="214" fg:w="2"/><text x="85.5090%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.80%)</title><rect x="85.2590%" y="421" width="0.7968%" height="15" fill="rgb(250,208,3)" fg:x="214" fg:w="2"/><text x="85.5090%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.40%)</title><rect x="85.6574%" y="405" width="0.3984%" height="15" fill="rgb(246,54,23)" fg:x="215" fg:w="1"/><text x="85.9074%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.40%)</title><rect x="85.6574%" y="389" width="0.3984%" height="15" fill="rgb(243,76,11)" fg:x="215" fg:w="1"/><text x="85.9074%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.40%)</title><rect x="85.6574%" y="373" width="0.3984%" height="15" fill="rgb(245,21,50)" fg:x="215" fg:w="1"/><text x="85.9074%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.40%)</title><rect x="85.6574%" y="357" width="0.3984%" height="15" fill="rgb(228,9,43)" fg:x="215" fg:w="1"/><text x="85.9074%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.40%)</title><rect x="85.6574%" y="341" width="0.3984%" height="15" fill="rgb(208,100,47)" fg:x="215" fg:w="1"/><text x="85.9074%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.40%)</title><rect x="85.6574%" y="325" width="0.3984%" height="15" fill="rgb(232,26,8)" fg:x="215" fg:w="1"/><text x="85.9074%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.40%)</title><rect x="85.6574%" y="309" width="0.3984%" height="15" fill="rgb(216,166,38)" fg:x="215" fg:w="1"/><text x="85.9074%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.40%)</title><rect x="85.6574%" y="293" width="0.3984%" height="15" fill="rgb(251,202,51)" fg:x="215" fg:w="1"/><text x="85.9074%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.40%)</title><rect x="85.6574%" y="277" width="0.3984%" height="15" fill="rgb(254,216,34)" fg:x="215" fg:w="1"/><text x="85.9074%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.40%)</title><rect x="85.6574%" y="261" width="0.3984%" height="15" fill="rgb(251,32,27)" fg:x="215" fg:w="1"/><text x="85.9074%" y="271.50"></text></g><g><title>mi_malloc (1 samples, 0.40%)</title><rect x="85.6574%" y="245" width="0.3984%" height="15" fill="rgb(208,127,28)" fg:x="215" fg:w="1"/><text x="85.9074%" y="255.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.40%)</title><rect x="85.6574%" y="229" width="0.3984%" height="15" fill="rgb(224,137,22)" fg:x="215" fg:w="1"/><text x="85.9074%" y="239.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.40%)</title><rect x="85.6574%" y="213" width="0.3984%" height="15" fill="rgb(254,70,32)" fg:x="215" fg:w="1"/><text x="85.9074%" y="223.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.40%)</title><rect x="85.6574%" y="197" width="0.3984%" height="15" fill="rgb(229,75,37)" fg:x="215" fg:w="1"/><text x="85.9074%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.40%)</title><rect x="86.0558%" y="453" width="0.3984%" height="15" fill="rgb(252,64,23)" fg:x="216" fg:w="1"/><text x="86.3058%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.80%)</title><rect x="86.4542%" y="453" width="0.7968%" height="15" fill="rgb(232,162,48)" fg:x="217" fg:w="2"/><text x="86.7042%" y="463.50"></text></g><g><title>core::ptr::write (2 samples, 0.80%)</title><rect x="86.4542%" y="437" width="0.7968%" height="15" fill="rgb(246,160,12)" fg:x="217" fg:w="2"/><text x="86.7042%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.40%)</title><rect x="87.2510%" y="453" width="0.3984%" height="15" fill="rgb(247,166,0)" fg:x="219" fg:w="1"/><text x="87.5010%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.40%)</title><rect x="87.6494%" y="389" width="0.3984%" height="15" fill="rgb(249,219,21)" fg:x="220" fg:w="1"/><text x="87.8994%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.40%)</title><rect x="87.6494%" y="373" width="0.3984%" height="15" fill="rgb(205,209,3)" fg:x="220" fg:w="1"/><text x="87.8994%" y="383.50"></text></g><g><title>__rust_dealloc (1 samples, 0.40%)</title><rect x="87.6494%" y="357" width="0.3984%" height="15" fill="rgb(243,44,1)" fg:x="220" fg:w="1"/><text x="87.8994%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.80%)</title><rect x="87.6494%" y="453" width="0.7968%" height="15" fill="rgb(206,159,16)" fg:x="220" fg:w="2"/><text x="87.8994%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.80%)</title><rect x="87.6494%" y="437" width="0.7968%" height="15" fill="rgb(244,77,30)" fg:x="220" fg:w="2"/><text x="87.8994%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.80%)</title><rect x="87.6494%" y="421" width="0.7968%" height="15" fill="rgb(218,69,12)" fg:x="220" fg:w="2"/><text x="87.8994%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.80%)</title><rect x="87.6494%" y="405" width="0.7968%" height="15" fill="rgb(212,87,7)" fg:x="220" fg:w="2"/><text x="87.8994%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.40%)</title><rect x="88.0478%" y="389" width="0.3984%" height="15" fill="rgb(245,114,25)" fg:x="221" fg:w="1"/><text x="88.2978%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.40%)</title><rect x="88.4462%" y="437" width="0.3984%" height="15" fill="rgb(210,61,42)" fg:x="222" fg:w="1"/><text x="88.6962%" y="447.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_string (2 samples, 0.80%)</title><rect x="88.4462%" y="453" width="0.7968%" height="15" fill="rgb(211,52,33)" fg:x="222" fg:w="2"/><text x="88.6962%" y="463.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.40%)</title><rect x="88.8446%" y="437" width="0.3984%" height="15" fill="rgb(234,58,33)" fg:x="223" fg:w="1"/><text x="89.0946%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.40%)</title><rect x="88.8446%" y="421" width="0.3984%" height="15" fill="rgb(220,115,36)" fg:x="223" fg:w="1"/><text x="89.0946%" y="431.50"></text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Demo&gt;::update_string_table_msg (11 samples, 4.38%)</title><rect x="85.2590%" y="469" width="4.3825%" height="15" fill="rgb(243,153,54)" fg:x="214" fg:w="11"/><text x="85.5090%" y="479.50">demop..</text></g><g><title>std::f32::&lt;impl f32&gt;::log2 (1 samples, 0.40%)</title><rect x="89.2430%" y="453" width="0.3984%" height="15" fill="rgb(251,47,18)" fg:x="224" fg:w="1"/><text x="89.4930%" y="463.50"></text></g><g><title>&lt;protobuf::coded_input_stream::buf_read_iter::BufReadIter as core::ops::drop::Drop&gt;::drop (1 samples, 0.40%)</title><rect x="89.6414%" y="453" width="0.3984%" height="15" fill="rgb(242,102,42)" fg:x="225" fg:w="1"/><text x="89.8914%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (1 samples, 0.40%)</title><rect x="91.2351%" y="357" width="0.3984%" height="15" fill="rgb(234,31,38)" fg:x="229" fg:w="1"/><text x="91.4851%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.40%)</title><rect x="91.6335%" y="357" width="0.3984%" height="15" fill="rgb(221,117,51)" fg:x="230" fg:w="1"/><text x="91.8835%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.40%)</title><rect x="91.6335%" y="341" width="0.3984%" height="15" fill="rgb(212,20,18)" fg:x="230" fg:w="1"/><text x="91.8835%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (1 samples, 0.40%)</title><rect x="91.6335%" y="325" width="0.3984%" height="15" fill="rgb(245,133,36)" fg:x="230" fg:w="1"/><text x="91.8835%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (1 samples, 0.40%)</title><rect x="91.6335%" y="309" width="0.3984%" height="15" fill="rgb(212,6,19)" fg:x="230" fg:w="1"/><text x="91.8835%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.40%)</title><rect x="91.6335%" y="293" width="0.3984%" height="15" fill="rgb(218,1,36)" fg:x="230" fg:w="1"/><text x="91.8835%" y="303.50"></text></g><g><title>mi_malloc (1 samples, 0.40%)</title><rect x="91.6335%" y="277" width="0.3984%" height="15" fill="rgb(246,84,54)" fg:x="230" fg:w="1"/><text x="91.8835%" y="287.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.40%)</title><rect x="91.6335%" y="261" width="0.3984%" height="15" fill="rgb(242,110,6)" fg:x="230" fg:w="1"/><text x="91.8835%" y="271.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.40%)</title><rect x="91.6335%" y="245" width="0.3984%" height="15" fill="rgb(214,47,5)" fg:x="230" fg:w="1"/><text x="91.8835%" y="255.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.40%)</title><rect x="91.6335%" y="229" width="0.3984%" height="15" fill="rgb(218,159,25)" fg:x="230" fg:w="1"/><text x="91.8835%" y="239.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (7 samples, 2.79%)</title><rect x="90.4382%" y="421" width="2.7888%" height="15" fill="rgb(215,211,28)" fg:x="227" fg:w="7"/><text x="90.6882%" y="431.50">pr..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (6 samples, 2.39%)</title><rect x="90.8367%" y="405" width="2.3904%" height="15" fill="rgb(238,59,32)" fg:x="228" fg:w="6"/><text x="91.0867%" y="415.50">pr..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (6 samples, 2.39%)</title><rect x="90.8367%" y="389" width="2.3904%" height="15" fill="rgb(226,82,3)" fg:x="228" fg:w="6"/><text x="91.0867%" y="399.50">pr..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (6 samples, 2.39%)</title><rect x="90.8367%" y="373" width="2.3904%" height="15" fill="rgb(240,164,32)" fg:x="228" fg:w="6"/><text x="91.0867%" y="383.50">pr..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (3 samples, 1.20%)</title><rect x="92.0319%" y="357" width="1.1952%" height="15" fill="rgb(232,46,7)" fg:x="231" fg:w="3"/><text x="92.2819%" y="367.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (3 samples, 1.20%)</title><rect x="92.0319%" y="341" width="1.1952%" height="15" fill="rgb(229,129,53)" fg:x="231" fg:w="3"/><text x="92.2819%" y="351.50"></text></g><g><title>protobuf::misc::maybe_uninit_write_slice (3 samples, 1.20%)</title><rect x="92.0319%" y="325" width="1.1952%" height="15" fill="rgb(234,188,29)" fg:x="231" fg:w="3"/><text x="92.2819%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (3 samples, 1.20%)</title><rect x="92.0319%" y="309" width="1.1952%" height="15" fill="rgb(246,141,4)" fg:x="231" fg:w="3"/><text x="92.2819%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 1.20%)</title><rect x="92.0319%" y="293" width="1.1952%" height="15" fill="rgb(229,23,39)" fg:x="231" fg:w="3"/><text x="92.2819%" y="303.50"></text></g><g><title>[libc.so.6] (3 samples, 1.20%)</title><rect x="92.0319%" y="277" width="1.1952%" height="15" fill="rgb(206,12,3)" fg:x="231" fg:w="3"/><text x="92.2819%" y="287.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_EntityMsg as protobuf::message::Message&gt;::merge_from (9 samples, 3.59%)</title><rect x="90.4382%" y="437" width="3.5857%" height="15" fill="rgb(252,226,20)" fg:x="227" fg:w="9"/><text x="90.6882%" y="447.50">&lt;csg..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int32 (2 samples, 0.80%)</title><rect x="93.2271%" y="421" width="0.7968%" height="15" fill="rgb(216,123,35)" fg:x="234" fg:w="2"/><text x="93.4771%" y="431.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int64 (1 samples, 0.40%)</title><rect x="93.6255%" y="405" width="0.3984%" height="15" fill="rgb(212,68,40)" fg:x="235" fg:w="1"/><text x="93.8755%" y="415.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (1 samples, 0.40%)</title><rect x="93.6255%" y="389" width="0.3984%" height="15" fill="rgb(254,125,32)" fg:x="235" fg:w="1"/><text x="93.8755%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (1 samples, 0.40%)</title><rect x="94.0239%" y="421" width="0.3984%" height="15" fill="rgb(253,97,22)" fg:x="236" fg:w="1"/><text x="94.2739%" y="431.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bool (1 samples, 0.40%)</title><rect x="94.4223%" y="421" width="0.3984%" height="15" fill="rgb(241,101,14)" fg:x="237" fg:w="1"/><text x="94.6723%" y="431.50"></text></g><g><title>mi_get_default_heap (1 samples, 0.40%)</title><rect x="94.8207%" y="261" width="0.3984%" height="15" fill="rgb(238,103,29)" fg:x="238" fg:w="1"/><text x="95.0707%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (2 samples, 0.80%)</title><rect x="94.8207%" y="357" width="0.7968%" height="15" fill="rgb(233,195,47)" fg:x="238" fg:w="2"/><text x="95.0707%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (2 samples, 0.80%)</title><rect x="94.8207%" y="341" width="0.7968%" height="15" fill="rgb(246,218,30)" fg:x="238" fg:w="2"/><text x="95.0707%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (2 samples, 0.80%)</title><rect x="94.8207%" y="325" width="0.7968%" height="15" fill="rgb(219,145,47)" fg:x="238" fg:w="2"/><text x="95.0707%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (2 samples, 0.80%)</title><rect x="94.8207%" y="309" width="0.7968%" height="15" fill="rgb(243,12,26)" fg:x="238" fg:w="2"/><text x="95.0707%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.80%)</title><rect x="94.8207%" y="293" width="0.7968%" height="15" fill="rgb(214,87,16)" fg:x="238" fg:w="2"/><text x="95.0707%" y="303.50"></text></g><g><title>mi_malloc (2 samples, 0.80%)</title><rect x="94.8207%" y="277" width="0.7968%" height="15" fill="rgb(208,99,42)" fg:x="238" fg:w="2"/><text x="95.0707%" y="287.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.40%)</title><rect x="95.2191%" y="261" width="0.3984%" height="15" fill="rgb(253,99,2)" fg:x="239" fg:w="1"/><text x="95.4691%" y="271.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.40%)</title><rect x="95.2191%" y="245" width="0.3984%" height="15" fill="rgb(220,168,23)" fg:x="239" fg:w="1"/><text x="95.4691%" y="255.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.40%)</title><rect x="95.2191%" y="229" width="0.3984%" height="15" fill="rgb(242,38,24)" fg:x="239" fg:w="1"/><text x="95.4691%" y="239.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (4 samples, 1.59%)</title><rect x="94.8207%" y="421" width="1.5936%" height="15" fill="rgb(225,182,9)" fg:x="238" fg:w="4"/><text x="95.0707%" y="431.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (4 samples, 1.59%)</title><rect x="94.8207%" y="405" width="1.5936%" height="15" fill="rgb(243,178,37)" fg:x="238" fg:w="4"/><text x="95.0707%" y="415.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (4 samples, 1.59%)</title><rect x="94.8207%" y="389" width="1.5936%" height="15" fill="rgb(232,139,19)" fg:x="238" fg:w="4"/><text x="95.0707%" y="399.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (4 samples, 1.59%)</title><rect x="94.8207%" y="373" width="1.5936%" height="15" fill="rgb(225,201,24)" fg:x="238" fg:w="4"/><text x="95.0707%" y="383.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (2 samples, 0.80%)</title><rect x="95.6175%" y="357" width="0.7968%" height="15" fill="rgb(221,47,46)" fg:x="240" fg:w="2"/><text x="95.8675%" y="367.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (2 samples, 0.80%)</title><rect x="95.6175%" y="341" width="0.7968%" height="15" fill="rgb(249,23,13)" fg:x="240" fg:w="2"/><text x="95.8675%" y="351.50"></text></g><g><title>protobuf::misc::maybe_uninit_write_slice (2 samples, 0.80%)</title><rect x="95.6175%" y="325" width="0.7968%" height="15" fill="rgb(219,9,5)" fg:x="240" fg:w="2"/><text x="95.8675%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.80%)</title><rect x="95.6175%" y="309" width="0.7968%" height="15" fill="rgb(254,171,16)" fg:x="240" fg:w="2"/><text x="95.8675%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.80%)</title><rect x="95.6175%" y="293" width="0.7968%" height="15" fill="rgb(230,171,20)" fg:x="240" fg:w="2"/><text x="95.8675%" y="303.50"></text></g><g><title>[libc.so.6] (2 samples, 0.80%)</title><rect x="95.6175%" y="277" width="0.7968%" height="15" fill="rgb(210,71,41)" fg:x="240" fg:w="2"/><text x="95.8675%" y="287.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::TryFrom&lt;i64&gt; for i32&gt;::try_from (1 samples, 0.40%)</title><rect x="96.4143%" y="405" width="0.3984%" height="15" fill="rgb(206,173,20)" fg:x="242" fg:w="1"/><text x="96.6643%" y="415.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int32 (2 samples, 0.80%)</title><rect x="96.4143%" y="421" width="0.7968%" height="15" fill="rgb(233,88,34)" fg:x="242" fg:w="2"/><text x="96.6643%" y="431.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int64 (1 samples, 0.40%)</title><rect x="96.8127%" y="405" width="0.3984%" height="15" fill="rgb(223,209,46)" fg:x="243" fg:w="1"/><text x="97.0627%" y="415.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (1 samples, 0.40%)</title><rect x="96.8127%" y="389" width="0.3984%" height="15" fill="rgb(250,43,18)" fg:x="243" fg:w="1"/><text x="97.0627%" y="399.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::remaining_in_buf (1 samples, 0.40%)</title><rect x="96.8127%" y="373" width="0.3984%" height="15" fill="rgb(208,13,10)" fg:x="243" fg:w="1"/><text x="97.0627%" y="383.50"></text></g><g><title>std::panic::catch_unwind (238 samples, 94.82%)</title><rect x="2.7888%" y="645" width="94.8207%" height="15" fill="rgb(212,200,36)" fg:x="7" fg:w="238"/><text x="3.0388%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (238 samples, 94.82%)</title><rect x="2.7888%" y="629" width="94.8207%" height="15" fill="rgb(225,90,30)" fg:x="7" fg:w="238"/><text x="3.0388%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (238 samples, 94.82%)</title><rect x="2.7888%" y="613" width="94.8207%" height="15" fill="rgb(236,182,39)" fg:x="7" fg:w="238"/><text x="3.0388%" y="623.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (238 samples, 94.82%)</title><rect x="2.7888%" y="597" width="94.8207%" height="15" fill="rgb(212,144,35)" fg:x="7" fg:w="238"/><text x="3.0388%" y="607.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (238 samples, 94.82%)</title><rect x="2.7888%" y="581" width="94.8207%" height="15" fill="rgb(228,63,44)" fg:x="7" fg:w="238"/><text x="3.0388%" y="591.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (238 samples, 94.82%)</title><rect x="2.7888%" y="565" width="94.8207%" height="15" fill="rgb(228,109,6)" fg:x="7" fg:w="238"/><text x="3.0388%" y="575.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (238 samples, 94.82%)</title><rect x="2.7888%" y="549" width="94.8207%" height="15" fill="rgb(238,117,24)" fg:x="7" fg:w="238"/><text x="3.0388%" y="559.50">core::ops::function::FnOnce::call_once</text></g><g><title>demoparser::main (238 samples, 94.82%)</title><rect x="2.7888%" y="533" width="94.8207%" height="15" fill="rgb(242,26,26)" fg:x="7" fg:w="238"/><text x="3.0388%" y="543.50">demoparser::main</text></g><g><title>demoparser::parsing::parser::Demo::start_parsing (231 samples, 92.03%)</title><rect x="5.5777%" y="517" width="92.0319%" height="15" fill="rgb(221,92,48)" fg:x="14" fg:w="231"/><text x="5.8277%" y="527.50">demoparser::parsing::parser::Demo::start_parsing</text></g><g><title>demoparser::parsing::parser::Demo::parse_cmd (211 samples, 84.06%)</title><rect x="13.5458%" y="501" width="84.0637%" height="15" fill="rgb(209,209,32)" fg:x="34" fg:w="211"/><text x="13.7958%" y="511.50">demoparser::parsing::parser::Demo::parse_cmd</text></g><g><title>demoparser::parsing::parser::Demo::parse_packet (205 samples, 81.67%)</title><rect x="15.9363%" y="485" width="81.6733%" height="15" fill="rgb(221,70,22)" fg:x="40" fg:w="205"/><text x="16.1863%" y="495.50">demoparser::parsing::parser::Demo::parse_packet</text></g><g><title>protobuf::message::Message::parse_from_bytes (20 samples, 7.97%)</title><rect x="89.6414%" y="469" width="7.9681%" height="15" fill="rgb(248,145,5)" fg:x="225" fg:w="20"/><text x="89.8914%" y="479.50">protobuf::m..</text></g><g><title>protobuf::message::Message::parse_from (19 samples, 7.57%)</title><rect x="90.0398%" y="453" width="7.5697%" height="15" fill="rgb(226,116,26)" fg:x="226" fg:w="19"/><text x="90.2898%" y="463.50">protobuf::..</text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_PacketEntities as protobuf::message::Message&gt;::merge_from (9 samples, 3.59%)</title><rect x="94.0239%" y="437" width="3.5857%" height="15" fill="rgb(244,5,17)" fg:x="236" fg:w="9"/><text x="94.2739%" y="447.50">&lt;csg..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (1 samples, 0.40%)</title><rect x="97.2112%" y="421" width="0.3984%" height="15" fill="rgb(252,159,33)" fg:x="244" fg:w="1"/><text x="97.4612%" y="431.50"></text></g><g><title>demoparser (246 samples, 98.01%)</title><rect x="0.0000%" y="805" width="98.0080%" height="15" fill="rgb(206,71,0)" fg:x="0" fg:w="246"/><text x="0.2500%" y="815.50">demoparser</text></g><g><title>_start (240 samples, 95.62%)</title><rect x="2.3904%" y="789" width="95.6175%" height="15" fill="rgb(233,118,54)" fg:x="6" fg:w="240"/><text x="2.6404%" y="799.50">_start</text></g><g><title>__libc_start_main_impl (240 samples, 95.62%)</title><rect x="2.3904%" y="773" width="95.6175%" height="15" fill="rgb(234,83,48)" fg:x="6" fg:w="240"/><text x="2.6404%" y="783.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (240 samples, 95.62%)</title><rect x="2.3904%" y="757" width="95.6175%" height="15" fill="rgb(228,3,54)" fg:x="6" fg:w="240"/><text x="2.6404%" y="767.50">__libc_start_call_main</text></g><g><title>main (239 samples, 95.22%)</title><rect x="2.7888%" y="741" width="95.2191%" height="15" fill="rgb(226,155,13)" fg:x="7" fg:w="239"/><text x="3.0388%" y="751.50">main</text></g><g><title>std::rt::lang_start_internal (239 samples, 95.22%)</title><rect x="2.7888%" y="725" width="95.2191%" height="15" fill="rgb(241,28,37)" fg:x="7" fg:w="239"/><text x="3.0388%" y="735.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (239 samples, 95.22%)</title><rect x="2.7888%" y="709" width="95.2191%" height="15" fill="rgb(233,93,10)" fg:x="7" fg:w="239"/><text x="3.0388%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (239 samples, 95.22%)</title><rect x="2.7888%" y="693" width="95.2191%" height="15" fill="rgb(225,113,19)" fg:x="7" fg:w="239"/><text x="3.0388%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (239 samples, 95.22%)</title><rect x="2.7888%" y="677" width="95.2191%" height="15" fill="rgb(241,2,18)" fg:x="7" fg:w="239"/><text x="3.0388%" y="687.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (239 samples, 95.22%)</title><rect x="2.7888%" y="661" width="95.2191%" height="15" fill="rgb(228,207,21)" fg:x="7" fg:w="239"/><text x="3.0388%" y="671.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.40%)</title><rect x="97.6096%" y="645" width="0.3984%" height="15" fill="rgb(213,211,35)" fg:x="245" fg:w="1"/><text x="97.8596%" y="655.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.40%)</title><rect x="97.6096%" y="629" width="0.3984%" height="15" fill="rgb(209,83,10)" fg:x="245" fg:w="1"/><text x="97.8596%" y="639.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.40%)</title><rect x="97.6096%" y="613" width="0.3984%" height="15" fill="rgb(209,164,1)" fg:x="245" fg:w="1"/><text x="97.8596%" y="623.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.40%)</title><rect x="97.6096%" y="597" width="0.3984%" height="15" fill="rgb(213,184,43)" fg:x="245" fg:w="1"/><text x="97.8596%" y="607.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.40%)</title><rect x="97.6096%" y="581" width="0.3984%" height="15" fill="rgb(231,61,34)" fg:x="245" fg:w="1"/><text x="97.8596%" y="591.50"></text></g><g><title>__getline (1 samples, 0.40%)</title><rect x="97.6096%" y="565" width="0.3984%" height="15" fill="rgb(235,75,3)" fg:x="245" fg:w="1"/><text x="97.8596%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="97.6096%" y="549" width="0.3984%" height="15" fill="rgb(220,106,47)" fg:x="245" fg:w="1"/><text x="97.8596%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="97.6096%" y="533" width="0.3984%" height="15" fill="rgb(210,196,33)" fg:x="245" fg:w="1"/><text x="97.8596%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="97.6096%" y="517" width="0.3984%" height="15" fill="rgb(229,154,42)" fg:x="245" fg:w="1"/><text x="97.8596%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="97.6096%" y="501" width="0.3984%" height="15" fill="rgb(228,114,26)" fg:x="245" fg:w="1"/><text x="97.8596%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="97.6096%" y="485" width="0.3984%" height="15" fill="rgb(208,144,1)" fg:x="245" fg:w="1"/><text x="97.8596%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="97.6096%" y="469" width="0.3984%" height="15" fill="rgb(239,112,37)" fg:x="245" fg:w="1"/><text x="97.8596%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="97.6096%" y="453" width="0.3984%" height="15" fill="rgb(210,96,50)" fg:x="245" fg:w="1"/><text x="97.8596%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="97.6096%" y="437" width="0.3984%" height="15" fill="rgb(222,178,2)" fg:x="245" fg:w="1"/><text x="97.8596%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="97.6096%" y="421" width="0.3984%" height="15" fill="rgb(226,74,18)" fg:x="245" fg:w="1"/><text x="97.8596%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.40%)</title><rect x="97.6096%" y="405" width="0.3984%" height="15" fill="rgb(225,67,54)" fg:x="245" fg:w="1"/><text x="97.8596%" y="415.50"></text></g><g><title>all (251 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(251,92,32)" fg:x="0" fg:w="251"/><text x="0.2500%" y="831.50"></text></g><g><title>perf-exec (5 samples, 1.99%)</title><rect x="98.0080%" y="805" width="1.9920%" height="15" fill="rgb(228,149,22)" fg:x="246" fg:w="5"/><text x="98.2580%" y="815.50">p..</text></g><g><title>[unknown] (5 samples, 1.99%)</title><rect x="98.0080%" y="789" width="1.9920%" height="15" fill="rgb(243,54,13)" fg:x="246" fg:w="5"/><text x="98.2580%" y="799.50">[..</text></g><g><title>[unknown] (5 samples, 1.99%)</title><rect x="98.0080%" y="773" width="1.9920%" height="15" fill="rgb(243,180,28)" fg:x="246" fg:w="5"/><text x="98.2580%" y="783.50">[..</text></g><g><title>[unknown] (5 samples, 1.99%)</title><rect x="98.0080%" y="757" width="1.9920%" height="15" fill="rgb(208,167,24)" fg:x="246" fg:w="5"/><text x="98.2580%" y="767.50">[..</text></g><g><title>[unknown] (5 samples, 1.99%)</title><rect x="98.0080%" y="741" width="1.9920%" height="15" fill="rgb(245,73,45)" fg:x="246" fg:w="5"/><text x="98.2580%" y="751.50">[..</text></g><g><title>[unknown] (5 samples, 1.99%)</title><rect x="98.0080%" y="725" width="1.9920%" height="15" fill="rgb(237,203,48)" fg:x="246" fg:w="5"/><text x="98.2580%" y="735.50">[..</text></g><g><title>[unknown] (5 samples, 1.99%)</title><rect x="98.0080%" y="709" width="1.9920%" height="15" fill="rgb(211,197,16)" fg:x="246" fg:w="5"/><text x="98.2580%" y="719.50">[..</text></g><g><title>[unknown] (5 samples, 1.99%)</title><rect x="98.0080%" y="693" width="1.9920%" height="15" fill="rgb(243,99,51)" fg:x="246" fg:w="5"/><text x="98.2580%" y="703.50">[..</text></g><g><title>[unknown] (5 samples, 1.99%)</title><rect x="98.0080%" y="677" width="1.9920%" height="15" fill="rgb(215,123,29)" fg:x="246" fg:w="5"/><text x="98.2580%" y="687.50">[..</text></g><g><title>[unknown] (5 samples, 1.99%)</title><rect x="98.0080%" y="661" width="1.9920%" height="15" fill="rgb(239,186,37)" fg:x="246" fg:w="5"/><text x="98.2580%" y="671.50">[..</text></g><g><title>[unknown] (5 samples, 1.99%)</title><rect x="98.0080%" y="645" width="1.9920%" height="15" fill="rgb(252,136,39)" fg:x="246" fg:w="5"/><text x="98.2580%" y="655.50">[..</text></g></svg></svg>