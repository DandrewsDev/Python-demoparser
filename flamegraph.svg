<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1718" onload="init(evt)" viewBox="0 0 1200 1718" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1718" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1701.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1701.00"> </text><svg id="frames" x="10" width="1180" total_samples="602"><g><title>[unknown] (4 samples, 0.66%)</title><rect x="0.0000%" y="1621" width="0.6645%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1631.50"></text></g><g><title>[unknown] (4 samples, 0.66%)</title><rect x="0.0000%" y="1605" width="0.6645%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1615.50"></text></g><g><title>[unknown] (4 samples, 0.66%)</title><rect x="0.0000%" y="1589" width="0.6645%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1599.50"></text></g><g><title>[unknown] (4 samples, 0.66%)</title><rect x="0.0000%" y="1573" width="0.6645%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1583.50"></text></g><g><title>[unknown] (4 samples, 0.66%)</title><rect x="0.0000%" y="1557" width="0.6645%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1567.50"></text></g><g><title>[unknown] (4 samples, 0.66%)</title><rect x="0.0000%" y="1541" width="0.6645%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1551.50"></text></g><g><title>[unknown] (4 samples, 0.66%)</title><rect x="0.0000%" y="1525" width="0.6645%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1535.50"></text></g><g><title>[unknown] (4 samples, 0.66%)</title><rect x="0.0000%" y="1509" width="0.6645%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1519.50"></text></g><g><title>[unknown] (4 samples, 0.66%)</title><rect x="0.0000%" y="1493" width="0.6645%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1503.50"></text></g><g><title>[unknown] (4 samples, 0.66%)</title><rect x="0.0000%" y="1477" width="0.6645%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1487.50"></text></g><g><title>[unknown] (4 samples, 0.66%)</title><rect x="0.0000%" y="1461" width="0.6645%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1471.50"></text></g><g><title>[unknown] (4 samples, 0.66%)</title><rect x="0.0000%" y="1445" width="0.6645%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1455.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="0.3322%" y="1429" width="0.3322%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="2"/><text x="0.5822%" y="1439.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="0.3322%" y="1413" width="0.3322%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="2"/><text x="0.5822%" y="1423.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="0.4983%" y="1397" width="0.1661%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.7483%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="0.4983%" y="1381" width="0.1661%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="0.7483%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="0.4983%" y="1365" width="0.1661%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="0.7483%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="0.4983%" y="1349" width="0.1661%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="0.7483%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="0.4983%" y="1333" width="0.1661%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="0.7483%" y="1343.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as core::clone::Clone&gt;::clone (1 samples, 0.17%)</title><rect x="0.6645%" y="1557" width="0.1661%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="1"/><text x="0.9145%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.17%)</title><rect x="0.6645%" y="1541" width="0.1661%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="1"/><text x="0.9145%" y="1551.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.17%)</title><rect x="0.6645%" y="1525" width="0.1661%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="1"/><text x="0.9145%" y="1535.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.17%)</title><rect x="0.6645%" y="1509" width="0.1661%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="1"/><text x="0.9145%" y="1519.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.17%)</title><rect x="0.6645%" y="1493" width="0.1661%" height="15" fill="rgb(247,18,42)" fg:x="4" fg:w="1"/><text x="0.9145%" y="1503.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.17%)</title><rect x="0.6645%" y="1477" width="0.1661%" height="15" fill="rgb(241,131,45)" fg:x="4" fg:w="1"/><text x="0.9145%" y="1487.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (2 samples, 0.33%)</title><rect x="0.6645%" y="1621" width="0.3322%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="2"/><text x="0.9145%" y="1631.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (2 samples, 0.33%)</title><rect x="0.6645%" y="1605" width="0.3322%" height="15" fill="rgb(225,111,53)" fg:x="4" fg:w="2"/><text x="0.9145%" y="1615.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (2 samples, 0.33%)</title><rect x="0.6645%" y="1589" width="0.3322%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="2"/><text x="0.9145%" y="1599.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (2 samples, 0.33%)</title><rect x="0.6645%" y="1573" width="0.3322%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="2"/><text x="0.9145%" y="1583.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1 samples, 0.17%)</title><rect x="0.8306%" y="1557" width="0.1661%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="1"/><text x="1.0806%" y="1567.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.17%)</title><rect x="0.8306%" y="1541" width="0.1661%" height="15" fill="rgb(209,103,24)" fg:x="5" fg:w="1"/><text x="1.0806%" y="1551.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.17%)</title><rect x="0.8306%" y="1525" width="0.1661%" height="15" fill="rgb(229,88,8)" fg:x="5" fg:w="1"/><text x="1.0806%" y="1535.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.17%)</title><rect x="0.8306%" y="1509" width="0.1661%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="1"/><text x="1.0806%" y="1519.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.17%)</title><rect x="0.8306%" y="1493" width="0.1661%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="1"/><text x="1.0806%" y="1503.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.17%)</title><rect x="0.8306%" y="1477" width="0.1661%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="1.0806%" y="1487.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.17%)</title><rect x="0.8306%" y="1461" width="0.1661%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="1"/><text x="1.0806%" y="1471.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.17%)</title><rect x="0.8306%" y="1445" width="0.1661%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="1"/><text x="1.0806%" y="1455.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.17%)</title><rect x="0.8306%" y="1429" width="0.1661%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="1"/><text x="1.0806%" y="1439.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.17%)</title><rect x="0.8306%" y="1413" width="0.1661%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="1"/><text x="1.0806%" y="1423.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.17%)</title><rect x="0.8306%" y="1397" width="0.1661%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="1"/><text x="1.0806%" y="1407.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.17%)</title><rect x="0.8306%" y="1381" width="0.1661%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="1"/><text x="1.0806%" y="1391.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.17%)</title><rect x="0.8306%" y="1365" width="0.1661%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="1"/><text x="1.0806%" y="1375.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="0.8306%" y="1349" width="0.1661%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="1"/><text x="1.0806%" y="1359.50"></text></g><g><title>[unknown] (7 samples, 1.16%)</title><rect x="0.0000%" y="1637" width="1.1628%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="7"/><text x="0.2500%" y="1647.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.17%)</title><rect x="0.9967%" y="1621" width="0.1661%" height="15" fill="rgb(222,207,29)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1631.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.17%)</title><rect x="0.9967%" y="1605" width="0.1661%" height="15" fill="rgb(206,96,30)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1615.50"></text></g><g><title>std::panicking::try (1 samples, 0.17%)</title><rect x="0.9967%" y="1589" width="0.1661%" height="15" fill="rgb(218,138,4)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1599.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.17%)</title><rect x="0.9967%" y="1573" width="0.1661%" height="15" fill="rgb(250,191,14)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1583.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 0.17%)</title><rect x="0.9967%" y="1557" width="0.1661%" height="15" fill="rgb(239,60,40)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1567.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.17%)</title><rect x="0.9967%" y="1541" width="0.1661%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1551.50"></text></g><g><title>std::panicking::try (1 samples, 0.17%)</title><rect x="0.9967%" y="1525" width="0.1661%" height="15" fill="rgb(225,35,8)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1535.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.17%)</title><rect x="0.9967%" y="1509" width="0.1661%" height="15" fill="rgb(250,213,24)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1519.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.17%)</title><rect x="0.9967%" y="1493" width="0.1661%" height="15" fill="rgb(247,123,22)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1503.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 0.17%)</title><rect x="0.9967%" y="1477" width="0.1661%" height="15" fill="rgb(231,138,38)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1487.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.17%)</title><rect x="0.9967%" y="1461" width="0.1661%" height="15" fill="rgb(231,145,46)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1471.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.17%)</title><rect x="0.9967%" y="1445" width="0.1661%" height="15" fill="rgb(251,118,11)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1455.50"></text></g><g><title>demoparser::main (1 samples, 0.17%)</title><rect x="0.9967%" y="1429" width="0.1661%" height="15" fill="rgb(217,147,25)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1439.50"></text></g><g><title>demoparser::parsing::parser::Demo::start_parsing (1 samples, 0.17%)</title><rect x="0.9967%" y="1413" width="0.1661%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1423.50"></text></g><g><title>demoparser::parsing::parser::Demo::parse_cmd (1 samples, 0.17%)</title><rect x="0.9967%" y="1397" width="0.1661%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1407.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_datatable (1 samples, 0.17%)</title><rect x="0.9967%" y="1381" width="0.1661%" height="15" fill="rgb(227,1,9)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1391.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::flatten_dt (1 samples, 0.17%)</title><rect x="0.9967%" y="1365" width="0.1661%" height="15" fill="rgb(248,47,43)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1375.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (1 samples, 0.17%)</title><rect x="0.9967%" y="1349" width="0.1661%" height="15" fill="rgb(221,10,30)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1359.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (1 samples, 0.17%)</title><rect x="0.9967%" y="1333" width="0.1661%" height="15" fill="rgb(210,229,1)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1343.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1 samples, 0.17%)</title><rect x="0.9967%" y="1317" width="0.1661%" height="15" fill="rgb(222,148,37)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1327.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.17%)</title><rect x="0.9967%" y="1301" width="0.1661%" height="15" fill="rgb(234,67,33)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1311.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.17%)</title><rect x="0.9967%" y="1285" width="0.1661%" height="15" fill="rgb(247,98,35)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1295.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.17%)</title><rect x="0.9967%" y="1269" width="0.1661%" height="15" fill="rgb(247,138,52)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.17%)</title><rect x="0.9967%" y="1253" width="0.1661%" height="15" fill="rgb(213,79,30)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.17%)</title><rect x="0.9967%" y="1237" width="0.1661%" height="15" fill="rgb(246,177,23)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.17%)</title><rect x="0.9967%" y="1221" width="0.1661%" height="15" fill="rgb(230,62,27)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1231.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.17%)</title><rect x="0.9967%" y="1205" width="0.1661%" height="15" fill="rgb(216,154,8)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1215.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.17%)</title><rect x="0.9967%" y="1189" width="0.1661%" height="15" fill="rgb(244,35,45)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1199.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.17%)</title><rect x="0.9967%" y="1173" width="0.1661%" height="15" fill="rgb(251,115,12)" fg:x="6" fg:w="1"/><text x="1.2467%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::stringtables::StringTable&gt;&gt; (1 samples, 0.17%)</title><rect x="1.1628%" y="1365" width="0.1661%" height="15" fill="rgb(240,54,50)" fg:x="7" fg:w="1"/><text x="1.4128%" y="1375.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="1.1628%" y="1349" width="0.1661%" height="15" fill="rgb(233,84,52)" fg:x="7" fg:w="1"/><text x="1.4128%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::stringtables::StringTable]&gt; (1 samples, 0.17%)</title><rect x="1.1628%" y="1333" width="0.1661%" height="15" fill="rgb(207,117,47)" fg:x="7" fg:w="1"/><text x="1.4128%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::stringtables::StringTable&gt; (1 samples, 0.17%)</title><rect x="1.1628%" y="1317" width="0.1661%" height="15" fill="rgb(249,43,39)" fg:x="7" fg:w="1"/><text x="1.4128%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::stringtables::StField&gt;&gt; (1 samples, 0.17%)</title><rect x="1.1628%" y="1301" width="0.1661%" height="15" fill="rgb(209,38,44)" fg:x="7" fg:w="1"/><text x="1.4128%" y="1311.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="1.1628%" y="1285" width="0.1661%" height="15" fill="rgb(236,212,23)" fg:x="7" fg:w="1"/><text x="1.4128%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::stringtables::StField]&gt; (1 samples, 0.17%)</title><rect x="1.1628%" y="1269" width="0.1661%" height="15" fill="rgb(242,79,21)" fg:x="7" fg:w="1"/><text x="1.4128%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::stringtables::StField&gt; (1 samples, 0.17%)</title><rect x="1.1628%" y="1253" width="0.1661%" height="15" fill="rgb(211,96,35)" fg:x="7" fg:w="1"/><text x="1.4128%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.17%)</title><rect x="1.1628%" y="1237" width="0.1661%" height="15" fill="rgb(253,215,40)" fg:x="7" fg:w="1"/><text x="1.4128%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.17%)</title><rect x="1.1628%" y="1221" width="0.1661%" height="15" fill="rgb(211,81,21)" fg:x="7" fg:w="1"/><text x="1.4128%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.17%)</title><rect x="1.1628%" y="1205" width="0.1661%" height="15" fill="rgb(208,190,38)" fg:x="7" fg:w="1"/><text x="1.4128%" y="1215.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="1.1628%" y="1189" width="0.1661%" height="15" fill="rgb(235,213,38)" fg:x="7" fg:w="1"/><text x="1.4128%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.17%)</title><rect x="1.1628%" y="1173" width="0.1661%" height="15" fill="rgb(237,122,38)" fg:x="7" fg:w="1"/><text x="1.4128%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::stringtables::StringTable&gt;&gt; (1 samples, 0.17%)</title><rect x="1.3289%" y="1349" width="0.1661%" height="15" fill="rgb(244,218,35)" fg:x="8" fg:w="1"/><text x="1.5789%" y="1359.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="1.3289%" y="1333" width="0.1661%" height="15" fill="rgb(240,68,47)" fg:x="8" fg:w="1"/><text x="1.5789%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::stringtables::StringTable]&gt; (1 samples, 0.17%)</title><rect x="1.3289%" y="1317" width="0.1661%" height="15" fill="rgb(210,16,53)" fg:x="8" fg:w="1"/><text x="1.5789%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::stringtables::StringTable&gt; (1 samples, 0.17%)</title><rect x="1.3289%" y="1301" width="0.1661%" height="15" fill="rgb(235,124,12)" fg:x="8" fg:w="1"/><text x="1.5789%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::stringtables::StField&gt;&gt; (1 samples, 0.17%)</title><rect x="1.3289%" y="1285" width="0.1661%" height="15" fill="rgb(224,169,11)" fg:x="8" fg:w="1"/><text x="1.5789%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="1.3289%" y="1269" width="0.1661%" height="15" fill="rgb(250,166,2)" fg:x="8" fg:w="1"/><text x="1.5789%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::stringtables::StField]&gt; (1 samples, 0.17%)</title><rect x="1.3289%" y="1253" width="0.1661%" height="15" fill="rgb(242,216,29)" fg:x="8" fg:w="1"/><text x="1.5789%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::stringtables::StField&gt; (1 samples, 0.17%)</title><rect x="1.3289%" y="1237" width="0.1661%" height="15" fill="rgb(230,116,27)" fg:x="8" fg:w="1"/><text x="1.5789%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.17%)</title><rect x="1.3289%" y="1221" width="0.1661%" height="15" fill="rgb(228,99,48)" fg:x="8" fg:w="1"/><text x="1.5789%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.17%)</title><rect x="1.3289%" y="1205" width="0.1661%" height="15" fill="rgb(253,11,6)" fg:x="8" fg:w="1"/><text x="1.5789%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.17%)</title><rect x="1.3289%" y="1189" width="0.1661%" height="15" fill="rgb(247,143,39)" fg:x="8" fg:w="1"/><text x="1.5789%" y="1199.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="1.3289%" y="1173" width="0.1661%" height="15" fill="rgb(236,97,10)" fg:x="8" fg:w="1"/><text x="1.5789%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.17%)</title><rect x="1.3289%" y="1157" width="0.1661%" height="15" fill="rgb(233,208,19)" fg:x="8" fg:w="1"/><text x="1.5789%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt;&gt; (1 samples, 0.17%)</title><rect x="1.4950%" y="1349" width="0.1661%" height="15" fill="rgb(216,164,2)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.17%)</title><rect x="1.4950%" y="1333" width="0.1661%" height="15" fill="rgb(220,129,5)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.17%)</title><rect x="1.4950%" y="1317" width="0.1661%" height="15" fill="rgb(242,17,10)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable)&gt;&gt; (1 samples, 0.17%)</title><rect x="1.4950%" y="1301" width="0.1661%" height="15" fill="rgb(242,107,0)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1311.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="1.4950%" y="1285" width="0.1661%" height="15" fill="rgb(251,28,31)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1295.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.17%)</title><rect x="1.4950%" y="1269" width="0.1661%" height="15" fill="rgb(233,223,10)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1279.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.17%)</title><rect x="1.4950%" y="1253" width="0.1661%" height="15" fill="rgb(215,21,27)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1263.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.17%)</title><rect x="1.4950%" y="1237" width="0.1661%" height="15" fill="rgb(232,23,21)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable)&gt; (1 samples, 0.17%)</title><rect x="1.4950%" y="1221" width="0.1661%" height="15" fill="rgb(244,5,23)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::CSVCMsg_SendTable&gt; (1 samples, 0.17%)</title><rect x="1.4950%" y="1205" width="0.1661%" height="15" fill="rgb(226,81,46)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt;&gt; (1 samples, 0.17%)</title><rect x="1.4950%" y="1189" width="0.1661%" height="15" fill="rgb(247,70,30)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1199.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="1.4950%" y="1173" width="0.1661%" height="15" fill="rgb(212,68,19)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;[csgoproto::netmessages::csvcmsg_send_table::Sendprop_t]&gt; (1 samples, 0.17%)</title><rect x="1.4950%" y="1157" width="0.1661%" height="15" fill="rgb(240,187,13)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt; (1 samples, 0.17%)</title><rect x="1.4950%" y="1141" width="0.1661%" height="15" fill="rgb(223,113,26)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1 samples, 0.17%)</title><rect x="1.4950%" y="1125" width="0.1661%" height="15" fill="rgb(206,192,2)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.17%)</title><rect x="1.4950%" y="1109" width="0.1661%" height="15" fill="rgb(241,108,4)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.17%)</title><rect x="1.4950%" y="1093" width="0.1661%" height="15" fill="rgb(247,173,49)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.17%)</title><rect x="1.4950%" y="1077" width="0.1661%" height="15" fill="rgb(224,114,35)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1087.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="1.4950%" y="1061" width="0.1661%" height="15" fill="rgb(245,159,27)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.17%)</title><rect x="1.4950%" y="1045" width="0.1661%" height="15" fill="rgb(245,172,44)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1055.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.17%)</title><rect x="1.4950%" y="1029" width="0.1661%" height="15" fill="rgb(236,23,11)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1039.50"></text></g><g><title>mi_free (1 samples, 0.17%)</title><rect x="1.4950%" y="1013" width="0.1661%" height="15" fill="rgb(205,117,38)" fg:x="9" fg:w="1"/><text x="1.7450%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::Demo&gt; (4 samples, 0.66%)</title><rect x="1.3289%" y="1365" width="0.6645%" height="15" fill="rgb(237,72,25)" fg:x="8" fg:w="4"/><text x="1.5789%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::BytesVariant&gt; (2 samples, 0.33%)</title><rect x="1.6611%" y="1349" width="0.3322%" height="15" fill="rgb(244,70,9)" fg:x="10" fg:w="2"/><text x="1.9111%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap::Mmap&gt; (2 samples, 0.33%)</title><rect x="1.6611%" y="1333" width="0.3322%" height="15" fill="rgb(217,125,39)" fg:x="10" fg:w="2"/><text x="1.9111%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap::unix::MmapInner&gt; (2 samples, 0.33%)</title><rect x="1.6611%" y="1317" width="0.3322%" height="15" fill="rgb(235,36,10)" fg:x="10" fg:w="2"/><text x="1.9111%" y="1327.50"></text></g><g><title>&lt;memmap::unix::MmapInner as core::ops::drop::Drop&gt;::drop (2 samples, 0.33%)</title><rect x="1.6611%" y="1301" width="0.3322%" height="15" fill="rgb(251,123,47)" fg:x="10" fg:w="2"/><text x="1.9111%" y="1311.50"></text></g><g><title>__GI___munmap (2 samples, 0.33%)</title><rect x="1.6611%" y="1285" width="0.3322%" height="15" fill="rgb(221,13,13)" fg:x="10" fg:w="2"/><text x="1.9111%" y="1295.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.6611%" y="1269" width="0.3322%" height="15" fill="rgb(238,131,9)" fg:x="10" fg:w="2"/><text x="1.9111%" y="1279.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.6611%" y="1253" width="0.3322%" height="15" fill="rgb(211,50,8)" fg:x="10" fg:w="2"/><text x="1.9111%" y="1263.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.6611%" y="1237" width="0.3322%" height="15" fill="rgb(245,182,24)" fg:x="10" fg:w="2"/><text x="1.9111%" y="1247.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.6611%" y="1221" width="0.3322%" height="15" fill="rgb(242,14,37)" fg:x="10" fg:w="2"/><text x="1.9111%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.6611%" y="1205" width="0.3322%" height="15" fill="rgb(246,228,12)" fg:x="10" fg:w="2"/><text x="1.9111%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.6611%" y="1189" width="0.3322%" height="15" fill="rgb(213,55,15)" fg:x="10" fg:w="2"/><text x="1.9111%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.6611%" y="1173" width="0.3322%" height="15" fill="rgb(209,9,3)" fg:x="10" fg:w="2"/><text x="1.9111%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.6611%" y="1157" width="0.3322%" height="15" fill="rgb(230,59,30)" fg:x="10" fg:w="2"/><text x="1.9111%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.6611%" y="1141" width="0.3322%" height="15" fill="rgb(209,121,21)" fg:x="10" fg:w="2"/><text x="1.9111%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.6611%" y="1125" width="0.3322%" height="15" fill="rgb(220,109,13)" fg:x="10" fg:w="2"/><text x="1.9111%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.6611%" y="1109" width="0.3322%" height="15" fill="rgb(232,18,1)" fg:x="10" fg:w="2"/><text x="1.9111%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::BytesVariant&gt; (2 samples, 0.33%)</title><rect x="1.9934%" y="1365" width="0.3322%" height="15" fill="rgb(215,41,42)" fg:x="12" fg:w="2"/><text x="2.2434%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap::Mmap&gt; (2 samples, 0.33%)</title><rect x="1.9934%" y="1349" width="0.3322%" height="15" fill="rgb(224,123,36)" fg:x="12" fg:w="2"/><text x="2.2434%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap::unix::MmapInner&gt; (2 samples, 0.33%)</title><rect x="1.9934%" y="1333" width="0.3322%" height="15" fill="rgb(240,125,3)" fg:x="12" fg:w="2"/><text x="2.2434%" y="1343.50"></text></g><g><title>&lt;memmap::unix::MmapInner as core::ops::drop::Drop&gt;::drop (2 samples, 0.33%)</title><rect x="1.9934%" y="1317" width="0.3322%" height="15" fill="rgb(205,98,50)" fg:x="12" fg:w="2"/><text x="2.2434%" y="1327.50"></text></g><g><title>__GI___munmap (2 samples, 0.33%)</title><rect x="1.9934%" y="1301" width="0.3322%" height="15" fill="rgb(205,185,37)" fg:x="12" fg:w="2"/><text x="2.2434%" y="1311.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.9934%" y="1285" width="0.3322%" height="15" fill="rgb(238,207,15)" fg:x="12" fg:w="2"/><text x="2.2434%" y="1295.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.9934%" y="1269" width="0.3322%" height="15" fill="rgb(213,199,42)" fg:x="12" fg:w="2"/><text x="2.2434%" y="1279.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.9934%" y="1253" width="0.3322%" height="15" fill="rgb(235,201,11)" fg:x="12" fg:w="2"/><text x="2.2434%" y="1263.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.9934%" y="1237" width="0.3322%" height="15" fill="rgb(207,46,11)" fg:x="12" fg:w="2"/><text x="2.2434%" y="1247.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.9934%" y="1221" width="0.3322%" height="15" fill="rgb(241,35,35)" fg:x="12" fg:w="2"/><text x="2.2434%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.9934%" y="1205" width="0.3322%" height="15" fill="rgb(243,32,47)" fg:x="12" fg:w="2"/><text x="2.2434%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.9934%" y="1189" width="0.3322%" height="15" fill="rgb(247,202,23)" fg:x="12" fg:w="2"/><text x="2.2434%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.9934%" y="1173" width="0.3322%" height="15" fill="rgb(219,102,11)" fg:x="12" fg:w="2"/><text x="2.2434%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.9934%" y="1157" width="0.3322%" height="15" fill="rgb(243,110,44)" fg:x="12" fg:w="2"/><text x="2.2434%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.9934%" y="1141" width="0.3322%" height="15" fill="rgb(222,74,54)" fg:x="12" fg:w="2"/><text x="2.2434%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="1.9934%" y="1125" width="0.3322%" height="15" fill="rgb(216,99,12)" fg:x="12" fg:w="2"/><text x="2.2434%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.17%)</title><rect x="2.3256%" y="1365" width="0.1661%" height="15" fill="rgb(226,22,26)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.17%)</title><rect x="2.3256%" y="1349" width="0.1661%" height="15" fill="rgb(217,163,10)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,demoparser::parsing::data_table::ServerClass)&gt;&gt; (1 samples, 0.17%)</title><rect x="2.3256%" y="1333" width="0.1661%" height="15" fill="rgb(213,25,53)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1343.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="2.3256%" y="1317" width="0.1661%" height="15" fill="rgb(252,105,26)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1327.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.17%)</title><rect x="2.3256%" y="1301" width="0.1661%" height="15" fill="rgb(220,39,43)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1311.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.17%)</title><rect x="2.3256%" y="1285" width="0.1661%" height="15" fill="rgb(229,68,48)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1295.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.17%)</title><rect x="2.3256%" y="1269" width="0.1661%" height="15" fill="rgb(252,8,32)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u16,demoparser::parsing::data_table::ServerClass)&gt; (1 samples, 0.17%)</title><rect x="2.3256%" y="1253" width="0.1661%" height="15" fill="rgb(223,20,43)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::data_table::ServerClass&gt; (1 samples, 0.17%)</title><rect x="2.3256%" y="1237" width="0.1661%" height="15" fill="rgb(229,81,49)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::entities::Prop&gt;&gt; (1 samples, 0.17%)</title><rect x="2.3256%" y="1221" width="0.1661%" height="15" fill="rgb(236,28,36)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1231.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="2.3256%" y="1205" width="0.1661%" height="15" fill="rgb(249,185,26)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::entities::Prop]&gt; (1 samples, 0.17%)</title><rect x="2.3256%" y="1189" width="0.1661%" height="15" fill="rgb(249,174,33)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::entities::Prop&gt; (1 samples, 0.17%)</title><rect x="2.3256%" y="1173" width="0.1661%" height="15" fill="rgb(233,201,37)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.17%)</title><rect x="2.3256%" y="1157" width="0.1661%" height="15" fill="rgb(221,78,26)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.17%)</title><rect x="2.3256%" y="1141" width="0.1661%" height="15" fill="rgb(250,127,30)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.17%)</title><rect x="2.3256%" y="1125" width="0.1661%" height="15" fill="rgb(230,49,44)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1135.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="2.3256%" y="1109" width="0.1661%" height="15" fill="rgb(229,67,23)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1119.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.17%)</title><rect x="2.3256%" y="1093" width="0.1661%" height="15" fill="rgb(249,83,47)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1103.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.17%)</title><rect x="2.3256%" y="1077" width="0.1661%" height="15" fill="rgb(215,43,3)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1087.50"></text></g><g><title>mi_free (1 samples, 0.17%)</title><rect x="2.3256%" y="1061" width="0.1661%" height="15" fill="rgb(238,154,13)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1071.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.17%)</title><rect x="2.3256%" y="1045" width="0.1661%" height="15" fill="rgb(219,56,2)" fg:x="14" fg:w="1"/><text x="2.5756%" y="1055.50"></text></g><g><title>csgoproto::netmessages::file_descriptor (1 samples, 0.17%)</title><rect x="2.4917%" y="1365" width="0.1661%" height="15" fill="rgb(233,0,4)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1375.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.17%)</title><rect x="2.4917%" y="1349" width="0.1661%" height="15" fill="rgb(235,30,7)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1359.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.17%)</title><rect x="2.4917%" y="1333" width="0.1661%" height="15" fill="rgb(250,79,13)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1343.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.17%)</title><rect x="2.4917%" y="1317" width="0.1661%" height="15" fill="rgb(211,146,34)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1327.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.17%)</title><rect x="2.4917%" y="1301" width="0.1661%" height="15" fill="rgb(228,22,38)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1311.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.17%)</title><rect x="2.4917%" y="1285" width="0.1661%" height="15" fill="rgb(235,168,5)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1295.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.17%)</title><rect x="2.4917%" y="1269" width="0.1661%" height="15" fill="rgb(221,155,16)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1279.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.17%)</title><rect x="2.4917%" y="1253" width="0.1661%" height="15" fill="rgb(215,215,53)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1263.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.17%)</title><rect x="2.4917%" y="1237" width="0.1661%" height="15" fill="rgb(223,4,10)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1247.50"></text></g><g><title>csgoproto::netmessages::file_descriptor::{{closure}} (1 samples, 0.17%)</title><rect x="2.4917%" y="1221" width="0.1661%" height="15" fill="rgb(234,103,6)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1231.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.17%)</title><rect x="2.4917%" y="1205" width="0.1661%" height="15" fill="rgb(227,97,0)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1215.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.17%)</title><rect x="2.4917%" y="1189" width="0.1661%" height="15" fill="rgb(234,150,53)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1199.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.17%)</title><rect x="2.4917%" y="1173" width="0.1661%" height="15" fill="rgb(228,201,54)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1183.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.17%)</title><rect x="2.4917%" y="1157" width="0.1661%" height="15" fill="rgb(222,22,37)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1167.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.17%)</title><rect x="2.4917%" y="1141" width="0.1661%" height="15" fill="rgb(237,53,32)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1151.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.17%)</title><rect x="2.4917%" y="1125" width="0.1661%" height="15" fill="rgb(233,25,53)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1135.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.17%)</title><rect x="2.4917%" y="1109" width="0.1661%" height="15" fill="rgb(210,40,34)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1119.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.17%)</title><rect x="2.4917%" y="1093" width="0.1661%" height="15" fill="rgb(241,220,44)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1103.50"></text></g><g><title>csgoproto::netmessages::file_descriptor::{{closure}}::{{closure}} (1 samples, 0.17%)</title><rect x="2.4917%" y="1077" width="0.1661%" height="15" fill="rgb(235,28,35)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1087.50"></text></g><g><title>protobuf::descriptor::file_descriptor (1 samples, 0.17%)</title><rect x="2.4917%" y="1061" width="0.1661%" height="15" fill="rgb(210,56,17)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1071.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.17%)</title><rect x="2.4917%" y="1045" width="0.1661%" height="15" fill="rgb(224,130,29)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1055.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.17%)</title><rect x="2.4917%" y="1029" width="0.1661%" height="15" fill="rgb(235,212,8)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1039.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.17%)</title><rect x="2.4917%" y="1013" width="0.1661%" height="15" fill="rgb(223,33,50)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1023.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.17%)</title><rect x="2.4917%" y="997" width="0.1661%" height="15" fill="rgb(219,149,13)" fg:x="15" fg:w="1"/><text x="2.7417%" y="1007.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.17%)</title><rect x="2.4917%" y="981" width="0.1661%" height="15" fill="rgb(250,156,29)" fg:x="15" fg:w="1"/><text x="2.7417%" y="991.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.17%)</title><rect x="2.4917%" y="965" width="0.1661%" height="15" fill="rgb(216,193,19)" fg:x="15" fg:w="1"/><text x="2.7417%" y="975.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.17%)</title><rect x="2.4917%" y="949" width="0.1661%" height="15" fill="rgb(216,135,14)" fg:x="15" fg:w="1"/><text x="2.7417%" y="959.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.17%)</title><rect x="2.4917%" y="933" width="0.1661%" height="15" fill="rgb(241,47,5)" fg:x="15" fg:w="1"/><text x="2.7417%" y="943.50"></text></g><g><title>protobuf::descriptor::file_descriptor::{{closure}} (1 samples, 0.17%)</title><rect x="2.4917%" y="917" width="0.1661%" height="15" fill="rgb(233,42,35)" fg:x="15" fg:w="1"/><text x="2.7417%" y="927.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.17%)</title><rect x="2.4917%" y="901" width="0.1661%" height="15" fill="rgb(231,13,6)" fg:x="15" fg:w="1"/><text x="2.7417%" y="911.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.17%)</title><rect x="2.4917%" y="885" width="0.1661%" height="15" fill="rgb(207,181,40)" fg:x="15" fg:w="1"/><text x="2.7417%" y="895.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.17%)</title><rect x="2.4917%" y="869" width="0.1661%" height="15" fill="rgb(254,173,49)" fg:x="15" fg:w="1"/><text x="2.7417%" y="879.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.17%)</title><rect x="2.4917%" y="853" width="0.1661%" height="15" fill="rgb(221,1,38)" fg:x="15" fg:w="1"/><text x="2.7417%" y="863.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.17%)</title><rect x="2.4917%" y="837" width="0.1661%" height="15" fill="rgb(206,124,46)" fg:x="15" fg:w="1"/><text x="2.7417%" y="847.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.17%)</title><rect x="2.4917%" y="821" width="0.1661%" height="15" fill="rgb(249,21,11)" fg:x="15" fg:w="1"/><text x="2.7417%" y="831.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.17%)</title><rect x="2.4917%" y="805" width="0.1661%" height="15" fill="rgb(222,201,40)" fg:x="15" fg:w="1"/><text x="2.7417%" y="815.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.17%)</title><rect x="2.4917%" y="789" width="0.1661%" height="15" fill="rgb(235,61,29)" fg:x="15" fg:w="1"/><text x="2.7417%" y="799.50"></text></g><g><title>protobuf::descriptor::file_descriptor::{{closure}}::{{closure}} (1 samples, 0.17%)</title><rect x="2.4917%" y="773" width="0.1661%" height="15" fill="rgb(219,207,3)" fg:x="15" fg:w="1"/><text x="2.7417%" y="783.50"></text></g><g><title>protobuf::descriptor::file_descriptor_proto (1 samples, 0.17%)</title><rect x="2.4917%" y="757" width="0.1661%" height="15" fill="rgb(222,56,46)" fg:x="15" fg:w="1"/><text x="2.7417%" y="767.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.17%)</title><rect x="2.4917%" y="741" width="0.1661%" height="15" fill="rgb(239,76,54)" fg:x="15" fg:w="1"/><text x="2.7417%" y="751.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.17%)</title><rect x="2.4917%" y="725" width="0.1661%" height="15" fill="rgb(231,124,27)" fg:x="15" fg:w="1"/><text x="2.7417%" y="735.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.17%)</title><rect x="2.4917%" y="709" width="0.1661%" height="15" fill="rgb(249,195,6)" fg:x="15" fg:w="1"/><text x="2.7417%" y="719.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.17%)</title><rect x="2.4917%" y="693" width="0.1661%" height="15" fill="rgb(237,174,47)" fg:x="15" fg:w="1"/><text x="2.7417%" y="703.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.17%)</title><rect x="2.4917%" y="677" width="0.1661%" height="15" fill="rgb(206,201,31)" fg:x="15" fg:w="1"/><text x="2.7417%" y="687.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.17%)</title><rect x="2.4917%" y="661" width="0.1661%" height="15" fill="rgb(231,57,52)" fg:x="15" fg:w="1"/><text x="2.7417%" y="671.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.17%)</title><rect x="2.4917%" y="645" width="0.1661%" height="15" fill="rgb(248,177,22)" fg:x="15" fg:w="1"/><text x="2.7417%" y="655.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.17%)</title><rect x="2.4917%" y="629" width="0.1661%" height="15" fill="rgb(215,211,37)" fg:x="15" fg:w="1"/><text x="2.7417%" y="639.50"></text></g><g><title>protobuf::descriptor::file_descriptor_proto::{{closure}} (1 samples, 0.17%)</title><rect x="2.4917%" y="613" width="0.1661%" height="15" fill="rgb(241,128,51)" fg:x="15" fg:w="1"/><text x="2.7417%" y="623.50"></text></g><g><title>protobuf::message::Message::parse_from_bytes (1 samples, 0.17%)</title><rect x="2.4917%" y="597" width="0.1661%" height="15" fill="rgb(227,165,31)" fg:x="15" fg:w="1"/><text x="2.7417%" y="607.50"></text></g><g><title>protobuf::message::Message::parse_from (1 samples, 0.17%)</title><rect x="2.4917%" y="581" width="0.1661%" height="15" fill="rgb(228,167,24)" fg:x="15" fg:w="1"/><text x="2.7417%" y="591.50"></text></g><g><title>&lt;protobuf::descriptor::FileDescriptorProto as protobuf::message::Message&gt;::merge_from (1 samples, 0.17%)</title><rect x="2.4917%" y="565" width="0.1661%" height="15" fill="rgb(228,143,12)" fg:x="15" fg:w="1"/><text x="2.7417%" y="575.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (1 samples, 0.17%)</title><rect x="2.4917%" y="549" width="0.1661%" height="15" fill="rgb(249,149,8)" fg:x="15" fg:w="1"/><text x="2.7417%" y="559.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (1 samples, 0.17%)</title><rect x="2.4917%" y="533" width="0.1661%" height="15" fill="rgb(243,35,44)" fg:x="15" fg:w="1"/><text x="2.7417%" y="543.50"></text></g><g><title>&lt;protobuf::descriptor::DescriptorProto as protobuf::message::Message&gt;::merge_from (1 samples, 0.17%)</title><rect x="2.4917%" y="517" width="0.1661%" height="15" fill="rgb(246,89,9)" fg:x="15" fg:w="1"/><text x="2.7417%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.17%)</title><rect x="2.4917%" y="501" width="0.1661%" height="15" fill="rgb(233,213,13)" fg:x="15" fg:w="1"/><text x="2.7417%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.17%)</title><rect x="2.4917%" y="485" width="0.1661%" height="15" fill="rgb(233,141,41)" fg:x="15" fg:w="1"/><text x="2.7417%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.17%)</title><rect x="2.4917%" y="469" width="0.1661%" height="15" fill="rgb(239,167,4)" fg:x="15" fg:w="1"/><text x="2.7417%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.17%)</title><rect x="2.4917%" y="453" width="0.1661%" height="15" fill="rgb(209,217,16)" fg:x="15" fg:w="1"/><text x="2.7417%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.17%)</title><rect x="2.4917%" y="437" width="0.1661%" height="15" fill="rgb(219,88,35)" fg:x="15" fg:w="1"/><text x="2.7417%" y="447.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.17%)</title><rect x="2.4917%" y="421" width="0.1661%" height="15" fill="rgb(220,193,23)" fg:x="15" fg:w="1"/><text x="2.7417%" y="431.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.17%)</title><rect x="2.4917%" y="405" width="0.1661%" height="15" fill="rgb(230,90,52)" fg:x="15" fg:w="1"/><text x="2.7417%" y="415.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.17%)</title><rect x="2.4917%" y="389" width="0.1661%" height="15" fill="rgb(252,106,19)" fg:x="15" fg:w="1"/><text x="2.7417%" y="399.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.17%)</title><rect x="2.4917%" y="373" width="0.1661%" height="15" fill="rgb(206,74,20)" fg:x="15" fg:w="1"/><text x="2.7417%" y="383.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.17%)</title><rect x="2.4917%" y="357" width="0.1661%" height="15" fill="rgb(230,138,44)" fg:x="15" fg:w="1"/><text x="2.7417%" y="367.50"></text></g><g><title>mi_find_page (1 samples, 0.17%)</title><rect x="2.4917%" y="341" width="0.1661%" height="15" fill="rgb(235,182,43)" fg:x="15" fg:w="1"/><text x="2.7417%" y="351.50"></text></g><g><title>mi_find_free_page (1 samples, 0.17%)</title><rect x="2.4917%" y="325" width="0.1661%" height="15" fill="rgb(242,16,51)" fg:x="15" fg:w="1"/><text x="2.7417%" y="335.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 0.17%)</title><rect x="2.4917%" y="309" width="0.1661%" height="15" fill="rgb(248,9,4)" fg:x="15" fg:w="1"/><text x="2.7417%" y="319.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.17%)</title><rect x="2.4917%" y="293" width="0.1661%" height="15" fill="rgb(210,31,22)" fg:x="15" fg:w="1"/><text x="2.7417%" y="303.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.17%)</title><rect x="2.4917%" y="277" width="0.1661%" height="15" fill="rgb(239,54,39)" fg:x="15" fg:w="1"/><text x="2.7417%" y="287.50"></text></g><g><title>mi_page_free_list_extend (1 samples, 0.17%)</title><rect x="2.4917%" y="261" width="0.1661%" height="15" fill="rgb(230,99,41)" fg:x="15" fg:w="1"/><text x="2.7417%" y="271.50"></text></g><g><title>mi_block_set_next (1 samples, 0.17%)</title><rect x="2.4917%" y="245" width="0.1661%" height="15" fill="rgb(253,106,12)" fg:x="15" fg:w="1"/><text x="2.7417%" y="255.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.17%)</title><rect x="2.4917%" y="229" width="0.1661%" height="15" fill="rgb(213,46,41)" fg:x="15" fg:w="1"/><text x="2.7417%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.4917%" y="213" width="0.1661%" height="15" fill="rgb(215,133,35)" fg:x="15" fg:w="1"/><text x="2.7417%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.4917%" y="197" width="0.1661%" height="15" fill="rgb(213,28,5)" fg:x="15" fg:w="1"/><text x="2.7417%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.4917%" y="181" width="0.1661%" height="15" fill="rgb(215,77,49)" fg:x="15" fg:w="1"/><text x="2.7417%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.4917%" y="165" width="0.1661%" height="15" fill="rgb(248,100,22)" fg:x="15" fg:w="1"/><text x="2.7417%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.4917%" y="149" width="0.1661%" height="15" fill="rgb(208,67,9)" fg:x="15" fg:w="1"/><text x="2.7417%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.4917%" y="133" width="0.1661%" height="15" fill="rgb(219,133,21)" fg:x="15" fg:w="1"/><text x="2.7417%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.4917%" y="117" width="0.1661%" height="15" fill="rgb(246,46,29)" fg:x="15" fg:w="1"/><text x="2.7417%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.4917%" y="101" width="0.1661%" height="15" fill="rgb(246,185,52)" fg:x="15" fg:w="1"/><text x="2.7417%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.4917%" y="85" width="0.1661%" height="15" fill="rgb(252,136,11)" fg:x="15" fg:w="1"/><text x="2.7417%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.4917%" y="69" width="0.1661%" height="15" fill="rgb(219,138,53)" fg:x="15" fg:w="1"/><text x="2.7417%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.4917%" y="53" width="0.1661%" height="15" fill="rgb(211,51,23)" fg:x="15" fg:w="1"/><text x="2.7417%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="2.4917%" y="37" width="0.1661%" height="15" fill="rgb(247,221,28)" fg:x="15" fg:w="1"/><text x="2.7417%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;&amp;str&gt;&gt;::eq (1 samples, 0.17%)</title><rect x="3.6545%" y="1333" width="0.1661%" height="15" fill="rgb(251,222,45)" fg:x="22" fg:w="1"/><text x="3.9045%" y="1343.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.17%)</title><rect x="3.6545%" y="1317" width="0.1661%" height="15" fill="rgb(217,162,53)" fg:x="22" fg:w="1"/><text x="3.9045%" y="1327.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.17%)</title><rect x="3.6545%" y="1301" width="0.1661%" height="15" fill="rgb(229,93,14)" fg:x="22" fg:w="1"/><text x="3.9045%" y="1311.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.17%)</title><rect x="3.6545%" y="1285" width="0.1661%" height="15" fill="rgb(209,67,49)" fg:x="22" fg:w="1"/><text x="3.9045%" y="1295.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.17%)</title><rect x="3.6545%" y="1269" width="0.1661%" height="15" fill="rgb(213,87,29)" fg:x="22" fg:w="1"/><text x="3.9045%" y="1279.50"></text></g><g><title>&lt;std::collections::hash::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.33%)</title><rect x="3.8206%" y="1333" width="0.3322%" height="15" fill="rgb(205,151,52)" fg:x="23" fg:w="2"/><text x="4.0706%" y="1343.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.33%)</title><rect x="3.8206%" y="1317" width="0.3322%" height="15" fill="rgb(253,215,39)" fg:x="23" fg:w="2"/><text x="4.0706%" y="1327.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.33%)</title><rect x="3.8206%" y="1301" width="0.3322%" height="15" fill="rgb(221,220,41)" fg:x="23" fg:w="2"/><text x="4.0706%" y="1311.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.33%)</title><rect x="3.8206%" y="1285" width="0.3322%" height="15" fill="rgb(218,133,21)" fg:x="23" fg:w="2"/><text x="4.0706%" y="1295.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.17%)</title><rect x="3.9867%" y="1269" width="0.1661%" height="15" fill="rgb(221,193,43)" fg:x="24" fg:w="1"/><text x="4.2367%" y="1279.50"></text></g><g><title>demoparser::parsing::collect_data::&lt;impl demoparser::parsing::parser::Demo&gt;::collect_player_data (15 samples, 2.49%)</title><rect x="2.6578%" y="1349" width="2.4917%" height="15" fill="rgb(240,128,52)" fg:x="16" fg:w="15"/><text x="2.9078%" y="1359.50">de..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (6 samples, 1.00%)</title><rect x="4.1528%" y="1333" width="0.9967%" height="15" fill="rgb(253,114,12)" fg:x="25" fg:w="6"/><text x="4.4028%" y="1343.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (6 samples, 1.00%)</title><rect x="4.1528%" y="1317" width="0.9967%" height="15" fill="rgb(215,223,47)" fg:x="25" fg:w="6"/><text x="4.4028%" y="1327.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (6 samples, 1.00%)</title><rect x="4.1528%" y="1301" width="0.9967%" height="15" fill="rgb(248,225,23)" fg:x="25" fg:w="6"/><text x="4.4028%" y="1311.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 1.00%)</title><rect x="4.1528%" y="1285" width="0.9967%" height="15" fill="rgb(250,108,0)" fg:x="25" fg:w="6"/><text x="4.4028%" y="1295.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (6 samples, 1.00%)</title><rect x="4.1528%" y="1269" width="0.9967%" height="15" fill="rgb(228,208,7)" fg:x="25" fg:w="6"/><text x="4.4028%" y="1279.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6 samples, 1.00%)</title><rect x="4.1528%" y="1253" width="0.9967%" height="15" fill="rgb(244,45,10)" fg:x="25" fg:w="6"/><text x="4.4028%" y="1263.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (6 samples, 1.00%)</title><rect x="4.1528%" y="1237" width="0.9967%" height="15" fill="rgb(207,125,25)" fg:x="25" fg:w="6"/><text x="4.4028%" y="1247.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.17%)</title><rect x="4.9834%" y="1221" width="0.1661%" height="15" fill="rgb(210,195,18)" fg:x="30" fg:w="1"/><text x="5.2334%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.17%)</title><rect x="5.1495%" y="1285" width="0.1661%" height="15" fill="rgb(249,80,12)" fg:x="31" fg:w="1"/><text x="5.3995%" y="1295.50"></text></g><g><title>core::ptr::write (1 samples, 0.17%)</title><rect x="5.1495%" y="1269" width="0.1661%" height="15" fill="rgb(221,65,9)" fg:x="31" fg:w="1"/><text x="5.3995%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.1495%" y="1253" width="0.1661%" height="15" fill="rgb(235,49,36)" fg:x="31" fg:w="1"/><text x="5.3995%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.1495%" y="1237" width="0.1661%" height="15" fill="rgb(225,32,20)" fg:x="31" fg:w="1"/><text x="5.3995%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.1495%" y="1221" width="0.1661%" height="15" fill="rgb(215,141,46)" fg:x="31" fg:w="1"/><text x="5.3995%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.1495%" y="1205" width="0.1661%" height="15" fill="rgb(250,160,47)" fg:x="31" fg:w="1"/><text x="5.3995%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.1495%" y="1189" width="0.1661%" height="15" fill="rgb(216,222,40)" fg:x="31" fg:w="1"/><text x="5.3995%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.1495%" y="1173" width="0.1661%" height="15" fill="rgb(234,217,39)" fg:x="31" fg:w="1"/><text x="5.3995%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.1495%" y="1157" width="0.1661%" height="15" fill="rgb(207,178,40)" fg:x="31" fg:w="1"/><text x="5.3995%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.1495%" y="1141" width="0.1661%" height="15" fill="rgb(221,136,13)" fg:x="31" fg:w="1"/><text x="5.3995%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.1495%" y="1125" width="0.1661%" height="15" fill="rgb(249,199,10)" fg:x="31" fg:w="1"/><text x="5.3995%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.1495%" y="1109" width="0.1661%" height="15" fill="rgb(249,222,13)" fg:x="31" fg:w="1"/><text x="5.3995%" y="1119.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1 samples, 0.17%)</title><rect x="5.3156%" y="1269" width="0.1661%" height="15" fill="rgb(244,185,38)" fg:x="32" fg:w="1"/><text x="5.5656%" y="1279.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.17%)</title><rect x="5.3156%" y="1253" width="0.1661%" height="15" fill="rgb(236,202,9)" fg:x="32" fg:w="1"/><text x="5.5656%" y="1263.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.17%)</title><rect x="5.3156%" y="1237" width="0.1661%" height="15" fill="rgb(250,229,37)" fg:x="32" fg:w="1"/><text x="5.5656%" y="1247.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.17%)</title><rect x="5.3156%" y="1221" width="0.1661%" height="15" fill="rgb(206,174,23)" fg:x="32" fg:w="1"/><text x="5.5656%" y="1231.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.17%)</title><rect x="5.3156%" y="1205" width="0.1661%" height="15" fill="rgb(211,33,43)" fg:x="32" fg:w="1"/><text x="5.5656%" y="1215.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.17%)</title><rect x="5.3156%" y="1189" width="0.1661%" height="15" fill="rgb(245,58,50)" fg:x="32" fg:w="1"/><text x="5.5656%" y="1199.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.17%)</title><rect x="5.3156%" y="1173" width="0.1661%" height="15" fill="rgb(244,68,36)" fg:x="32" fg:w="1"/><text x="5.5656%" y="1183.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.17%)</title><rect x="5.3156%" y="1157" width="0.1661%" height="15" fill="rgb(232,229,15)" fg:x="32" fg:w="1"/><text x="5.5656%" y="1167.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.17%)</title><rect x="5.3156%" y="1141" width="0.1661%" height="15" fill="rgb(254,30,23)" fg:x="32" fg:w="1"/><text x="5.5656%" y="1151.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.17%)</title><rect x="5.3156%" y="1125" width="0.1661%" height="15" fill="rgb(235,160,14)" fg:x="32" fg:w="1"/><text x="5.5656%" y="1135.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="5.3156%" y="1109" width="0.1661%" height="15" fill="rgb(212,155,44)" fg:x="32" fg:w="1"/><text x="5.5656%" y="1119.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.50%)</title><rect x="5.4817%" y="1269" width="0.4983%" height="15" fill="rgb(226,2,50)" fg:x="33" fg:w="3"/><text x="5.7317%" y="1279.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.50%)</title><rect x="5.4817%" y="1253" width="0.4983%" height="15" fill="rgb(234,177,6)" fg:x="33" fg:w="3"/><text x="5.7317%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.50%)</title><rect x="5.4817%" y="1237" width="0.4983%" height="15" fill="rgb(217,24,9)" fg:x="33" fg:w="3"/><text x="5.7317%" y="1247.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.50%)</title><rect x="5.4817%" y="1221" width="0.4983%" height="15" fill="rgb(220,13,46)" fg:x="33" fg:w="3"/><text x="5.7317%" y="1231.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.50%)</title><rect x="5.4817%" y="1205" width="0.4983%" height="15" fill="rgb(239,221,27)" fg:x="33" fg:w="3"/><text x="5.7317%" y="1215.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.50%)</title><rect x="5.4817%" y="1189" width="0.4983%" height="15" fill="rgb(222,198,25)" fg:x="33" fg:w="3"/><text x="5.7317%" y="1199.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.50%)</title><rect x="5.4817%" y="1173" width="0.4983%" height="15" fill="rgb(211,99,13)" fg:x="33" fg:w="3"/><text x="5.7317%" y="1183.50"></text></g><g><title>_mi_heap_realloc_zero (3 samples, 0.50%)</title><rect x="5.4817%" y="1157" width="0.4983%" height="15" fill="rgb(232,111,31)" fg:x="33" fg:w="3"/><text x="5.7317%" y="1167.50"></text></g><g><title>_mi_memcpy_aligned (3 samples, 0.50%)</title><rect x="5.4817%" y="1141" width="0.4983%" height="15" fill="rgb(245,82,37)" fg:x="33" fg:w="3"/><text x="5.7317%" y="1151.50"></text></g><g><title>_mi_memcpy (3 samples, 0.50%)</title><rect x="5.4817%" y="1125" width="0.4983%" height="15" fill="rgb(227,149,46)" fg:x="33" fg:w="3"/><text x="5.7317%" y="1135.50"></text></g><g><title>memcpy (3 samples, 0.50%)</title><rect x="5.4817%" y="1109" width="0.4983%" height="15" fill="rgb(218,36,50)" fg:x="33" fg:w="3"/><text x="5.7317%" y="1119.50"></text></g><g><title>[libc.so.6] (3 samples, 0.50%)</title><rect x="5.4817%" y="1093" width="0.4983%" height="15" fill="rgb(226,80,48)" fg:x="33" fg:w="3"/><text x="5.7317%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="5.6478%" y="1077" width="0.3322%" height="15" fill="rgb(238,224,15)" fg:x="34" fg:w="2"/><text x="5.8978%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.8140%" y="1061" width="0.1661%" height="15" fill="rgb(241,136,10)" fg:x="35" fg:w="1"/><text x="6.0640%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.8140%" y="1045" width="0.1661%" height="15" fill="rgb(208,32,45)" fg:x="35" fg:w="1"/><text x="6.0640%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.8140%" y="1029" width="0.1661%" height="15" fill="rgb(207,135,9)" fg:x="35" fg:w="1"/><text x="6.0640%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.8140%" y="1013" width="0.1661%" height="15" fill="rgb(206,86,44)" fg:x="35" fg:w="1"/><text x="6.0640%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.8140%" y="997" width="0.1661%" height="15" fill="rgb(245,177,15)" fg:x="35" fg:w="1"/><text x="6.0640%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.8140%" y="981" width="0.1661%" height="15" fill="rgb(206,64,50)" fg:x="35" fg:w="1"/><text x="6.0640%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.8140%" y="965" width="0.1661%" height="15" fill="rgb(234,36,40)" fg:x="35" fg:w="1"/><text x="6.0640%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.8140%" y="949" width="0.1661%" height="15" fill="rgb(213,64,8)" fg:x="35" fg:w="1"/><text x="6.0640%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.8140%" y="933" width="0.1661%" height="15" fill="rgb(210,75,36)" fg:x="35" fg:w="1"/><text x="6.0640%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.8140%" y="917" width="0.1661%" height="15" fill="rgb(229,88,21)" fg:x="35" fg:w="1"/><text x="6.0640%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="5.8140%" y="901" width="0.1661%" height="15" fill="rgb(252,204,47)" fg:x="35" fg:w="1"/><text x="6.0640%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (1 samples, 0.17%)</title><rect x="6.1462%" y="1253" width="0.1661%" height="15" fill="rgb(208,77,27)" fg:x="37" fg:w="1"/><text x="6.3962%" y="1263.50"></text></g><g><title>alloc::slice::merge_sort (1 samples, 0.17%)</title><rect x="6.1462%" y="1237" width="0.1661%" height="15" fill="rgb(221,76,26)" fg:x="37" fg:w="1"/><text x="6.3962%" y="1247.50"></text></g><g><title>alloc::slice::merge (1 samples, 0.17%)</title><rect x="6.1462%" y="1221" width="0.1661%" height="15" fill="rgb(225,139,18)" fg:x="37" fg:w="1"/><text x="6.3962%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::slice::merge::MergeHole&lt;demoparser::parsing::entities::Prop&gt;&gt; (1 samples, 0.17%)</title><rect x="6.1462%" y="1205" width="0.1661%" height="15" fill="rgb(230,137,11)" fg:x="37" fg:w="1"/><text x="6.3962%" y="1215.50"></text></g><g><title>&lt;alloc::slice::merge::MergeHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="6.1462%" y="1189" width="0.1661%" height="15" fill="rgb(212,28,1)" fg:x="37" fg:w="1"/><text x="6.3962%" y="1199.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.17%)</title><rect x="6.1462%" y="1173" width="0.1661%" height="15" fill="rgb(248,164,17)" fg:x="37" fg:w="1"/><text x="6.3962%" y="1183.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="6.1462%" y="1157" width="0.1661%" height="15" fill="rgb(222,171,42)" fg:x="37" fg:w="1"/><text x="6.3962%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.17%)</title><rect x="6.3123%" y="1237" width="0.1661%" height="15" fill="rgb(243,84,45)" fg:x="38" fg:w="1"/><text x="6.5623%" y="1247.50"></text></g><g><title>core::ptr::write (1 samples, 0.17%)</title><rect x="6.3123%" y="1221" width="0.1661%" height="15" fill="rgb(252,49,23)" fg:x="38" fg:w="1"/><text x="6.5623%" y="1231.50"></text></g><g><title>csgoproto::netmessages::csvcmsg_send_table::Sendprop_t::var_name (1 samples, 0.17%)</title><rect x="6.4784%" y="1237" width="0.1661%" height="15" fill="rgb(215,19,7)" fg:x="39" fg:w="1"/><text x="6.7284%" y="1247.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.17%)</title><rect x="6.4784%" y="1221" width="0.1661%" height="15" fill="rgb(238,81,41)" fg:x="39" fg:w="1"/><text x="6.7284%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.17%)</title><rect x="6.6445%" y="1221" width="0.1661%" height="15" fill="rgb(210,199,37)" fg:x="40" fg:w="1"/><text x="6.8945%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.17%)</title><rect x="6.6445%" y="1205" width="0.1661%" height="15" fill="rgb(244,192,49)" fg:x="40" fg:w="1"/><text x="6.8945%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.17%)</title><rect x="6.6445%" y="1189" width="0.1661%" height="15" fill="rgb(226,211,11)" fg:x="40" fg:w="1"/><text x="6.8945%" y="1199.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.17%)</title><rect x="6.6445%" y="1173" width="0.1661%" height="15" fill="rgb(236,162,54)" fg:x="40" fg:w="1"/><text x="6.8945%" y="1183.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.17%)</title><rect x="6.6445%" y="1157" width="0.1661%" height="15" fill="rgb(220,229,9)" fg:x="40" fg:w="1"/><text x="6.8945%" y="1167.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.17%)</title><rect x="6.6445%" y="1141" width="0.1661%" height="15" fill="rgb(250,87,22)" fg:x="40" fg:w="1"/><text x="6.8945%" y="1151.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.17%)</title><rect x="6.6445%" y="1125" width="0.1661%" height="15" fill="rgb(239,43,17)" fg:x="40" fg:w="1"/><text x="6.8945%" y="1135.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.17%)</title><rect x="6.6445%" y="1109" width="0.1661%" height="15" fill="rgb(231,177,25)" fg:x="40" fg:w="1"/><text x="6.8945%" y="1119.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.17%)</title><rect x="6.6445%" y="1093" width="0.1661%" height="15" fill="rgb(219,179,1)" fg:x="40" fg:w="1"/><text x="6.8945%" y="1103.50"></text></g><g><title>_mi_memcpy (1 samples, 0.17%)</title><rect x="6.6445%" y="1077" width="0.1661%" height="15" fill="rgb(238,219,53)" fg:x="40" fg:w="1"/><text x="6.8945%" y="1087.50"></text></g><g><title>memcpy (1 samples, 0.17%)</title><rect x="6.6445%" y="1061" width="0.1661%" height="15" fill="rgb(232,167,36)" fg:x="40" fg:w="1"/><text x="6.8945%" y="1071.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="6.6445%" y="1045" width="0.1661%" height="15" fill="rgb(244,19,51)" fg:x="40" fg:w="1"/><text x="6.8945%" y="1055.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (1 samples, 0.17%)</title><rect x="6.8106%" y="1205" width="0.1661%" height="15" fill="rgb(224,6,22)" fg:x="41" fg:w="1"/><text x="7.0606%" y="1215.50"></text></g><g><title>alloc::slice::merge_sort (1 samples, 0.17%)</title><rect x="6.8106%" y="1189" width="0.1661%" height="15" fill="rgb(224,145,5)" fg:x="41" fg:w="1"/><text x="7.0606%" y="1199.50"></text></g><g><title>alloc::slice::merge (1 samples, 0.17%)</title><rect x="6.8106%" y="1173" width="0.1661%" height="15" fill="rgb(234,130,49)" fg:x="41" fg:w="1"/><text x="7.0606%" y="1183.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.17%)</title><rect x="6.8106%" y="1157" width="0.1661%" height="15" fill="rgb(254,6,2)" fg:x="41" fg:w="1"/><text x="7.0606%" y="1167.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="6.8106%" y="1141" width="0.1661%" height="15" fill="rgb(208,96,46)" fg:x="41" fg:w="1"/><text x="7.0606%" y="1151.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.17%)</title><rect x="6.9767%" y="1205" width="0.1661%" height="15" fill="rgb(239,3,39)" fg:x="42" fg:w="1"/><text x="7.2267%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.17%)</title><rect x="6.9767%" y="1189" width="0.1661%" height="15" fill="rgb(233,210,1)" fg:x="42" fg:w="1"/><text x="7.2267%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.17%)</title><rect x="6.9767%" y="1173" width="0.1661%" height="15" fill="rgb(244,137,37)" fg:x="42" fg:w="1"/><text x="7.2267%" y="1183.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.17%)</title><rect x="6.9767%" y="1157" width="0.1661%" height="15" fill="rgb(240,136,2)" fg:x="42" fg:w="1"/><text x="7.2267%" y="1167.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.17%)</title><rect x="6.9767%" y="1141" width="0.1661%" height="15" fill="rgb(239,18,37)" fg:x="42" fg:w="1"/><text x="7.2267%" y="1151.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.17%)</title><rect x="6.9767%" y="1125" width="0.1661%" height="15" fill="rgb(218,185,22)" fg:x="42" fg:w="1"/><text x="7.2267%" y="1135.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.17%)</title><rect x="6.9767%" y="1109" width="0.1661%" height="15" fill="rgb(225,218,4)" fg:x="42" fg:w="1"/><text x="7.2267%" y="1119.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.17%)</title><rect x="6.9767%" y="1093" width="0.1661%" height="15" fill="rgb(230,182,32)" fg:x="42" fg:w="1"/><text x="7.2267%" y="1103.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.17%)</title><rect x="6.9767%" y="1077" width="0.1661%" height="15" fill="rgb(242,56,43)" fg:x="42" fg:w="1"/><text x="7.2267%" y="1087.50"></text></g><g><title>_mi_memcpy (1 samples, 0.17%)</title><rect x="6.9767%" y="1061" width="0.1661%" height="15" fill="rgb(233,99,24)" fg:x="42" fg:w="1"/><text x="7.2267%" y="1071.50"></text></g><g><title>memcpy (1 samples, 0.17%)</title><rect x="6.9767%" y="1045" width="0.1661%" height="15" fill="rgb(234,209,42)" fg:x="42" fg:w="1"/><text x="7.2267%" y="1055.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="6.9767%" y="1029" width="0.1661%" height="15" fill="rgb(227,7,12)" fg:x="42" fg:w="1"/><text x="7.2267%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.17%)</title><rect x="7.1429%" y="1189" width="0.1661%" height="15" fill="rgb(245,203,43)" fg:x="43" fg:w="1"/><text x="7.3929%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.17%)</title><rect x="7.1429%" y="1173" width="0.1661%" height="15" fill="rgb(238,205,33)" fg:x="43" fg:w="1"/><text x="7.3929%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.17%)</title><rect x="7.1429%" y="1157" width="0.1661%" height="15" fill="rgb(231,56,7)" fg:x="43" fg:w="1"/><text x="7.3929%" y="1167.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.17%)</title><rect x="7.1429%" y="1141" width="0.1661%" height="15" fill="rgb(244,186,29)" fg:x="43" fg:w="1"/><text x="7.3929%" y="1151.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.17%)</title><rect x="7.1429%" y="1125" width="0.1661%" height="15" fill="rgb(234,111,31)" fg:x="43" fg:w="1"/><text x="7.3929%" y="1135.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.17%)</title><rect x="7.1429%" y="1109" width="0.1661%" height="15" fill="rgb(241,149,10)" fg:x="43" fg:w="1"/><text x="7.3929%" y="1119.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.17%)</title><rect x="7.1429%" y="1093" width="0.1661%" height="15" fill="rgb(249,206,44)" fg:x="43" fg:w="1"/><text x="7.3929%" y="1103.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.17%)</title><rect x="7.1429%" y="1077" width="0.1661%" height="15" fill="rgb(251,153,30)" fg:x="43" fg:w="1"/><text x="7.3929%" y="1087.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.17%)</title><rect x="7.1429%" y="1061" width="0.1661%" height="15" fill="rgb(239,152,38)" fg:x="43" fg:w="1"/><text x="7.3929%" y="1071.50"></text></g><g><title>_mi_memcpy (1 samples, 0.17%)</title><rect x="7.1429%" y="1045" width="0.1661%" height="15" fill="rgb(249,139,47)" fg:x="43" fg:w="1"/><text x="7.3929%" y="1055.50"></text></g><g><title>memcpy (1 samples, 0.17%)</title><rect x="7.1429%" y="1029" width="0.1661%" height="15" fill="rgb(244,64,35)" fg:x="43" fg:w="1"/><text x="7.3929%" y="1039.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="7.1429%" y="1013" width="0.1661%" height="15" fill="rgb(216,46,15)" fg:x="43" fg:w="1"/><text x="7.3929%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.17%)</title><rect x="7.3090%" y="1173" width="0.1661%" height="15" fill="rgb(250,74,19)" fg:x="44" fg:w="1"/><text x="7.5590%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.17%)</title><rect x="7.3090%" y="1157" width="0.1661%" height="15" fill="rgb(249,42,33)" fg:x="44" fg:w="1"/><text x="7.5590%" y="1167.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.17%)</title><rect x="7.3090%" y="1141" width="0.1661%" height="15" fill="rgb(242,149,17)" fg:x="44" fg:w="1"/><text x="7.5590%" y="1151.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.17%)</title><rect x="7.3090%" y="1125" width="0.1661%" height="15" fill="rgb(244,29,21)" fg:x="44" fg:w="1"/><text x="7.5590%" y="1135.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.17%)</title><rect x="7.3090%" y="1109" width="0.1661%" height="15" fill="rgb(220,130,37)" fg:x="44" fg:w="1"/><text x="7.5590%" y="1119.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (1 samples, 0.17%)</title><rect x="7.4751%" y="1173" width="0.1661%" height="15" fill="rgb(211,67,2)" fg:x="45" fg:w="1"/><text x="7.7251%" y="1183.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::flatten_dt (16 samples, 2.66%)</title><rect x="5.1495%" y="1317" width="2.6578%" height="15" fill="rgb(235,68,52)" fg:x="31" fg:w="16"/><text x="5.3995%" y="1327.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (16 samples, 2.66%)</title><rect x="5.1495%" y="1301" width="2.6578%" height="15" fill="rgb(246,142,3)" fg:x="31" fg:w="16"/><text x="5.3995%" y="1311.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (15 samples, 2.49%)</title><rect x="5.3156%" y="1285" width="2.4917%" height="15" fill="rgb(241,25,7)" fg:x="32" fg:w="15"/><text x="5.5656%" y="1295.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (11 samples, 1.83%)</title><rect x="5.9801%" y="1269" width="1.8272%" height="15" fill="rgb(242,119,39)" fg:x="36" fg:w="11"/><text x="6.2301%" y="1279.50">d..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (9 samples, 1.50%)</title><rect x="6.3123%" y="1253" width="1.4950%" height="15" fill="rgb(241,98,45)" fg:x="38" fg:w="9"/><text x="6.5623%" y="1263.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (7 samples, 1.16%)</title><rect x="6.6445%" y="1237" width="1.1628%" height="15" fill="rgb(254,28,30)" fg:x="40" fg:w="7"/><text x="6.8945%" y="1247.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (6 samples, 1.00%)</title><rect x="6.8106%" y="1221" width="0.9967%" height="15" fill="rgb(241,142,54)" fg:x="41" fg:w="6"/><text x="7.0606%" y="1231.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (4 samples, 0.66%)</title><rect x="7.1429%" y="1205" width="0.6645%" height="15" fill="rgb(222,85,15)" fg:x="43" fg:w="4"/><text x="7.3929%" y="1215.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (3 samples, 0.50%)</title><rect x="7.3090%" y="1189" width="0.4983%" height="15" fill="rgb(210,85,47)" fg:x="44" fg:w="3"/><text x="7.5590%" y="1199.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::is_prop_excl (1 samples, 0.17%)</title><rect x="7.6412%" y="1173" width="0.1661%" height="15" fill="rgb(224,206,25)" fg:x="46" fg:w="1"/><text x="7.8912%" y="1183.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.17%)</title><rect x="7.6412%" y="1157" width="0.1661%" height="15" fill="rgb(243,201,19)" fg:x="46" fg:w="1"/><text x="7.8912%" y="1167.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.17%)</title><rect x="7.6412%" y="1141" width="0.1661%" height="15" fill="rgb(236,59,4)" fg:x="46" fg:w="1"/><text x="7.8912%" y="1151.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.17%)</title><rect x="7.6412%" y="1125" width="0.1661%" height="15" fill="rgb(254,179,45)" fg:x="46" fg:w="1"/><text x="7.8912%" y="1135.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.17%)</title><rect x="7.6412%" y="1109" width="0.1661%" height="15" fill="rgb(226,14,10)" fg:x="46" fg:w="1"/><text x="7.8912%" y="1119.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.17%)</title><rect x="7.6412%" y="1093" width="0.1661%" height="15" fill="rgb(244,27,41)" fg:x="46" fg:w="1"/><text x="7.8912%" y="1103.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="7.6412%" y="1077" width="0.1661%" height="15" fill="rgb(235,35,32)" fg:x="46" fg:w="1"/><text x="7.8912%" y="1087.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_float (1 samples, 0.17%)</title><rect x="7.8073%" y="1221" width="0.1661%" height="15" fill="rgb(218,68,31)" fg:x="47" fg:w="1"/><text x="8.0573%" y="1231.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_datatable (18 samples, 2.99%)</title><rect x="5.1495%" y="1333" width="2.9900%" height="15" fill="rgb(207,120,37)" fg:x="31" fg:w="18"/><text x="5.3995%" y="1343.50">dem..</text></g><g><title>protobuf::message::Message::parse_from_bytes (2 samples, 0.33%)</title><rect x="7.8073%" y="1317" width="0.3322%" height="15" fill="rgb(227,98,0)" fg:x="47" fg:w="2"/><text x="8.0573%" y="1327.50"></text></g><g><title>protobuf::message::Message::parse_from (2 samples, 0.33%)</title><rect x="7.8073%" y="1301" width="0.3322%" height="15" fill="rgb(207,7,3)" fg:x="47" fg:w="2"/><text x="8.0573%" y="1311.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as protobuf::message::Message&gt;::merge_from (2 samples, 0.33%)</title><rect x="7.8073%" y="1285" width="0.3322%" height="15" fill="rgb(206,98,19)" fg:x="47" fg:w="2"/><text x="8.0573%" y="1295.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (2 samples, 0.33%)</title><rect x="7.8073%" y="1269" width="0.3322%" height="15" fill="rgb(217,5,26)" fg:x="47" fg:w="2"/><text x="8.0573%" y="1279.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (2 samples, 0.33%)</title><rect x="7.8073%" y="1253" width="0.3322%" height="15" fill="rgb(235,190,38)" fg:x="47" fg:w="2"/><text x="8.0573%" y="1263.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as protobuf::message::Message&gt;::merge_from (2 samples, 0.33%)</title><rect x="7.8073%" y="1237" width="0.3322%" height="15" fill="rgb(247,86,24)" fg:x="47" fg:w="2"/><text x="8.0573%" y="1247.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_string (1 samples, 0.17%)</title><rect x="7.9734%" y="1221" width="0.1661%" height="15" fill="rgb(205,101,16)" fg:x="48" fg:w="1"/><text x="8.2234%" y="1231.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_string_into (1 samples, 0.17%)</title><rect x="7.9734%" y="1205" width="0.1661%" height="15" fill="rgb(246,168,33)" fg:x="48" fg:w="1"/><text x="8.2234%" y="1215.50"></text></g><g><title>core::mem::replace (1 samples, 0.17%)</title><rect x="7.9734%" y="1189" width="0.1661%" height="15" fill="rgb(231,114,1)" fg:x="48" fg:w="1"/><text x="8.2234%" y="1199.50"></text></g><g><title>core::ptr::read (1 samples, 0.17%)</title><rect x="7.9734%" y="1173" width="0.1661%" height="15" fill="rgb(207,184,53)" fg:x="48" fg:w="1"/><text x="8.2234%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u32,demoparser::parsing::entities::Entity)&gt; (1 samples, 0.17%)</title><rect x="8.6379%" y="1301" width="0.1661%" height="15" fill="rgb(224,95,51)" fg:x="52" fg:w="1"/><text x="8.8879%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::entities::Entity&gt; (1 samples, 0.17%)</title><rect x="8.6379%" y="1285" width="0.1661%" height="15" fill="rgb(212,188,45)" fg:x="52" fg:w="1"/><text x="8.8879%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,demoparser::parsing::variants::PropAtom,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.17%)</title><rect x="8.6379%" y="1269" width="0.1661%" height="15" fill="rgb(223,154,38)" fg:x="52" fg:w="1"/><text x="8.8879%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,demoparser::parsing::variants::PropAtom,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.17%)</title><rect x="8.6379%" y="1253" width="0.1661%" height="15" fill="rgb(251,22,52)" fg:x="52" fg:w="1"/><text x="8.8879%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,demoparser::parsing::variants::PropAtom)&gt;&gt; (1 samples, 0.17%)</title><rect x="8.6379%" y="1237" width="0.1661%" height="15" fill="rgb(229,209,22)" fg:x="52" fg:w="1"/><text x="8.8879%" y="1247.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="8.6379%" y="1221" width="0.1661%" height="15" fill="rgb(234,138,34)" fg:x="52" fg:w="1"/><text x="8.8879%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::CSVCMsg_PacketEntities&gt; (1 samples, 0.17%)</title><rect x="8.8040%" y="1301" width="0.1661%" height="15" fill="rgb(212,95,11)" fg:x="53" fg:w="1"/><text x="9.0540%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (1 samples, 0.17%)</title><rect x="8.8040%" y="1285" width="0.1661%" height="15" fill="rgb(240,179,47)" fg:x="53" fg:w="1"/><text x="9.0540%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.17%)</title><rect x="8.8040%" y="1269" width="0.1661%" height="15" fill="rgb(240,163,11)" fg:x="53" fg:w="1"/><text x="9.0540%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.17%)</title><rect x="8.8040%" y="1253" width="0.1661%" height="15" fill="rgb(236,37,12)" fg:x="53" fg:w="1"/><text x="9.0540%" y="1263.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="8.8040%" y="1237" width="0.1661%" height="15" fill="rgb(232,164,16)" fg:x="53" fg:w="1"/><text x="9.0540%" y="1247.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.17%)</title><rect x="8.8040%" y="1221" width="0.1661%" height="15" fill="rgb(244,205,15)" fg:x="53" fg:w="1"/><text x="9.0540%" y="1231.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.17%)</title><rect x="8.8040%" y="1205" width="0.1661%" height="15" fill="rgb(223,117,47)" fg:x="53" fg:w="1"/><text x="9.0540%" y="1215.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (1 samples, 0.17%)</title><rect x="8.8040%" y="1189" width="0.1661%" height="15" fill="rgb(244,107,35)" fg:x="53" fg:w="1"/><text x="9.0540%" y="1199.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (1 samples, 0.17%)</title><rect x="8.8040%" y="1173" width="0.1661%" height="15" fill="rgb(205,140,8)" fg:x="53" fg:w="1"/><text x="9.0540%" y="1183.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (1 samples, 0.17%)</title><rect x="8.8040%" y="1157" width="0.1661%" height="15" fill="rgb(228,84,46)" fg:x="53" fg:w="1"/><text x="9.0540%" y="1167.50"></text></g><g><title>protobuf::misc::maybe_uninit_write_slice (1 samples, 0.17%)</title><rect x="8.8040%" y="1141" width="0.1661%" height="15" fill="rgb(254,188,9)" fg:x="53" fg:w="1"/><text x="9.0540%" y="1151.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.17%)</title><rect x="8.8040%" y="1125" width="0.1661%" height="15" fill="rgb(206,112,54)" fg:x="53" fg:w="1"/><text x="9.0540%" y="1135.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.17%)</title><rect x="8.8040%" y="1109" width="0.1661%" height="15" fill="rgb(216,84,49)" fg:x="53" fg:w="1"/><text x="9.0540%" y="1119.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="8.8040%" y="1093" width="0.1661%" height="15" fill="rgb(214,194,35)" fg:x="53" fg:w="1"/><text x="9.0540%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="8.8040%" y="1077" width="0.1661%" height="15" fill="rgb(249,28,3)" fg:x="53" fg:w="1"/><text x="9.0540%" y="1087.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (4 samples, 0.66%)</title><rect x="8.9701%" y="1285" width="0.6645%" height="15" fill="rgb(222,56,52)" fg:x="54" fg:w="4"/><text x="9.2201%" y="1295.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::TryFrom&lt;u32&gt; for u16&gt;::try_from (4 samples, 0.66%)</title><rect x="8.9701%" y="1269" width="0.6645%" height="15" fill="rgb(245,217,50)" fg:x="54" fg:w="4"/><text x="9.2201%" y="1279.50"></text></g><g><title>ahash::operations::folded_multiply (2 samples, 0.33%)</title><rect x="9.6346%" y="1173" width="0.3322%" height="15" fill="rgb(213,201,24)" fg:x="58" fg:w="2"/><text x="9.8846%" y="1183.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.17%)</title><rect x="9.8007%" y="1157" width="0.1661%" height="15" fill="rgb(248,116,28)" fg:x="59" fg:w="1"/><text x="10.0507%" y="1167.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.66%)</title><rect x="9.6346%" y="1221" width="0.6645%" height="15" fill="rgb(219,72,43)" fg:x="58" fg:w="4"/><text x="9.8846%" y="1231.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.66%)</title><rect x="9.6346%" y="1205" width="0.6645%" height="15" fill="rgb(209,138,14)" fg:x="58" fg:w="4"/><text x="9.8846%" y="1215.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (4 samples, 0.66%)</title><rect x="9.6346%" y="1189" width="0.6645%" height="15" fill="rgb(222,18,33)" fg:x="58" fg:w="4"/><text x="9.8846%" y="1199.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.33%)</title><rect x="9.9668%" y="1173" width="0.3322%" height="15" fill="rgb(213,199,7)" fg:x="60" fg:w="2"/><text x="10.2168%" y="1183.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.17%)</title><rect x="12.1262%" y="1173" width="0.1661%" height="15" fill="rgb(250,110,10)" fg:x="73" fg:w="1"/><text x="12.3762%" y="1183.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.17%)</title><rect x="12.1262%" y="1157" width="0.1661%" height="15" fill="rgb(248,123,6)" fg:x="73" fg:w="1"/><text x="12.3762%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (7 samples, 1.16%)</title><rect x="12.2924%" y="1173" width="1.1628%" height="15" fill="rgb(206,91,31)" fg:x="74" fg:w="7"/><text x="12.5424%" y="1183.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (7 samples, 1.16%)</title><rect x="12.2924%" y="1157" width="1.1628%" height="15" fill="rgb(211,154,13)" fg:x="74" fg:w="7"/><text x="12.5424%" y="1167.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (28 samples, 4.65%)</title><rect x="9.6346%" y="1285" width="4.6512%" height="15" fill="rgb(225,148,7)" fg:x="58" fg:w="28"/><text x="9.8846%" y="1295.50">&lt;std:..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (28 samples, 4.65%)</title><rect x="9.6346%" y="1269" width="4.6512%" height="15" fill="rgb(220,160,43)" fg:x="58" fg:w="28"/><text x="9.8846%" y="1279.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (28 samples, 4.65%)</title><rect x="9.6346%" y="1253" width="4.6512%" height="15" fill="rgb(213,52,39)" fg:x="58" fg:w="28"/><text x="9.8846%" y="1263.50">hashb..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (28 samples, 4.65%)</title><rect x="9.6346%" y="1237" width="4.6512%" height="15" fill="rgb(243,137,7)" fg:x="58" fg:w="28"/><text x="9.8846%" y="1247.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (24 samples, 3.99%)</title><rect x="10.2990%" y="1221" width="3.9867%" height="15" fill="rgb(230,79,13)" fg:x="62" fg:w="24"/><text x="10.5490%" y="1231.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (24 samples, 3.99%)</title><rect x="10.2990%" y="1205" width="3.9867%" height="15" fill="rgb(247,105,23)" fg:x="62" fg:w="24"/><text x="10.5490%" y="1215.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (24 samples, 3.99%)</title><rect x="10.2990%" y="1189" width="3.9867%" height="15" fill="rgb(223,179,41)" fg:x="62" fg:w="24"/><text x="10.5490%" y="1199.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (5 samples, 0.83%)</title><rect x="13.4551%" y="1173" width="0.8306%" height="15" fill="rgb(218,9,34)" fg:x="81" fg:w="5"/><text x="13.7051%" y="1183.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.83%)</title><rect x="17.9402%" y="1253" width="0.8306%" height="15" fill="rgb(222,106,8)" fg:x="108" fg:w="5"/><text x="18.1902%" y="1263.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (8 samples, 1.33%)</title><rect x="17.9402%" y="1269" width="1.3289%" height="15" fill="rgb(211,220,0)" fg:x="108" fg:w="8"/><text x="18.1902%" y="1279.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.50%)</title><rect x="18.7708%" y="1253" width="0.4983%" height="15" fill="rgb(229,52,16)" fg:x="113" fg:w="3"/><text x="19.0208%" y="1263.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.50%)</title><rect x="18.7708%" y="1237" width="0.4983%" height="15" fill="rgb(212,155,18)" fg:x="113" fg:w="3"/><text x="19.0208%" y="1247.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (6 samples, 1.00%)</title><rect x="19.2691%" y="1269" width="0.9967%" height="15" fill="rgb(242,21,14)" fg:x="116" fg:w="6"/><text x="19.5191%" y="1279.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (6 samples, 1.00%)</title><rect x="19.2691%" y="1253" width="0.9967%" height="15" fill="rgb(222,19,48)" fg:x="116" fg:w="6"/><text x="19.5191%" y="1263.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (6 samples, 1.00%)</title><rect x="19.2691%" y="1237" width="0.9967%" height="15" fill="rgb(232,45,27)" fg:x="116" fg:w="6"/><text x="19.5191%" y="1247.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (3 samples, 0.50%)</title><rect x="20.2658%" y="1253" width="0.4983%" height="15" fill="rgb(249,103,42)" fg:x="122" fg:w="3"/><text x="20.5158%" y="1263.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (3 samples, 0.50%)</title><rect x="20.2658%" y="1237" width="0.4983%" height="15" fill="rgb(246,81,33)" fg:x="122" fg:w="3"/><text x="20.5158%" y="1247.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::bits_remaining (4 samples, 0.66%)</title><rect x="20.2658%" y="1269" width="0.6645%" height="15" fill="rgb(252,33,42)" fg:x="122" fg:w="4"/><text x="20.5158%" y="1279.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.17%)</title><rect x="20.7641%" y="1253" width="0.1661%" height="15" fill="rgb(209,212,41)" fg:x="125" fg:w="1"/><text x="21.0141%" y="1263.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::consume (3 samples, 0.50%)</title><rect x="20.9302%" y="1269" width="0.4983%" height="15" fill="rgb(207,154,6)" fg:x="126" fg:w="3"/><text x="21.1802%" y="1279.50"></text></g><g><title>bitter::LittleEndianReader::has_data_for_unaligned_loads (1 samples, 0.17%)</title><rect x="21.7608%" y="1253" width="0.1661%" height="15" fill="rgb(223,64,47)" fg:x="131" fg:w="1"/><text x="22.0108%" y="1263.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::refill_lookahead (7 samples, 1.16%)</title><rect x="21.4286%" y="1269" width="1.1628%" height="15" fill="rgb(211,161,38)" fg:x="129" fg:w="7"/><text x="21.6786%" y="1279.50"></text></g><g><title>bitter::LittleEndianReader::refill (4 samples, 0.66%)</title><rect x="21.9269%" y="1253" width="0.6645%" height="15" fill="rgb(219,138,40)" fg:x="132" fg:w="4"/><text x="22.1769%" y="1263.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.66%)</title><rect x="22.9236%" y="1157" width="0.6645%" height="15" fill="rgb(241,228,46)" fg:x="138" fg:w="4"/><text x="23.1736%" y="1167.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.66%)</title><rect x="22.9236%" y="1141" width="0.6645%" height="15" fill="rgb(223,209,38)" fg:x="138" fg:w="4"/><text x="23.1736%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.33%)</title><rect x="23.5880%" y="1157" width="0.3322%" height="15" fill="rgb(236,164,45)" fg:x="142" fg:w="2"/><text x="23.8380%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2 samples, 0.33%)</title><rect x="23.5880%" y="1141" width="0.3322%" height="15" fill="rgb(231,15,5)" fg:x="142" fg:w="2"/><text x="23.8380%" y="1151.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.33%)</title><rect x="23.5880%" y="1125" width="0.3322%" height="15" fill="rgb(252,35,15)" fg:x="142" fg:w="2"/><text x="23.8380%" y="1135.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (2 samples, 0.33%)</title><rect x="23.5880%" y="1109" width="0.3322%" height="15" fill="rgb(248,181,18)" fg:x="142" fg:w="2"/><text x="23.8380%" y="1119.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (10 samples, 1.66%)</title><rect x="22.5914%" y="1269" width="1.6611%" height="15" fill="rgb(233,39,42)" fg:x="136" fg:w="10"/><text x="22.8414%" y="1279.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (10 samples, 1.66%)</title><rect x="22.5914%" y="1253" width="1.6611%" height="15" fill="rgb(238,110,33)" fg:x="136" fg:w="10"/><text x="22.8414%" y="1263.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (10 samples, 1.66%)</title><rect x="22.5914%" y="1237" width="1.6611%" height="15" fill="rgb(233,195,10)" fg:x="136" fg:w="10"/><text x="22.8414%" y="1247.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (10 samples, 1.66%)</title><rect x="22.5914%" y="1221" width="1.6611%" height="15" fill="rgb(254,105,3)" fg:x="136" fg:w="10"/><text x="22.8414%" y="1231.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (10 samples, 1.66%)</title><rect x="22.5914%" y="1205" width="1.6611%" height="15" fill="rgb(221,225,9)" fg:x="136" fg:w="10"/><text x="22.8414%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (10 samples, 1.66%)</title><rect x="22.5914%" y="1189" width="1.6611%" height="15" fill="rgb(224,227,45)" fg:x="136" fg:w="10"/><text x="22.8414%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (10 samples, 1.66%)</title><rect x="22.5914%" y="1173" width="1.6611%" height="15" fill="rgb(229,198,43)" fg:x="136" fg:w="10"/><text x="22.8414%" y="1183.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.33%)</title><rect x="23.9203%" y="1157" width="0.3322%" height="15" fill="rgb(206,209,35)" fg:x="144" fg:w="2"/><text x="24.1703%" y="1167.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.33%)</title><rect x="23.9203%" y="1141" width="0.3322%" height="15" fill="rgb(245,195,53)" fg:x="144" fg:w="2"/><text x="24.1703%" y="1151.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (3 samples, 0.50%)</title><rect x="24.2525%" y="1269" width="0.4983%" height="15" fill="rgb(240,92,26)" fg:x="146" fg:w="3"/><text x="24.5025%" y="1279.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u16&gt;::le (3 samples, 0.50%)</title><rect x="24.2525%" y="1253" width="0.4983%" height="15" fill="rgb(207,40,23)" fg:x="146" fg:w="3"/><text x="24.5025%" y="1263.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (3 samples, 0.50%)</title><rect x="24.7508%" y="1269" width="0.4983%" height="15" fill="rgb(223,111,35)" fg:x="149" fg:w="3"/><text x="25.0008%" y="1279.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_float (12 samples, 1.99%)</title><rect x="26.0797%" y="1253" width="1.9934%" height="15" fill="rgb(229,147,28)" fg:x="157" fg:w="12"/><text x="26.3297%" y="1263.50">d..</text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_special_float (4 samples, 0.66%)</title><rect x="27.4086%" y="1237" width="0.6645%" height="15" fill="rgb(211,29,28)" fg:x="165" fg:w="4"/><text x="27.6586%" y="1247.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_nbits (4 samples, 0.66%)</title><rect x="27.4086%" y="1221" width="0.6645%" height="15" fill="rgb(228,72,33)" fg:x="165" fg:w="4"/><text x="27.6586%" y="1231.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (4 samples, 0.66%)</title><rect x="27.4086%" y="1205" width="0.6645%" height="15" fill="rgb(205,214,31)" fg:x="165" fg:w="4"/><text x="27.6586%" y="1215.50"></text></g><g><title>bitter::LittleEndianReader::refill (1 samples, 0.17%)</title><rect x="27.9070%" y="1189" width="0.1661%" height="15" fill="rgb(224,111,15)" fg:x="168" fg:w="1"/><text x="28.1570%" y="1199.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub (1 samples, 0.17%)</title><rect x="27.9070%" y="1173" width="0.1661%" height="15" fill="rgb(253,21,26)" fg:x="168" fg:w="1"/><text x="28.1570%" y="1183.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.17%)</title><rect x="27.9070%" y="1157" width="0.1661%" height="15" fill="rgb(245,139,43)" fg:x="168" fg:w="1"/><text x="28.1570%" y="1167.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_int (3 samples, 0.50%)</title><rect x="28.0731%" y="1253" width="0.4983%" height="15" fill="rgb(252,170,7)" fg:x="169" fg:w="3"/><text x="28.3231%" y="1263.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_string (2 samples, 0.33%)</title><rect x="28.5714%" y="1253" width="0.3322%" height="15" fill="rgb(231,118,14)" fg:x="172" fg:w="2"/><text x="28.8214%" y="1263.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_string (2 samples, 0.33%)</title><rect x="28.5714%" y="1237" width="0.3322%" height="15" fill="rgb(238,83,0)" fg:x="172" fg:w="2"/><text x="28.8214%" y="1247.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.17%)</title><rect x="28.7375%" y="1221" width="0.1661%" height="15" fill="rgb(221,39,39)" fg:x="173" fg:w="1"/><text x="28.9875%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.17%)</title><rect x="28.7375%" y="1205" width="0.1661%" height="15" fill="rgb(222,119,46)" fg:x="173" fg:w="1"/><text x="28.9875%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.17%)</title><rect x="28.7375%" y="1189" width="0.1661%" height="15" fill="rgb(222,165,49)" fg:x="173" fg:w="1"/><text x="28.9875%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.17%)</title><rect x="28.7375%" y="1173" width="0.1661%" height="15" fill="rgb(219,113,52)" fg:x="173" fg:w="1"/><text x="28.9875%" y="1183.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_special_float (3 samples, 0.50%)</title><rect x="29.7342%" y="1221" width="0.4983%" height="15" fill="rgb(214,7,15)" fg:x="179" fg:w="3"/><text x="29.9842%" y="1231.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_bit_coord (2 samples, 0.33%)</title><rect x="29.9003%" y="1205" width="0.3322%" height="15" fill="rgb(235,32,4)" fg:x="180" fg:w="2"/><text x="30.1503%" y="1215.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_nbits (1 samples, 0.17%)</title><rect x="30.0664%" y="1189" width="0.1661%" height="15" fill="rgb(238,90,54)" fg:x="181" fg:w="1"/><text x="30.3164%" y="1199.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.17%)</title><rect x="30.0664%" y="1173" width="0.1661%" height="15" fill="rgb(213,208,19)" fg:x="181" fg:w="1"/><text x="30.3164%" y="1183.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_vec (9 samples, 1.50%)</title><rect x="28.9037%" y="1253" width="1.4950%" height="15" fill="rgb(233,156,4)" fg:x="174" fg:w="9"/><text x="29.1537%" y="1263.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_float (9 samples, 1.50%)</title><rect x="28.9037%" y="1237" width="1.4950%" height="15" fill="rgb(207,194,5)" fg:x="174" fg:w="9"/><text x="29.1537%" y="1247.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_nbits (1 samples, 0.17%)</title><rect x="30.2326%" y="1221" width="0.1661%" height="15" fill="rgb(206,111,30)" fg:x="182" fg:w="1"/><text x="30.4826%" y="1231.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.17%)</title><rect x="30.2326%" y="1205" width="0.1661%" height="15" fill="rgb(243,70,54)" fg:x="182" fg:w="1"/><text x="30.4826%" y="1215.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode (32 samples, 5.32%)</title><rect x="25.2492%" y="1269" width="5.3156%" height="15" fill="rgb(242,28,8)" fg:x="152" fg:w="32"/><text x="25.4992%" y="1279.50">demopar..</text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_vec_xy (1 samples, 0.17%)</title><rect x="30.3987%" y="1253" width="0.1661%" height="15" fill="rgb(219,106,18)" fg:x="183" fg:w="1"/><text x="30.6487%" y="1263.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_float (1 samples, 0.17%)</title><rect x="30.3987%" y="1237" width="0.1661%" height="15" fill="rgb(244,222,10)" fg:x="183" fg:w="1"/><text x="30.6487%" y="1247.50"></text></g><g><title>bitter::LittleEndianReader::has_data_for_unaligned_loads (1 samples, 0.17%)</title><rect x="33.8870%" y="1205" width="0.1661%" height="15" fill="rgb(236,179,52)" fg:x="204" fg:w="1"/><text x="34.1370%" y="1215.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_boolie (14 samples, 2.33%)</title><rect x="32.2259%" y="1253" width="2.3256%" height="15" fill="rgb(213,23,39)" fg:x="194" fg:w="14"/><text x="32.4759%" y="1263.50">d..</text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bit (14 samples, 2.33%)</title><rect x="32.2259%" y="1237" width="2.3256%" height="15" fill="rgb(238,48,10)" fg:x="194" fg:w="14"/><text x="32.4759%" y="1247.50">&lt;..</text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (14 samples, 2.33%)</title><rect x="32.2259%" y="1221" width="2.3256%" height="15" fill="rgb(251,196,23)" fg:x="194" fg:w="14"/><text x="32.4759%" y="1231.50">&lt;..</text></g><g><title>bitter::LittleEndianReader::refill (3 samples, 0.50%)</title><rect x="34.0532%" y="1205" width="0.4983%" height="15" fill="rgb(250,152,24)" fg:x="205" fg:w="3"/><text x="34.3032%" y="1215.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.50%)</title><rect x="34.0532%" y="1189" width="0.4983%" height="15" fill="rgb(209,150,17)" fg:x="205" fg:w="3"/><text x="34.3032%" y="1199.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (3 samples, 0.50%)</title><rect x="34.0532%" y="1173" width="0.4983%" height="15" fill="rgb(234,202,34)" fg:x="205" fg:w="3"/><text x="34.3032%" y="1183.50"></text></g><g><title>bitter::LittleEndianReader::read_bits_eof (1 samples, 0.17%)</title><rect x="36.5449%" y="1221" width="0.1661%" height="15" fill="rgb(253,148,53)" fg:x="220" fg:w="1"/><text x="36.7949%" y="1231.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_inx (41 samples, 6.81%)</title><rect x="30.5648%" y="1269" width="6.8106%" height="15" fill="rgb(218,129,16)" fg:x="184" fg:w="41"/><text x="30.8148%" y="1279.50">demoparse..</text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_nbits (17 samples, 2.82%)</title><rect x="34.5515%" y="1253" width="2.8239%" height="15" fill="rgb(216,85,19)" fg:x="208" fg:w="17"/><text x="34.8015%" y="1263.50">de..</text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (17 samples, 2.82%)</title><rect x="34.5515%" y="1237" width="2.8239%" height="15" fill="rgb(235,228,7)" fg:x="208" fg:w="17"/><text x="34.8015%" y="1247.50">&lt;b..</text></g><g><title>bitter::LittleEndianReader::refill (4 samples, 0.66%)</title><rect x="36.7110%" y="1221" width="0.6645%" height="15" fill="rgb(245,175,0)" fg:x="221" fg:w="4"/><text x="36.9610%" y="1231.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.17%)</title><rect x="37.7076%" y="1189" width="0.1661%" height="15" fill="rgb(208,168,36)" fg:x="227" fg:w="1"/><text x="37.9576%" y="1199.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.17%)</title><rect x="37.7076%" y="1173" width="0.1661%" height="15" fill="rgb(246,171,24)" fg:x="227" fg:w="1"/><text x="37.9576%" y="1183.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.33%)</title><rect x="37.7076%" y="1221" width="0.3322%" height="15" fill="rgb(215,142,24)" fg:x="227" fg:w="2"/><text x="37.9576%" y="1231.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.33%)</title><rect x="37.7076%" y="1205" width="0.3322%" height="15" fill="rgb(250,187,7)" fg:x="227" fg:w="2"/><text x="37.9576%" y="1215.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.17%)</title><rect x="37.8738%" y="1189" width="0.1661%" height="15" fill="rgb(228,66,33)" fg:x="228" fg:w="1"/><text x="38.1238%" y="1199.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.17%)</title><rect x="37.8738%" y="1173" width="0.1661%" height="15" fill="rgb(234,215,21)" fg:x="228" fg:w="1"/><text x="38.1238%" y="1183.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u32 (1 samples, 0.17%)</title><rect x="37.8738%" y="1157" width="0.1661%" height="15" fill="rgb(222,191,20)" fg:x="228" fg:w="1"/><text x="38.1238%" y="1167.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (1 samples, 0.17%)</title><rect x="37.8738%" y="1141" width="0.1661%" height="15" fill="rgb(245,79,54)" fg:x="228" fg:w="1"/><text x="38.1238%" y="1151.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.17%)</title><rect x="37.8738%" y="1125" width="0.1661%" height="15" fill="rgb(240,10,37)" fg:x="228" fg:w="1"/><text x="38.1238%" y="1135.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 1.33%)</title><rect x="42.3588%" y="1173" width="1.3289%" height="15" fill="rgb(214,192,32)" fg:x="255" fg:w="8"/><text x="42.6088%" y="1183.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (5 samples, 0.83%)</title><rect x="42.8571%" y="1157" width="0.8306%" height="15" fill="rgb(209,36,54)" fg:x="258" fg:w="5"/><text x="43.1071%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (7 samples, 1.16%)</title><rect x="43.6877%" y="1173" width="1.1628%" height="15" fill="rgb(220,10,11)" fg:x="263" fg:w="7"/><text x="43.9377%" y="1183.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (7 samples, 1.16%)</title><rect x="43.6877%" y="1157" width="1.1628%" height="15" fill="rgb(221,106,17)" fg:x="263" fg:w="7"/><text x="43.9377%" y="1167.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (7 samples, 1.16%)</title><rect x="43.6877%" y="1141" width="1.1628%" height="15" fill="rgb(251,142,44)" fg:x="263" fg:w="7"/><text x="43.9377%" y="1151.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (7 samples, 1.16%)</title><rect x="43.6877%" y="1125" width="1.1628%" height="15" fill="rgb(238,13,15)" fg:x="263" fg:w="7"/><text x="43.9377%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (7 samples, 1.16%)</title><rect x="44.8505%" y="1173" width="1.1628%" height="15" fill="rgb(208,107,27)" fg:x="270" fg:w="7"/><text x="45.1005%" y="1183.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (60 samples, 9.97%)</title><rect x="37.3754%" y="1269" width="9.9668%" height="15" fill="rgb(205,136,37)" fg:x="225" fg:w="60"/><text x="37.6254%" y="1279.50">std::collectio..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (60 samples, 9.97%)</title><rect x="37.3754%" y="1253" width="9.9668%" height="15" fill="rgb(250,205,27)" fg:x="225" fg:w="60"/><text x="37.6254%" y="1263.50">hashbrown::map..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (60 samples, 9.97%)</title><rect x="37.3754%" y="1237" width="9.9668%" height="15" fill="rgb(210,80,43)" fg:x="225" fg:w="60"/><text x="37.6254%" y="1247.50">hashbrown::map..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (56 samples, 9.30%)</title><rect x="38.0399%" y="1221" width="9.3023%" height="15" fill="rgb(247,160,36)" fg:x="229" fg:w="56"/><text x="38.2899%" y="1231.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (56 samples, 9.30%)</title><rect x="38.0399%" y="1205" width="9.3023%" height="15" fill="rgb(234,13,49)" fg:x="229" fg:w="56"/><text x="38.2899%" y="1215.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (56 samples, 9.30%)</title><rect x="38.0399%" y="1189" width="9.3023%" height="15" fill="rgb(234,122,0)" fg:x="229" fg:w="56"/><text x="38.2899%" y="1199.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 1.33%)</title><rect x="46.0133%" y="1173" width="1.3289%" height="15" fill="rgb(207,146,38)" fg:x="277" fg:w="8"/><text x="46.2633%" y="1183.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 1.33%)</title><rect x="46.0133%" y="1157" width="1.3289%" height="15" fill="rgb(207,177,25)" fg:x="277" fg:w="8"/><text x="46.2633%" y="1167.50"></text></g><g><title>ahash::operations::folded_multiply (4 samples, 0.66%)</title><rect x="47.3422%" y="1189" width="0.6645%" height="15" fill="rgb(211,178,42)" fg:x="285" fg:w="4"/><text x="47.5922%" y="1199.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (4 samples, 0.66%)</title><rect x="47.3422%" y="1173" width="0.6645%" height="15" fill="rgb(230,69,54)" fg:x="285" fg:w="4"/><text x="47.5922%" y="1183.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (5 samples, 0.83%)</title><rect x="47.3422%" y="1205" width="0.8306%" height="15" fill="rgb(214,135,41)" fg:x="285" fg:w="5"/><text x="47.5922%" y="1215.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.17%)</title><rect x="48.0066%" y="1189" width="0.1661%" height="15" fill="rgb(237,67,25)" fg:x="289" fg:w="1"/><text x="48.2566%" y="1199.50"></text></g><g><title>hashbrown::map::make_insert_hash (7 samples, 1.16%)</title><rect x="47.3422%" y="1237" width="1.1628%" height="15" fill="rgb(222,189,50)" fg:x="285" fg:w="7"/><text x="47.5922%" y="1247.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 1.16%)</title><rect x="47.3422%" y="1221" width="1.1628%" height="15" fill="rgb(245,148,34)" fg:x="285" fg:w="7"/><text x="47.5922%" y="1231.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.33%)</title><rect x="48.1728%" y="1205" width="0.3322%" height="15" fill="rgb(222,29,6)" fg:x="290" fg:w="2"/><text x="48.4228%" y="1215.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (2 samples, 0.33%)</title><rect x="48.1728%" y="1189" width="0.3322%" height="15" fill="rgb(221,189,43)" fg:x="290" fg:w="2"/><text x="48.4228%" y="1199.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u32 (2 samples, 0.33%)</title><rect x="48.1728%" y="1173" width="0.3322%" height="15" fill="rgb(207,36,27)" fg:x="290" fg:w="2"/><text x="48.4228%" y="1183.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (2 samples, 0.33%)</title><rect x="48.1728%" y="1157" width="0.3322%" height="15" fill="rgb(217,90,24)" fg:x="290" fg:w="2"/><text x="48.4228%" y="1167.50"></text></g><g><title>ahash::operations::folded_multiply (2 samples, 0.33%)</title><rect x="48.1728%" y="1141" width="0.3322%" height="15" fill="rgb(224,66,35)" fg:x="290" fg:w="2"/><text x="48.4228%" y="1151.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.66%)</title><rect x="53.3223%" y="1205" width="0.6645%" height="15" fill="rgb(221,13,50)" fg:x="321" fg:w="4"/><text x="53.5723%" y="1215.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.33%)</title><rect x="53.6545%" y="1189" width="0.3322%" height="15" fill="rgb(236,68,49)" fg:x="323" fg:w="2"/><text x="53.9045%" y="1199.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (1 samples, 0.17%)</title><rect x="53.9867%" y="1141" width="0.1661%" height="15" fill="rgb(229,146,28)" fg:x="325" fg:w="1"/><text x="54.2367%" y="1151.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (1 samples, 0.17%)</title><rect x="53.9867%" y="1125" width="0.1661%" height="15" fill="rgb(225,31,38)" fg:x="325" fg:w="1"/><text x="54.2367%" y="1135.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (5 samples, 0.83%)</title><rect x="53.9867%" y="1205" width="0.8306%" height="15" fill="rgb(250,208,3)" fg:x="325" fg:w="5"/><text x="54.2367%" y="1215.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (5 samples, 0.83%)</title><rect x="53.9867%" y="1189" width="0.8306%" height="15" fill="rgb(246,54,23)" fg:x="325" fg:w="5"/><text x="54.2367%" y="1199.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (5 samples, 0.83%)</title><rect x="53.9867%" y="1173" width="0.8306%" height="15" fill="rgb(243,76,11)" fg:x="325" fg:w="5"/><text x="54.2367%" y="1183.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (5 samples, 0.83%)</title><rect x="53.9867%" y="1157" width="0.8306%" height="15" fill="rgb(245,21,50)" fg:x="325" fg:w="5"/><text x="54.2367%" y="1167.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.66%)</title><rect x="54.1528%" y="1141" width="0.6645%" height="15" fill="rgb(228,9,43)" fg:x="326" fg:w="4"/><text x="54.4028%" y="1151.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (7 samples, 1.16%)</title><rect x="54.8173%" y="1205" width="1.1628%" height="15" fill="rgb(208,100,47)" fg:x="330" fg:w="7"/><text x="55.0673%" y="1215.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.33%)</title><rect x="55.9801%" y="1205" width="0.3322%" height="15" fill="rgb(232,26,8)" fg:x="337" fg:w="2"/><text x="56.2301%" y="1215.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (59 samples, 9.80%)</title><rect x="47.3422%" y="1269" width="9.8007%" height="15" fill="rgb(216,166,38)" fg:x="285" fg:w="59"/><text x="47.5922%" y="1279.50">std::collectio..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (59 samples, 9.80%)</title><rect x="47.3422%" y="1253" width="9.8007%" height="15" fill="rgb(251,202,51)" fg:x="285" fg:w="59"/><text x="47.5922%" y="1263.50">hashbrown::rus..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (52 samples, 8.64%)</title><rect x="48.5050%" y="1237" width="8.6379%" height="15" fill="rgb(254,216,34)" fg:x="292" fg:w="52"/><text x="48.7550%" y="1247.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (52 samples, 8.64%)</title><rect x="48.5050%" y="1221" width="8.6379%" height="15" fill="rgb(251,32,27)" fg:x="292" fg:w="52"/><text x="48.7550%" y="1231.50">hashbrown::r..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 0.83%)</title><rect x="56.3123%" y="1205" width="0.8306%" height="15" fill="rgb(208,127,28)" fg:x="339" fg:w="5"/><text x="56.5623%" y="1215.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.83%)</title><rect x="56.3123%" y="1189" width="0.8306%" height="15" fill="rgb(224,137,22)" fg:x="339" fg:w="5"/><text x="56.5623%" y="1199.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8 samples, 1.33%)</title><rect x="58.6379%" y="1125" width="1.3289%" height="15" fill="rgb(254,70,32)" fg:x="353" fg:w="8"/><text x="58.8879%" y="1135.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (10 samples, 1.66%)</title><rect x="58.6379%" y="1141" width="1.6611%" height="15" fill="rgb(229,75,37)" fg:x="353" fg:w="10"/><text x="58.8879%" y="1151.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.33%)</title><rect x="59.9668%" y="1125" width="0.3322%" height="15" fill="rgb(252,64,23)" fg:x="361" fg:w="2"/><text x="60.2168%" y="1135.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (13 samples, 2.16%)</title><rect x="60.6312%" y="1125" width="2.1595%" height="15" fill="rgb(232,162,48)" fg:x="365" fg:w="13"/><text x="60.8812%" y="1135.50">c..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (37 samples, 6.15%)</title><rect x="57.4751%" y="1189" width="6.1462%" height="15" fill="rgb(246,160,12)" fg:x="346" fg:w="37"/><text x="57.7251%" y="1199.50">&lt;std::co..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (37 samples, 6.15%)</title><rect x="57.4751%" y="1173" width="6.1462%" height="15" fill="rgb(247,166,0)" fg:x="346" fg:w="37"/><text x="57.7251%" y="1183.50">&lt;core::h..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (37 samples, 6.15%)</title><rect x="57.4751%" y="1157" width="6.1462%" height="15" fill="rgb(249,219,21)" fg:x="346" fg:w="37"/><text x="57.7251%" y="1167.50">&lt;core::h..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (20 samples, 3.32%)</title><rect x="60.2990%" y="1141" width="3.3223%" height="15" fill="rgb(205,209,3)" fg:x="363" fg:w="20"/><text x="60.5490%" y="1151.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.83%)</title><rect x="62.7907%" y="1125" width="0.8306%" height="15" fill="rgb(243,44,1)" fg:x="378" fg:w="5"/><text x="63.0407%" y="1135.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.33%)</title><rect x="63.6213%" y="1189" width="0.3322%" height="15" fill="rgb(206,159,16)" fg:x="383" fg:w="2"/><text x="63.8713%" y="1199.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.33%)</title><rect x="63.6213%" y="1173" width="0.3322%" height="15" fill="rgb(244,77,30)" fg:x="383" fg:w="2"/><text x="63.8713%" y="1183.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.17%)</title><rect x="63.7874%" y="1157" width="0.1661%" height="15" fill="rgb(218,69,12)" fg:x="384" fg:w="1"/><text x="64.0374%" y="1167.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.17%)</title><rect x="63.7874%" y="1141" width="0.1661%" height="15" fill="rgb(212,87,7)" fg:x="384" fg:w="1"/><text x="64.0374%" y="1151.50"></text></g><g><title>hashbrown::map::make_insert_hash (92 samples, 15.28%)</title><rect x="57.3090%" y="1221" width="15.2824%" height="15" fill="rgb(245,114,25)" fg:x="345" fg:w="92"/><text x="57.5590%" y="1231.50">hashbrown::map::make_in..</text></g><g><title>core::hash::BuildHasher::hash_one (92 samples, 15.28%)</title><rect x="57.3090%" y="1205" width="15.2824%" height="15" fill="rgb(210,61,42)" fg:x="345" fg:w="92"/><text x="57.5590%" y="1215.50">core::hash::BuildHasher..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (52 samples, 8.64%)</title><rect x="63.9535%" y="1189" width="8.6379%" height="15" fill="rgb(211,52,33)" fg:x="385" fg:w="52"/><text x="64.2035%" y="1199.50">core::hash::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (52 samples, 8.64%)</title><rect x="63.9535%" y="1173" width="8.6379%" height="15" fill="rgb(234,58,33)" fg:x="385" fg:w="52"/><text x="64.2035%" y="1183.50">core::hash::..</text></g><g><title>core::hash::Hasher::write_u16 (52 samples, 8.64%)</title><rect x="63.9535%" y="1157" width="8.6379%" height="15" fill="rgb(220,115,36)" fg:x="385" fg:w="52"/><text x="64.2035%" y="1167.50">core::hash::..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (47 samples, 7.81%)</title><rect x="64.7841%" y="1141" width="7.8073%" height="15" fill="rgb(243,153,54)" fg:x="390" fg:w="47"/><text x="65.0341%" y="1151.50">&lt;std::colle..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (44 samples, 7.31%)</title><rect x="65.2824%" y="1125" width="7.3090%" height="15" fill="rgb(251,47,18)" fg:x="393" fg:w="44"/><text x="65.5324%" y="1135.50">&lt;core::has..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (44 samples, 7.31%)</title><rect x="65.2824%" y="1109" width="7.3090%" height="15" fill="rgb(242,102,42)" fg:x="393" fg:w="44"/><text x="65.5324%" y="1119.50">&lt;core::has..</text></g><g><title>core::hash::sip::u8to64_le (6 samples, 1.00%)</title><rect x="71.5947%" y="1093" width="0.9967%" height="15" fill="rgb(234,31,38)" fg:x="431" fg:w="6"/><text x="71.8447%" y="1103.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 1.50%)</title><rect x="77.4086%" y="1173" width="1.4950%" height="15" fill="rgb(221,117,51)" fg:x="466" fg:w="9"/><text x="77.6586%" y="1183.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (5 samples, 0.83%)</title><rect x="78.0731%" y="1157" width="0.8306%" height="15" fill="rgb(212,20,18)" fg:x="470" fg:w="5"/><text x="78.3231%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (9 samples, 1.50%)</title><rect x="78.9037%" y="1173" width="1.4950%" height="15" fill="rgb(245,133,36)" fg:x="475" fg:w="9"/><text x="79.1537%" y="1183.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (9 samples, 1.50%)</title><rect x="78.9037%" y="1157" width="1.4950%" height="15" fill="rgb(212,6,19)" fg:x="475" fg:w="9"/><text x="79.1537%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (4 samples, 0.66%)</title><rect x="80.3987%" y="1173" width="0.6645%" height="15" fill="rgb(218,1,36)" fg:x="484" fg:w="4"/><text x="80.6487%" y="1183.50"></text></g><g><title>hashbrown::raw::h2 (13 samples, 2.16%)</title><rect x="81.0631%" y="1173" width="2.1595%" height="15" fill="rgb(246,84,54)" fg:x="488" fg:w="13"/><text x="81.3131%" y="1183.50">h..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (164 samples, 27.24%)</title><rect x="57.1429%" y="1269" width="27.2425%" height="15" fill="rgb(242,110,6)" fg:x="344" fg:w="164"/><text x="57.3929%" y="1279.50">std::collections::hash::set::HashSet&lt;T,S&gt;::i..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (164 samples, 27.24%)</title><rect x="57.1429%" y="1253" width="27.2425%" height="15" fill="rgb(214,47,5)" fg:x="344" fg:w="164"/><text x="57.3929%" y="1263.50">hashbrown::set::HashSet&lt;T,S,A&gt;::insert</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (164 samples, 27.24%)</title><rect x="57.1429%" y="1237" width="27.2425%" height="15" fill="rgb(218,159,25)" fg:x="344" fg:w="164"/><text x="57.3929%" y="1247.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (71 samples, 11.79%)</title><rect x="72.5914%" y="1221" width="11.7940%" height="15" fill="rgb(215,211,28)" fg:x="437" fg:w="71"/><text x="72.8414%" y="1231.50">hashbrown::raw::R..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (71 samples, 11.79%)</title><rect x="72.5914%" y="1205" width="11.7940%" height="15" fill="rgb(238,59,32)" fg:x="437" fg:w="71"/><text x="72.8414%" y="1215.50">hashbrown::raw::R..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (71 samples, 11.79%)</title><rect x="72.5914%" y="1189" width="11.7940%" height="15" fill="rgb(226,82,3)" fg:x="437" fg:w="71"/><text x="72.8414%" y="1199.50">hashbrown::raw::R..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 1.16%)</title><rect x="83.2226%" y="1173" width="1.1628%" height="15" fill="rgb(240,164,32)" fg:x="501" fg:w="7"/><text x="83.4726%" y="1183.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 1.16%)</title><rect x="83.2226%" y="1157" width="1.1628%" height="15" fill="rgb(232,46,7)" fg:x="501" fg:w="7"/><text x="83.4726%" y="1167.50"></text></g><g><title>demoparser::parsing::entities::update_entity (457 samples, 75.91%)</title><rect x="8.9701%" y="1301" width="75.9136%" height="15" fill="rgb(229,129,53)" fg:x="54" fg:w="457"/><text x="9.2201%" y="1311.50">demoparser::parsing::entities::update_entity</text></g><g><title>demoparser::parsing::entities::parse_ent_props (425 samples, 70.60%)</title><rect x="14.2857%" y="1285" width="70.5980%" height="15" fill="rgb(234,188,29)" fg:x="86" fg:w="425"/><text x="14.5357%" y="1295.50">demoparser::parsing::entities::parse_ent_props</text></g><g><title>std::collections::hash::set::HashSet&lt;T&gt;::new (3 samples, 0.50%)</title><rect x="84.3854%" y="1269" width="0.4983%" height="15" fill="rgb(246,141,4)" fg:x="508" fg:w="3"/><text x="84.6354%" y="1279.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::default::Default&gt;::default (3 samples, 0.50%)</title><rect x="84.3854%" y="1253" width="0.4983%" height="15" fill="rgb(229,23,39)" fg:x="508" fg:w="3"/><text x="84.6354%" y="1263.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::default::Default&gt;::default (3 samples, 0.50%)</title><rect x="84.3854%" y="1237" width="0.4983%" height="15" fill="rgb(206,12,3)" fg:x="508" fg:w="3"/><text x="84.6354%" y="1247.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::default::Default&gt;::default (3 samples, 0.50%)</title><rect x="84.3854%" y="1221" width="0.4983%" height="15" fill="rgb(252,226,20)" fg:x="508" fg:w="3"/><text x="84.6354%" y="1231.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (3 samples, 0.50%)</title><rect x="84.3854%" y="1205" width="0.4983%" height="15" fill="rgb(216,123,35)" fg:x="508" fg:w="3"/><text x="84.6354%" y="1215.50"></text></g><g><title>std::collections::hash::map::RandomState::new (3 samples, 0.50%)</title><rect x="84.3854%" y="1189" width="0.4983%" height="15" fill="rgb(212,68,40)" fg:x="508" fg:w="3"/><text x="84.6354%" y="1199.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.50%)</title><rect x="84.3854%" y="1173" width="0.4983%" height="15" fill="rgb(254,125,32)" fg:x="508" fg:w="3"/><text x="84.6354%" y="1183.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.50%)</title><rect x="84.3854%" y="1157" width="0.4983%" height="15" fill="rgb(253,97,22)" fg:x="508" fg:w="3"/><text x="84.6354%" y="1167.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (1 samples, 0.17%)</title><rect x="84.7176%" y="1141" width="0.1661%" height="15" fill="rgb(241,101,14)" fg:x="510" fg:w="1"/><text x="84.9676%" y="1151.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.17%)</title><rect x="84.7176%" y="1125" width="0.1661%" height="15" fill="rgb(238,103,29)" fg:x="510" fg:w="1"/><text x="84.9676%" y="1135.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (1 samples, 0.17%)</title><rect x="84.7176%" y="1109" width="0.1661%" height="15" fill="rgb(233,195,47)" fg:x="510" fg:w="1"/><text x="84.9676%" y="1119.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.17%)</title><rect x="84.7176%" y="1093" width="0.1661%" height="15" fill="rgb(246,218,30)" fg:x="510" fg:w="1"/><text x="84.9676%" y="1103.50"></text></g><g><title>demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_packet_entities (466 samples, 77.41%)</title><rect x="8.3056%" y="1317" width="77.4086%" height="15" fill="rgb(219,145,47)" fg:x="50" fg:w="466"/><text x="8.5556%" y="1327.50">demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_packet_entities</text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_u_bit_var (5 samples, 0.83%)</title><rect x="84.8837%" y="1301" width="0.8306%" height="15" fill="rgb(243,12,26)" fg:x="511" fg:w="5"/><text x="85.1337%" y="1311.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_nbits (3 samples, 0.50%)</title><rect x="85.2159%" y="1285" width="0.4983%" height="15" fill="rgb(214,87,16)" fg:x="513" fg:w="3"/><text x="85.4659%" y="1295.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (3 samples, 0.50%)</title><rect x="85.2159%" y="1269" width="0.4983%" height="15" fill="rgb(208,99,42)" fg:x="513" fg:w="3"/><text x="85.4659%" y="1279.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_i32 (2 samples, 0.33%)</title><rect x="85.7143%" y="1317" width="0.3322%" height="15" fill="rgb(253,99,2)" fg:x="516" fg:w="2"/><text x="85.9643%" y="1327.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_varint (5 samples, 0.83%)</title><rect x="86.0465%" y="1317" width="0.8306%" height="15" fill="rgb(220,168,23)" fg:x="518" fg:w="5"/><text x="86.2965%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="86.7110%" y="1301" width="0.1661%" height="15" fill="rgb(242,38,24)" fg:x="522" fg:w="1"/><text x="86.9610%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="86.7110%" y="1285" width="0.1661%" height="15" fill="rgb(225,182,9)" fg:x="522" fg:w="1"/><text x="86.9610%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="86.7110%" y="1269" width="0.1661%" height="15" fill="rgb(243,178,37)" fg:x="522" fg:w="1"/><text x="86.9610%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="86.7110%" y="1253" width="0.1661%" height="15" fill="rgb(232,139,19)" fg:x="522" fg:w="1"/><text x="86.9610%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="86.7110%" y="1237" width="0.1661%" height="15" fill="rgb(225,201,24)" fg:x="522" fg:w="1"/><text x="86.9610%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="86.7110%" y="1221" width="0.1661%" height="15" fill="rgb(221,47,46)" fg:x="522" fg:w="1"/><text x="86.9610%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="86.7110%" y="1205" width="0.1661%" height="15" fill="rgb(249,23,13)" fg:x="522" fg:w="1"/><text x="86.9610%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="86.7110%" y="1189" width="0.1661%" height="15" fill="rgb(219,9,5)" fg:x="522" fg:w="1"/><text x="86.9610%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="86.7110%" y="1173" width="0.1661%" height="15" fill="rgb(254,171,16)" fg:x="522" fg:w="1"/><text x="86.9610%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="86.7110%" y="1157" width="0.1661%" height="15" fill="rgb(230,171,20)" fg:x="522" fg:w="1"/><text x="86.9610%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="86.7110%" y="1141" width="0.1661%" height="15" fill="rgb(210,71,41)" fg:x="522" fg:w="1"/><text x="86.9610%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="86.7110%" y="1125" width="0.1661%" height="15" fill="rgb(206,173,20)" fg:x="522" fg:w="1"/><text x="86.9610%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="86.7110%" y="1109" width="0.1661%" height="15" fill="rgb(233,88,34)" fg:x="522" fg:w="1"/><text x="86.9610%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="86.7110%" y="1093" width="0.1661%" height="15" fill="rgb(223,209,46)" fg:x="522" fg:w="1"/><text x="86.9610%" y="1103.50"></text></g><g><title>&lt;demoparser::parsing::stringtables::StField as core::clone::Clone&gt;::clone (1 samples, 0.17%)</title><rect x="86.8771%" y="1221" width="0.1661%" height="15" fill="rgb(250,43,18)" fg:x="523" fg:w="1"/><text x="87.1271%" y="1231.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.17%)</title><rect x="86.8771%" y="1205" width="0.1661%" height="15" fill="rgb(208,13,10)" fg:x="523" fg:w="1"/><text x="87.1271%" y="1215.50"></text></g><g><title>&lt;demoparser::parsing::stringtables::StringTable as core::clone::Clone&gt;::clone (7 samples, 1.16%)</title><rect x="86.8771%" y="1301" width="1.1628%" height="15" fill="rgb(212,200,36)" fg:x="523" fg:w="7"/><text x="87.1271%" y="1311.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 1.16%)</title><rect x="86.8771%" y="1285" width="1.1628%" height="15" fill="rgb(225,90,30)" fg:x="523" fg:w="7"/><text x="87.1271%" y="1295.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 1.16%)</title><rect x="86.8771%" y="1269" width="1.1628%" height="15" fill="rgb(236,182,39)" fg:x="523" fg:w="7"/><text x="87.1271%" y="1279.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 1.16%)</title><rect x="86.8771%" y="1253" width="1.1628%" height="15" fill="rgb(212,144,35)" fg:x="523" fg:w="7"/><text x="87.1271%" y="1263.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 1.16%)</title><rect x="86.8771%" y="1237" width="1.1628%" height="15" fill="rgb(228,63,44)" fg:x="523" fg:w="7"/><text x="87.1271%" y="1247.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (6 samples, 1.00%)</title><rect x="87.0432%" y="1221" width="0.9967%" height="15" fill="rgb(228,109,6)" fg:x="524" fg:w="6"/><text x="87.2932%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="87.7076%" y="1205" width="0.3322%" height="15" fill="rgb(238,117,24)" fg:x="528" fg:w="2"/><text x="87.9576%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="87.8738%" y="1189" width="0.1661%" height="15" fill="rgb(242,26,26)" fg:x="529" fg:w="1"/><text x="88.1238%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="87.8738%" y="1173" width="0.1661%" height="15" fill="rgb(221,92,48)" fg:x="529" fg:w="1"/><text x="88.1238%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="87.8738%" y="1157" width="0.1661%" height="15" fill="rgb(209,209,32)" fg:x="529" fg:w="1"/><text x="88.1238%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="87.8738%" y="1141" width="0.1661%" height="15" fill="rgb(221,70,22)" fg:x="529" fg:w="1"/><text x="88.1238%" y="1151.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.17%)</title><rect x="88.2060%" y="1285" width="0.1661%" height="15" fill="rgb(248,145,5)" fg:x="531" fg:w="1"/><text x="88.4560%" y="1295.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.17%)</title><rect x="88.2060%" y="1269" width="0.1661%" height="15" fill="rgb(226,116,26)" fg:x="531" fg:w="1"/><text x="88.4560%" y="1279.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.17%)</title><rect x="88.2060%" y="1253" width="0.1661%" height="15" fill="rgb(244,5,17)" fg:x="531" fg:w="1"/><text x="88.4560%" y="1263.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.17%)</title><rect x="88.2060%" y="1237" width="0.1661%" height="15" fill="rgb(252,159,33)" fg:x="531" fg:w="1"/><text x="88.4560%" y="1247.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.17%)</title><rect x="88.2060%" y="1221" width="0.1661%" height="15" fill="rgb(206,71,0)" fg:x="531" fg:w="1"/><text x="88.4560%" y="1231.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.17%)</title><rect x="88.2060%" y="1205" width="0.1661%" height="15" fill="rgb(233,118,54)" fg:x="531" fg:w="1"/><text x="88.4560%" y="1215.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.17%)</title><rect x="88.2060%" y="1189" width="0.1661%" height="15" fill="rgb(234,83,48)" fg:x="531" fg:w="1"/><text x="88.4560%" y="1199.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.17%)</title><rect x="88.2060%" y="1173" width="0.1661%" height="15" fill="rgb(228,3,54)" fg:x="531" fg:w="1"/><text x="88.4560%" y="1183.50"></text></g><g><title>_mi_memcpy (1 samples, 0.17%)</title><rect x="88.2060%" y="1157" width="0.1661%" height="15" fill="rgb(226,155,13)" fg:x="531" fg:w="1"/><text x="88.4560%" y="1167.50"></text></g><g><title>memcpy (1 samples, 0.17%)</title><rect x="88.2060%" y="1141" width="0.1661%" height="15" fill="rgb(241,28,37)" fg:x="531" fg:w="1"/><text x="88.4560%" y="1151.50"></text></g><g><title>[libc.so.6] (1 samples, 0.17%)</title><rect x="88.2060%" y="1125" width="0.1661%" height="15" fill="rgb(233,93,10)" fg:x="531" fg:w="1"/><text x="88.4560%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="88.2060%" y="1109" width="0.1661%" height="15" fill="rgb(225,113,19)" fg:x="531" fg:w="1"/><text x="88.4560%" y="1119.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.50%)</title><rect x="88.0399%" y="1301" width="0.4983%" height="15" fill="rgb(241,2,18)" fg:x="530" fg:w="3"/><text x="88.2899%" y="1311.50"></text></g><g><title>core::ptr::write (1 samples, 0.17%)</title><rect x="88.3721%" y="1285" width="0.1661%" height="15" fill="rgb(228,207,21)" fg:x="532" fg:w="1"/><text x="88.6221%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::stringtables::StringTable&gt; (1 samples, 0.17%)</title><rect x="88.5382%" y="1301" width="0.1661%" height="15" fill="rgb(213,211,35)" fg:x="533" fg:w="1"/><text x="88.7882%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::stringtables::StField&gt;&gt; (1 samples, 0.17%)</title><rect x="88.5382%" y="1285" width="0.1661%" height="15" fill="rgb(209,83,10)" fg:x="533" fg:w="1"/><text x="88.7882%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="88.5382%" y="1269" width="0.1661%" height="15" fill="rgb(209,164,1)" fg:x="533" fg:w="1"/><text x="88.7882%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::stringtables::StField]&gt; (1 samples, 0.17%)</title><rect x="88.5382%" y="1253" width="0.1661%" height="15" fill="rgb(213,184,43)" fg:x="533" fg:w="1"/><text x="88.7882%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::stringtables::StField&gt; (1 samples, 0.17%)</title><rect x="88.5382%" y="1237" width="0.1661%" height="15" fill="rgb(231,61,34)" fg:x="533" fg:w="1"/><text x="88.7882%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.17%)</title><rect x="88.5382%" y="1221" width="0.1661%" height="15" fill="rgb(235,75,3)" fg:x="533" fg:w="1"/><text x="88.7882%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.17%)</title><rect x="88.5382%" y="1205" width="0.1661%" height="15" fill="rgb(220,106,47)" fg:x="533" fg:w="1"/><text x="88.7882%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.17%)</title><rect x="88.5382%" y="1189" width="0.1661%" height="15" fill="rgb(210,196,33)" fg:x="533" fg:w="1"/><text x="88.7882%" y="1199.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.17%)</title><rect x="88.5382%" y="1173" width="0.1661%" height="15" fill="rgb(229,154,42)" fg:x="533" fg:w="1"/><text x="88.7882%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.17%)</title><rect x="88.5382%" y="1157" width="0.1661%" height="15" fill="rgb(228,114,26)" fg:x="533" fg:w="1"/><text x="88.7882%" y="1167.50"></text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Demo&gt;::create_string_table (12 samples, 1.99%)</title><rect x="86.8771%" y="1317" width="1.9934%" height="15" fill="rgb(208,144,1)" fg:x="523" fg:w="12"/><text x="87.1271%" y="1327.50">d..</text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Demo&gt;::update_string_table (1 samples, 0.17%)</title><rect x="88.7043%" y="1301" width="0.1661%" height="15" fill="rgb(239,112,37)" fg:x="534" fg:w="1"/><text x="88.9543%" y="1311.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_string_lossy (1 samples, 0.17%)</title><rect x="88.7043%" y="1285" width="0.1661%" height="15" fill="rgb(210,96,50)" fg:x="534" fg:w="1"/><text x="88.9543%" y="1295.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.17%)</title><rect x="88.7043%" y="1269" width="0.1661%" height="15" fill="rgb(222,178,2)" fg:x="534" fg:w="1"/><text x="88.9543%" y="1279.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.17%)</title><rect x="88.7043%" y="1253" width="0.1661%" height="15" fill="rgb(226,74,18)" fg:x="534" fg:w="1"/><text x="88.9543%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.17%)</title><rect x="88.7043%" y="1237" width="0.1661%" height="15" fill="rgb(225,67,54)" fg:x="534" fg:w="1"/><text x="88.9543%" y="1247.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.17%)</title><rect x="88.7043%" y="1221" width="0.1661%" height="15" fill="rgb(251,92,32)" fg:x="534" fg:w="1"/><text x="88.9543%" y="1231.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;&amp;str&gt;&gt;::ne (1 samples, 0.17%)</title><rect x="88.8704%" y="1301" width="0.1661%" height="15" fill="rgb(228,149,22)" fg:x="535" fg:w="1"/><text x="89.1204%" y="1311.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::ne (1 samples, 0.17%)</title><rect x="88.8704%" y="1285" width="0.1661%" height="15" fill="rgb(243,54,13)" fg:x="535" fg:w="1"/><text x="89.1204%" y="1295.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.17%)</title><rect x="88.8704%" y="1269" width="0.1661%" height="15" fill="rgb(243,180,28)" fg:x="535" fg:w="1"/><text x="89.1204%" y="1279.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.17%)</title><rect x="88.8704%" y="1253" width="0.1661%" height="15" fill="rgb(208,167,24)" fg:x="535" fg:w="1"/><text x="89.1204%" y="1263.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.17%)</title><rect x="88.8704%" y="1237" width="0.1661%" height="15" fill="rgb(245,73,45)" fg:x="535" fg:w="1"/><text x="89.1204%" y="1247.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.17%)</title><rect x="88.8704%" y="1221" width="0.1661%" height="15" fill="rgb(237,203,48)" fg:x="535" fg:w="1"/><text x="89.1204%" y="1231.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.17%)</title><rect x="89.2027%" y="1173" width="0.1661%" height="15" fill="rgb(211,197,16)" fg:x="537" fg:w="1"/><text x="89.4527%" y="1183.50"></text></g><g><title>mi_slice_first (1 samples, 0.17%)</title><rect x="89.2027%" y="1157" width="0.1661%" height="15" fill="rgb(243,99,51)" fg:x="537" fg:w="1"/><text x="89.4527%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::CSVCMsg_UpdateStringTable&gt; (3 samples, 0.50%)</title><rect x="89.0365%" y="1301" width="0.4983%" height="15" fill="rgb(215,123,29)" fg:x="536" fg:w="3"/><text x="89.2865%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (3 samples, 0.50%)</title><rect x="89.0365%" y="1285" width="0.4983%" height="15" fill="rgb(239,186,37)" fg:x="536" fg:w="3"/><text x="89.2865%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.50%)</title><rect x="89.0365%" y="1269" width="0.4983%" height="15" fill="rgb(252,136,39)" fg:x="536" fg:w="3"/><text x="89.2865%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.50%)</title><rect x="89.0365%" y="1253" width="0.4983%" height="15" fill="rgb(223,213,32)" fg:x="536" fg:w="3"/><text x="89.2865%" y="1263.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.50%)</title><rect x="89.0365%" y="1237" width="0.4983%" height="15" fill="rgb(233,115,5)" fg:x="536" fg:w="3"/><text x="89.2865%" y="1247.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.50%)</title><rect x="89.0365%" y="1221" width="0.4983%" height="15" fill="rgb(207,226,44)" fg:x="536" fg:w="3"/><text x="89.2865%" y="1231.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.50%)</title><rect x="89.0365%" y="1205" width="0.4983%" height="15" fill="rgb(208,126,0)" fg:x="536" fg:w="3"/><text x="89.2865%" y="1215.50"></text></g><g><title>mi_free (3 samples, 0.50%)</title><rect x="89.0365%" y="1189" width="0.4983%" height="15" fill="rgb(244,66,21)" fg:x="536" fg:w="3"/><text x="89.2865%" y="1199.50"></text></g><g><title>_mi_thread_id (1 samples, 0.17%)</title><rect x="89.3688%" y="1173" width="0.1661%" height="15" fill="rgb(222,97,12)" fg:x="538" fg:w="1"/><text x="89.6188%" y="1183.50"></text></g><g><title>mi_tls_slot (1 samples, 0.17%)</title><rect x="89.3688%" y="1157" width="0.1661%" height="15" fill="rgb(219,213,19)" fg:x="538" fg:w="1"/><text x="89.6188%" y="1167.50"></text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Demo&gt;::update_string_table_msg (5 samples, 0.83%)</title><rect x="88.8704%" y="1317" width="0.8306%" height="15" fill="rgb(252,169,30)" fg:x="535" fg:w="5"/><text x="89.1204%" y="1327.50"></text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_userinfo (1 samples, 0.17%)</title><rect x="89.5349%" y="1301" width="0.1661%" height="15" fill="rgb(206,32,51)" fg:x="539" fg:w="1"/><text x="89.7849%" y="1311.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.17%)</title><rect x="89.5349%" y="1285" width="0.1661%" height="15" fill="rgb(250,172,42)" fg:x="539" fg:w="1"/><text x="89.7849%" y="1295.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.17%)</title><rect x="89.5349%" y="1269" width="0.1661%" height="15" fill="rgb(209,34,43)" fg:x="539" fg:w="1"/><text x="89.7849%" y="1279.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.17%)</title><rect x="89.5349%" y="1253" width="0.1661%" height="15" fill="rgb(223,11,35)" fg:x="539" fg:w="1"/><text x="89.7849%" y="1263.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (1 samples, 0.17%)</title><rect x="89.5349%" y="1237" width="0.1661%" height="15" fill="rgb(251,219,26)" fg:x="539" fg:w="1"/><text x="89.7849%" y="1247.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::check_eof (1 samples, 0.17%)</title><rect x="89.8671%" y="1301" width="0.1661%" height="15" fill="rgb(231,119,3)" fg:x="541" fg:w="1"/><text x="90.1171%" y="1311.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::eof (1 samples, 0.17%)</title><rect x="89.8671%" y="1285" width="0.1661%" height="15" fill="rgb(216,97,11)" fg:x="541" fg:w="1"/><text x="90.1171%" y="1295.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::eof (1 samples, 0.17%)</title><rect x="89.8671%" y="1269" width="0.1661%" height="15" fill="rgb(223,59,9)" fg:x="541" fg:w="1"/><text x="90.1171%" y="1279.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::from_bytes (1 samples, 0.17%)</title><rect x="90.0332%" y="1301" width="0.1661%" height="15" fill="rgb(233,93,31)" fg:x="542" fg:w="1"/><text x="90.2832%" y="1311.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.50%)</title><rect x="90.5316%" y="1269" width="0.4983%" height="15" fill="rgb(239,81,33)" fg:x="545" fg:w="3"/><text x="90.7816%" y="1279.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.17%)</title><rect x="91.3621%" y="1125" width="0.1661%" height="15" fill="rgb(213,120,34)" fg:x="550" fg:w="1"/><text x="91.6121%" y="1135.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (3 samples, 0.50%)</title><rect x="91.3621%" y="1205" width="0.4983%" height="15" fill="rgb(243,49,53)" fg:x="550" fg:w="3"/><text x="91.6121%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (3 samples, 0.50%)</title><rect x="91.3621%" y="1189" width="0.4983%" height="15" fill="rgb(247,216,33)" fg:x="550" fg:w="3"/><text x="91.6121%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (3 samples, 0.50%)</title><rect x="91.3621%" y="1173" width="0.4983%" height="15" fill="rgb(226,26,14)" fg:x="550" fg:w="3"/><text x="91.6121%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (3 samples, 0.50%)</title><rect x="91.3621%" y="1157" width="0.4983%" height="15" fill="rgb(215,49,53)" fg:x="550" fg:w="3"/><text x="91.6121%" y="1167.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.50%)</title><rect x="91.3621%" y="1141" width="0.4983%" height="15" fill="rgb(245,162,40)" fg:x="550" fg:w="3"/><text x="91.6121%" y="1151.50"></text></g><g><title>mi_malloc (2 samples, 0.33%)</title><rect x="91.5282%" y="1125" width="0.3322%" height="15" fill="rgb(229,68,17)" fg:x="551" fg:w="2"/><text x="91.7782%" y="1135.50"></text></g><g><title>mi_heap_malloc (2 samples, 0.33%)</title><rect x="91.5282%" y="1109" width="0.3322%" height="15" fill="rgb(213,182,10)" fg:x="551" fg:w="2"/><text x="91.7782%" y="1119.50"></text></g><g><title>mi_heap_malloc_small (2 samples, 0.33%)</title><rect x="91.5282%" y="1093" width="0.3322%" height="15" fill="rgb(245,125,30)" fg:x="551" fg:w="2"/><text x="91.7782%" y="1103.50"></text></g><g><title>_mi_page_malloc (2 samples, 0.33%)</title><rect x="91.5282%" y="1077" width="0.3322%" height="15" fill="rgb(232,202,2)" fg:x="551" fg:w="2"/><text x="91.7782%" y="1087.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (7 samples, 1.16%)</title><rect x="91.0299%" y="1269" width="1.1628%" height="15" fill="rgb(237,140,51)" fg:x="548" fg:w="7"/><text x="91.2799%" y="1279.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (5 samples, 0.83%)</title><rect x="91.3621%" y="1253" width="0.8306%" height="15" fill="rgb(236,157,25)" fg:x="550" fg:w="5"/><text x="91.6121%" y="1263.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (5 samples, 0.83%)</title><rect x="91.3621%" y="1237" width="0.8306%" height="15" fill="rgb(219,209,0)" fg:x="550" fg:w="5"/><text x="91.6121%" y="1247.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (5 samples, 0.83%)</title><rect x="91.3621%" y="1221" width="0.8306%" height="15" fill="rgb(240,116,54)" fg:x="550" fg:w="5"/><text x="91.6121%" y="1231.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (2 samples, 0.33%)</title><rect x="91.8605%" y="1205" width="0.3322%" height="15" fill="rgb(216,10,36)" fg:x="553" fg:w="2"/><text x="92.1105%" y="1215.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (2 samples, 0.33%)</title><rect x="91.8605%" y="1189" width="0.3322%" height="15" fill="rgb(222,72,44)" fg:x="553" fg:w="2"/><text x="92.1105%" y="1199.50"></text></g><g><title>protobuf::misc::maybe_uninit_write_slice (2 samples, 0.33%)</title><rect x="91.8605%" y="1173" width="0.3322%" height="15" fill="rgb(232,159,9)" fg:x="553" fg:w="2"/><text x="92.1105%" y="1183.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.33%)</title><rect x="91.8605%" y="1157" width="0.3322%" height="15" fill="rgb(210,39,32)" fg:x="553" fg:w="2"/><text x="92.1105%" y="1167.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.33%)</title><rect x="91.8605%" y="1141" width="0.3322%" height="15" fill="rgb(216,194,45)" fg:x="553" fg:w="2"/><text x="92.1105%" y="1151.50"></text></g><g><title>[libc.so.6] (2 samples, 0.33%)</title><rect x="91.8605%" y="1125" width="0.3322%" height="15" fill="rgb(218,18,35)" fg:x="553" fg:w="2"/><text x="92.1105%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="91.8605%" y="1109" width="0.3322%" height="15" fill="rgb(207,83,51)" fg:x="553" fg:w="2"/><text x="92.1105%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="91.8605%" y="1093" width="0.3322%" height="15" fill="rgb(225,63,43)" fg:x="553" fg:w="2"/><text x="92.1105%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="91.8605%" y="1077" width="0.3322%" height="15" fill="rgb(207,57,36)" fg:x="553" fg:w="2"/><text x="92.1105%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="91.8605%" y="1061" width="0.3322%" height="15" fill="rgb(216,99,33)" fg:x="553" fg:w="2"/><text x="92.1105%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="91.8605%" y="1045" width="0.3322%" height="15" fill="rgb(225,42,16)" fg:x="553" fg:w="2"/><text x="92.1105%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="91.8605%" y="1029" width="0.3322%" height="15" fill="rgb(220,201,45)" fg:x="553" fg:w="2"/><text x="92.1105%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="91.8605%" y="1013" width="0.3322%" height="15" fill="rgb(225,33,4)" fg:x="553" fg:w="2"/><text x="92.1105%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="91.8605%" y="997" width="0.3322%" height="15" fill="rgb(224,33,50)" fg:x="553" fg:w="2"/><text x="92.1105%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="91.8605%" y="981" width="0.3322%" height="15" fill="rgb(246,198,51)" fg:x="553" fg:w="2"/><text x="92.1105%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="91.8605%" y="965" width="0.3322%" height="15" fill="rgb(205,22,4)" fg:x="553" fg:w="2"/><text x="92.1105%" y="975.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.17%)</title><rect x="92.3588%" y="1237" width="0.1661%" height="15" fill="rgb(206,3,8)" fg:x="556" fg:w="1"/><text x="92.6088%" y="1247.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int32 (4 samples, 0.66%)</title><rect x="92.1927%" y="1269" width="0.6645%" height="15" fill="rgb(251,23,15)" fg:x="555" fg:w="4"/><text x="92.4427%" y="1279.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int64 (3 samples, 0.50%)</title><rect x="92.3588%" y="1253" width="0.4983%" height="15" fill="rgb(252,88,28)" fg:x="556" fg:w="3"/><text x="92.6088%" y="1263.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (2 samples, 0.33%)</title><rect x="92.5249%" y="1237" width="0.3322%" height="15" fill="rgb(212,127,14)" fg:x="557" fg:w="2"/><text x="92.7749%" y="1247.50"></text></g><g><title>protobuf::varint::decode::decode_varint64 (2 samples, 0.33%)</title><rect x="92.5249%" y="1221" width="0.3322%" height="15" fill="rgb(247,145,37)" fg:x="557" fg:w="2"/><text x="92.7749%" y="1231.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (2 samples, 0.33%)</title><rect x="92.5249%" y="1205" width="0.3322%" height="15" fill="rgb(209,117,53)" fg:x="557" fg:w="2"/><text x="92.7749%" y="1215.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_EntityMsg as protobuf::message::Message&gt;::merge_from (20 samples, 3.32%)</title><rect x="90.1993%" y="1285" width="3.3223%" height="15" fill="rgb(212,90,42)" fg:x="543" fg:w="20"/><text x="90.4493%" y="1295.50">&lt;cs..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (4 samples, 0.66%)</title><rect x="92.8571%" y="1269" width="0.6645%" height="15" fill="rgb(218,164,37)" fg:x="559" fg:w="4"/><text x="93.1071%" y="1279.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (2 samples, 0.33%)</title><rect x="93.1894%" y="1253" width="0.3322%" height="15" fill="rgb(246,65,34)" fg:x="561" fg:w="2"/><text x="93.4394%" y="1263.50"></text></g><g><title>protobuf::varint::decode::decode_varint32 (2 samples, 0.33%)</title><rect x="93.1894%" y="1237" width="0.3322%" height="15" fill="rgb(231,100,33)" fg:x="561" fg:w="2"/><text x="93.4394%" y="1247.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (2 samples, 0.33%)</title><rect x="93.1894%" y="1221" width="0.3322%" height="15" fill="rgb(228,126,14)" fg:x="561" fg:w="2"/><text x="93.4394%" y="1231.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.17%)</title><rect x="94.3522%" y="1269" width="0.1661%" height="15" fill="rgb(215,173,21)" fg:x="568" fg:w="1"/><text x="94.6022%" y="1279.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bool (1 samples, 0.17%)</title><rect x="94.5183%" y="1269" width="0.1661%" height="15" fill="rgb(210,6,40)" fg:x="569" fg:w="1"/><text x="94.7683%" y="1279.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.17%)</title><rect x="95.0166%" y="1109" width="0.1661%" height="15" fill="rgb(212,48,18)" fg:x="572" fg:w="1"/><text x="95.2666%" y="1119.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (3 samples, 0.50%)</title><rect x="95.0166%" y="1205" width="0.4983%" height="15" fill="rgb(230,214,11)" fg:x="572" fg:w="3"/><text x="95.2666%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (3 samples, 0.50%)</title><rect x="95.0166%" y="1189" width="0.4983%" height="15" fill="rgb(254,105,39)" fg:x="572" fg:w="3"/><text x="95.2666%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (3 samples, 0.50%)</title><rect x="95.0166%" y="1173" width="0.4983%" height="15" fill="rgb(245,158,5)" fg:x="572" fg:w="3"/><text x="95.2666%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (3 samples, 0.50%)</title><rect x="95.0166%" y="1157" width="0.4983%" height="15" fill="rgb(249,208,11)" fg:x="572" fg:w="3"/><text x="95.2666%" y="1167.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.50%)</title><rect x="95.0166%" y="1141" width="0.4983%" height="15" fill="rgb(210,39,28)" fg:x="572" fg:w="3"/><text x="95.2666%" y="1151.50"></text></g><g><title>_mi_malloc_generic (3 samples, 0.50%)</title><rect x="95.0166%" y="1125" width="0.4983%" height="15" fill="rgb(211,56,53)" fg:x="572" fg:w="3"/><text x="95.2666%" y="1135.50"></text></g><g><title>mi_find_page (2 samples, 0.33%)</title><rect x="95.1827%" y="1109" width="0.3322%" height="15" fill="rgb(226,201,30)" fg:x="573" fg:w="2"/><text x="95.4327%" y="1119.50"></text></g><g><title>mi_find_free_page (2 samples, 0.33%)</title><rect x="95.1827%" y="1093" width="0.3322%" height="15" fill="rgb(239,101,34)" fg:x="573" fg:w="2"/><text x="95.4327%" y="1103.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (15 samples, 2.49%)</title><rect x="94.6844%" y="1269" width="2.4917%" height="15" fill="rgb(226,209,5)" fg:x="570" fg:w="15"/><text x="94.9344%" y="1279.50">pr..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (14 samples, 2.33%)</title><rect x="94.8505%" y="1253" width="2.3256%" height="15" fill="rgb(250,105,47)" fg:x="571" fg:w="14"/><text x="95.1005%" y="1263.50">p..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (14 samples, 2.33%)</title><rect x="94.8505%" y="1237" width="2.3256%" height="15" fill="rgb(230,72,3)" fg:x="571" fg:w="14"/><text x="95.1005%" y="1247.50">p..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (14 samples, 2.33%)</title><rect x="94.8505%" y="1221" width="2.3256%" height="15" fill="rgb(232,218,39)" fg:x="571" fg:w="14"/><text x="95.1005%" y="1231.50">p..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (10 samples, 1.66%)</title><rect x="95.5150%" y="1205" width="1.6611%" height="15" fill="rgb(248,166,6)" fg:x="575" fg:w="10"/><text x="95.7650%" y="1215.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (10 samples, 1.66%)</title><rect x="95.5150%" y="1189" width="1.6611%" height="15" fill="rgb(247,89,20)" fg:x="575" fg:w="10"/><text x="95.7650%" y="1199.50"></text></g><g><title>protobuf::misc::maybe_uninit_write_slice (10 samples, 1.66%)</title><rect x="95.5150%" y="1173" width="1.6611%" height="15" fill="rgb(248,130,54)" fg:x="575" fg:w="10"/><text x="95.7650%" y="1183.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (10 samples, 1.66%)</title><rect x="95.5150%" y="1157" width="1.6611%" height="15" fill="rgb(234,196,4)" fg:x="575" fg:w="10"/><text x="95.7650%" y="1167.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 1.66%)</title><rect x="95.5150%" y="1141" width="1.6611%" height="15" fill="rgb(250,143,31)" fg:x="575" fg:w="10"/><text x="95.7650%" y="1151.50"></text></g><g><title>[libc.so.6] (10 samples, 1.66%)</title><rect x="95.5150%" y="1125" width="1.6611%" height="15" fill="rgb(211,110,34)" fg:x="575" fg:w="10"/><text x="95.7650%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="96.8439%" y="1109" width="0.3322%" height="15" fill="rgb(215,124,48)" fg:x="583" fg:w="2"/><text x="97.0939%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="96.8439%" y="1093" width="0.3322%" height="15" fill="rgb(216,46,13)" fg:x="583" fg:w="2"/><text x="97.0939%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="96.8439%" y="1077" width="0.3322%" height="15" fill="rgb(205,184,25)" fg:x="583" fg:w="2"/><text x="97.0939%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="96.8439%" y="1061" width="0.3322%" height="15" fill="rgb(228,1,10)" fg:x="583" fg:w="2"/><text x="97.0939%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="96.8439%" y="1045" width="0.3322%" height="15" fill="rgb(213,116,27)" fg:x="583" fg:w="2"/><text x="97.0939%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="96.8439%" y="1029" width="0.3322%" height="15" fill="rgb(241,95,50)" fg:x="583" fg:w="2"/><text x="97.0939%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="96.8439%" y="1013" width="0.3322%" height="15" fill="rgb(238,48,32)" fg:x="583" fg:w="2"/><text x="97.0939%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="96.8439%" y="997" width="0.3322%" height="15" fill="rgb(235,113,49)" fg:x="583" fg:w="2"/><text x="97.0939%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="96.8439%" y="981" width="0.3322%" height="15" fill="rgb(205,127,43)" fg:x="583" fg:w="2"/><text x="97.0939%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="96.8439%" y="965" width="0.3322%" height="15" fill="rgb(250,162,2)" fg:x="583" fg:w="2"/><text x="97.0939%" y="975.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int32 (1 samples, 0.17%)</title><rect x="97.1761%" y="1269" width="0.1661%" height="15" fill="rgb(220,13,41)" fg:x="585" fg:w="1"/><text x="97.4261%" y="1279.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::TryFrom&lt;i64&gt; for i32&gt;::try_from (1 samples, 0.17%)</title><rect x="97.1761%" y="1253" width="0.1661%" height="15" fill="rgb(249,221,25)" fg:x="585" fg:w="1"/><text x="97.4261%" y="1263.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::eof (1 samples, 0.17%)</title><rect x="97.3422%" y="1237" width="0.1661%" height="15" fill="rgb(215,208,19)" fg:x="586" fg:w="1"/><text x="97.5922%" y="1247.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::eof (1 samples, 0.17%)</title><rect x="97.3422%" y="1221" width="0.1661%" height="15" fill="rgb(236,175,2)" fg:x="586" fg:w="1"/><text x="97.5922%" y="1231.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::fill_buf (1 samples, 0.17%)</title><rect x="97.3422%" y="1205" width="0.1661%" height="15" fill="rgb(241,52,2)" fg:x="586" fg:w="1"/><text x="97.5922%" y="1215.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::pos (1 samples, 0.17%)</title><rect x="97.3422%" y="1189" width="0.1661%" height="15" fill="rgb(248,140,14)" fg:x="586" fg:w="1"/><text x="97.5922%" y="1199.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::pos_within_buf (1 samples, 0.17%)</title><rect x="97.3422%" y="1173" width="0.1661%" height="15" fill="rgb(253,22,42)" fg:x="586" fg:w="1"/><text x="97.5922%" y="1183.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::remaining_in_buf (1 samples, 0.17%)</title><rect x="97.5083%" y="1237" width="0.1661%" height="15" fill="rgb(234,61,47)" fg:x="587" fg:w="1"/><text x="97.7583%" y="1247.50"></text></g><g><title>demoparser::parsing::parser::Demo::start_parsing (575 samples, 95.51%)</title><rect x="2.6578%" y="1365" width="95.5150%" height="15" fill="rgb(208,226,15)" fg:x="16" fg:w="575"/><text x="2.9078%" y="1375.50">demoparser::parsing::parser::Demo::start_parsing</text></g><g><title>demoparser::parsing::parser::Demo::parse_cmd (560 samples, 93.02%)</title><rect x="5.1495%" y="1349" width="93.0233%" height="15" fill="rgb(217,221,4)" fg:x="31" fg:w="560"/><text x="5.3995%" y="1359.50">demoparser::parsing::parser::Demo::parse_cmd</text></g><g><title>demoparser::parsing::parser::Demo::parse_packet (542 samples, 90.03%)</title><rect x="8.1395%" y="1333" width="90.0332%" height="15" fill="rgb(212,174,34)" fg:x="49" fg:w="542"/><text x="8.3895%" y="1343.50">demoparser::parsing::parser::Demo::parse_packet</text></g><g><title>protobuf::message::Message::parse_from_bytes (51 samples, 8.47%)</title><rect x="89.7010%" y="1317" width="8.4718%" height="15" fill="rgb(253,83,4)" fg:x="540" fg:w="51"/><text x="89.9510%" y="1327.50">protobuf::me..</text></g><g><title>protobuf::message::Message::parse_from (48 samples, 7.97%)</title><rect x="90.1993%" y="1301" width="7.9734%" height="15" fill="rgb(250,195,49)" fg:x="543" fg:w="48"/><text x="90.4493%" y="1311.50">protobuf::m..</text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_PacketEntities as protobuf::message::Message&gt;::merge_from (28 samples, 4.65%)</title><rect x="93.5216%" y="1285" width="4.6512%" height="15" fill="rgb(241,192,25)" fg:x="563" fg:w="28"/><text x="93.7716%" y="1295.50">&lt;csgo..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (5 samples, 0.83%)</title><rect x="97.3422%" y="1269" width="0.8306%" height="15" fill="rgb(208,124,10)" fg:x="586" fg:w="5"/><text x="97.5922%" y="1279.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (5 samples, 0.83%)</title><rect x="97.3422%" y="1253" width="0.8306%" height="15" fill="rgb(222,33,0)" fg:x="586" fg:w="5"/><text x="97.5922%" y="1263.50"></text></g><g><title>protobuf::varint::decode::decode_varint32 (3 samples, 0.50%)</title><rect x="97.6744%" y="1237" width="0.4983%" height="15" fill="rgb(234,209,28)" fg:x="588" fg:w="3"/><text x="97.9244%" y="1247.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (3 samples, 0.50%)</title><rect x="97.6744%" y="1221" width="0.4983%" height="15" fill="rgb(224,11,23)" fg:x="588" fg:w="3"/><text x="97.9244%" y="1231.50"></text></g><g><title>&lt;u32 as protobuf::varint::decode::DecodeVarint&gt;::from_u64 (1 samples, 0.17%)</title><rect x="98.0066%" y="1205" width="0.1661%" height="15" fill="rgb(232,99,1)" fg:x="590" fg:w="1"/><text x="98.2566%" y="1215.50"></text></g><g><title>demoparser (597 samples, 99.17%)</title><rect x="0.0000%" y="1653" width="99.1694%" height="15" fill="rgb(237,95,45)" fg:x="0" fg:w="597"/><text x="0.2500%" y="1663.50">demoparser</text></g><g><title>_start (590 samples, 98.01%)</title><rect x="1.1628%" y="1637" width="98.0066%" height="15" fill="rgb(208,109,11)" fg:x="7" fg:w="590"/><text x="1.4128%" y="1647.50">_start</text></g><g><title>__libc_start_main_impl (590 samples, 98.01%)</title><rect x="1.1628%" y="1621" width="98.0066%" height="15" fill="rgb(216,190,48)" fg:x="7" fg:w="590"/><text x="1.4128%" y="1631.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (590 samples, 98.01%)</title><rect x="1.1628%" y="1605" width="98.0066%" height="15" fill="rgb(251,171,36)" fg:x="7" fg:w="590"/><text x="1.4128%" y="1615.50">__libc_start_call_main</text></g><g><title>main (590 samples, 98.01%)</title><rect x="1.1628%" y="1589" width="98.0066%" height="15" fill="rgb(230,62,22)" fg:x="7" fg:w="590"/><text x="1.4128%" y="1599.50">main</text></g><g><title>std::rt::lang_start_internal (590 samples, 98.01%)</title><rect x="1.1628%" y="1573" width="98.0066%" height="15" fill="rgb(225,114,35)" fg:x="7" fg:w="590"/><text x="1.4128%" y="1583.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (590 samples, 98.01%)</title><rect x="1.1628%" y="1557" width="98.0066%" height="15" fill="rgb(215,118,42)" fg:x="7" fg:w="590"/><text x="1.4128%" y="1567.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (590 samples, 98.01%)</title><rect x="1.1628%" y="1541" width="98.0066%" height="15" fill="rgb(243,119,21)" fg:x="7" fg:w="590"/><text x="1.4128%" y="1551.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (590 samples, 98.01%)</title><rect x="1.1628%" y="1525" width="98.0066%" height="15" fill="rgb(252,177,53)" fg:x="7" fg:w="590"/><text x="1.4128%" y="1535.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (590 samples, 98.01%)</title><rect x="1.1628%" y="1509" width="98.0066%" height="15" fill="rgb(237,209,29)" fg:x="7" fg:w="590"/><text x="1.4128%" y="1519.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (590 samples, 98.01%)</title><rect x="1.1628%" y="1493" width="98.0066%" height="15" fill="rgb(212,65,23)" fg:x="7" fg:w="590"/><text x="1.4128%" y="1503.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (590 samples, 98.01%)</title><rect x="1.1628%" y="1477" width="98.0066%" height="15" fill="rgb(230,222,46)" fg:x="7" fg:w="590"/><text x="1.4128%" y="1487.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (590 samples, 98.01%)</title><rect x="1.1628%" y="1461" width="98.0066%" height="15" fill="rgb(215,135,32)" fg:x="7" fg:w="590"/><text x="1.4128%" y="1471.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (590 samples, 98.01%)</title><rect x="1.1628%" y="1445" width="98.0066%" height="15" fill="rgb(246,101,22)" fg:x="7" fg:w="590"/><text x="1.4128%" y="1455.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (590 samples, 98.01%)</title><rect x="1.1628%" y="1429" width="98.0066%" height="15" fill="rgb(206,107,13)" fg:x="7" fg:w="590"/><text x="1.4128%" y="1439.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (590 samples, 98.01%)</title><rect x="1.1628%" y="1413" width="98.0066%" height="15" fill="rgb(250,100,44)" fg:x="7" fg:w="590"/><text x="1.4128%" y="1423.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (590 samples, 98.01%)</title><rect x="1.1628%" y="1397" width="98.0066%" height="15" fill="rgb(231,147,38)" fg:x="7" fg:w="590"/><text x="1.4128%" y="1407.50">core::ops::function::FnOnce::call_once</text></g><g><title>demoparser::main (590 samples, 98.01%)</title><rect x="1.1628%" y="1381" width="98.0066%" height="15" fill="rgb(229,8,40)" fg:x="7" fg:w="590"/><text x="1.4128%" y="1391.50">demoparser::main</text></g><g><title>std::io::Write::write_fmt (6 samples, 1.00%)</title><rect x="98.1728%" y="1365" width="0.9967%" height="15" fill="rgb(221,135,30)" fg:x="591" fg:w="6"/><text x="98.4228%" y="1375.50"></text></g><g><title>core::fmt::write (6 samples, 1.00%)</title><rect x="98.1728%" y="1349" width="0.9967%" height="15" fill="rgb(249,193,18)" fg:x="591" fg:w="6"/><text x="98.4228%" y="1359.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (6 samples, 1.00%)</title><rect x="98.1728%" y="1333" width="0.9967%" height="15" fill="rgb(209,133,39)" fg:x="591" fg:w="6"/><text x="98.4228%" y="1343.50"></text></g><g><title>std::io::Write::write_all (6 samples, 1.00%)</title><rect x="98.1728%" y="1317" width="0.9967%" height="15" fill="rgb(232,100,14)" fg:x="591" fg:w="6"/><text x="98.4228%" y="1327.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (6 samples, 1.00%)</title><rect x="98.1728%" y="1301" width="0.9967%" height="15" fill="rgb(224,185,1)" fg:x="591" fg:w="6"/><text x="98.4228%" y="1311.50"></text></g><g><title>std::sys::unix::net::Socket::write (6 samples, 1.00%)</title><rect x="98.1728%" y="1285" width="0.9967%" height="15" fill="rgb(223,139,8)" fg:x="591" fg:w="6"/><text x="98.4228%" y="1295.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (6 samples, 1.00%)</title><rect x="98.1728%" y="1269" width="0.9967%" height="15" fill="rgb(232,213,38)" fg:x="591" fg:w="6"/><text x="98.4228%" y="1279.50"></text></g><g><title>__GI___libc_write (6 samples, 1.00%)</title><rect x="98.1728%" y="1253" width="0.9967%" height="15" fill="rgb(207,94,22)" fg:x="591" fg:w="6"/><text x="98.4228%" y="1263.50"></text></g><g><title>[unknown] (6 samples, 1.00%)</title><rect x="98.1728%" y="1237" width="0.9967%" height="15" fill="rgb(219,183,54)" fg:x="591" fg:w="6"/><text x="98.4228%" y="1247.50"></text></g><g><title>[unknown] (6 samples, 1.00%)</title><rect x="98.1728%" y="1221" width="0.9967%" height="15" fill="rgb(216,185,54)" fg:x="591" fg:w="6"/><text x="98.4228%" y="1231.50"></text></g><g><title>[unknown] (6 samples, 1.00%)</title><rect x="98.1728%" y="1205" width="0.9967%" height="15" fill="rgb(254,217,39)" fg:x="591" fg:w="6"/><text x="98.4228%" y="1215.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="98.3389%" y="1189" width="0.8306%" height="15" fill="rgb(240,178,23)" fg:x="592" fg:w="5"/><text x="98.5889%" y="1199.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="98.3389%" y="1173" width="0.8306%" height="15" fill="rgb(218,11,47)" fg:x="592" fg:w="5"/><text x="98.5889%" y="1183.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="98.3389%" y="1157" width="0.8306%" height="15" fill="rgb(218,51,51)" fg:x="592" fg:w="5"/><text x="98.5889%" y="1167.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="98.3389%" y="1141" width="0.8306%" height="15" fill="rgb(238,126,27)" fg:x="592" fg:w="5"/><text x="98.5889%" y="1151.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="98.3389%" y="1125" width="0.8306%" height="15" fill="rgb(249,202,22)" fg:x="592" fg:w="5"/><text x="98.5889%" y="1135.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="98.3389%" y="1109" width="0.8306%" height="15" fill="rgb(254,195,49)" fg:x="592" fg:w="5"/><text x="98.5889%" y="1119.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="98.3389%" y="1093" width="0.8306%" height="15" fill="rgb(208,123,14)" fg:x="592" fg:w="5"/><text x="98.5889%" y="1103.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="98.3389%" y="1077" width="0.8306%" height="15" fill="rgb(224,200,8)" fg:x="592" fg:w="5"/><text x="98.5889%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.66%)</title><rect x="98.5050%" y="1061" width="0.6645%" height="15" fill="rgb(217,61,36)" fg:x="593" fg:w="4"/><text x="98.7550%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.50%)</title><rect x="98.6711%" y="1045" width="0.4983%" height="15" fill="rgb(206,35,45)" fg:x="594" fg:w="3"/><text x="98.9211%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.50%)</title><rect x="98.6711%" y="1029" width="0.4983%" height="15" fill="rgb(217,65,33)" fg:x="594" fg:w="3"/><text x="98.9211%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.50%)</title><rect x="98.6711%" y="1013" width="0.4983%" height="15" fill="rgb(222,158,48)" fg:x="594" fg:w="3"/><text x="98.9211%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.50%)</title><rect x="98.6711%" y="997" width="0.4983%" height="15" fill="rgb(254,2,54)" fg:x="594" fg:w="3"/><text x="98.9211%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.50%)</title><rect x="98.6711%" y="981" width="0.4983%" height="15" fill="rgb(250,143,38)" fg:x="594" fg:w="3"/><text x="98.9211%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.33%)</title><rect x="98.8372%" y="965" width="0.3322%" height="15" fill="rgb(248,25,0)" fg:x="595" fg:w="2"/><text x="99.0872%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.17%)</title><rect x="99.0033%" y="949" width="0.1661%" height="15" fill="rgb(206,152,27)" fg:x="596" fg:w="1"/><text x="99.2533%" y="959.50"></text></g><g><title>all (602 samples, 100%)</title><rect x="0.0000%" y="1669" width="100.0000%" height="15" fill="rgb(240,77,30)" fg:x="0" fg:w="602"/><text x="0.2500%" y="1679.50"></text></g><g><title>perf-exec (5 samples, 0.83%)</title><rect x="99.1694%" y="1653" width="0.8306%" height="15" fill="rgb(231,5,3)" fg:x="597" fg:w="5"/><text x="99.4194%" y="1663.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="99.1694%" y="1637" width="0.8306%" height="15" fill="rgb(207,226,32)" fg:x="597" fg:w="5"/><text x="99.4194%" y="1647.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="99.1694%" y="1621" width="0.8306%" height="15" fill="rgb(222,207,47)" fg:x="597" fg:w="5"/><text x="99.4194%" y="1631.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="99.1694%" y="1605" width="0.8306%" height="15" fill="rgb(229,115,45)" fg:x="597" fg:w="5"/><text x="99.4194%" y="1615.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="99.1694%" y="1589" width="0.8306%" height="15" fill="rgb(224,191,6)" fg:x="597" fg:w="5"/><text x="99.4194%" y="1599.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="99.1694%" y="1573" width="0.8306%" height="15" fill="rgb(230,227,24)" fg:x="597" fg:w="5"/><text x="99.4194%" y="1583.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="99.1694%" y="1557" width="0.8306%" height="15" fill="rgb(228,80,19)" fg:x="597" fg:w="5"/><text x="99.4194%" y="1567.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="99.1694%" y="1541" width="0.8306%" height="15" fill="rgb(247,229,0)" fg:x="597" fg:w="5"/><text x="99.4194%" y="1551.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="99.1694%" y="1525" width="0.8306%" height="15" fill="rgb(237,194,15)" fg:x="597" fg:w="5"/><text x="99.4194%" y="1535.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="99.1694%" y="1509" width="0.8306%" height="15" fill="rgb(219,203,20)" fg:x="597" fg:w="5"/><text x="99.4194%" y="1519.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="99.1694%" y="1493" width="0.8306%" height="15" fill="rgb(234,128,8)" fg:x="597" fg:w="5"/><text x="99.4194%" y="1503.50"></text></g><g><title>[unknown] (5 samples, 0.83%)</title><rect x="99.1694%" y="1477" width="0.8306%" height="15" fill="rgb(248,202,8)" fg:x="597" fg:w="5"/><text x="99.4194%" y="1487.50"></text></g></svg></svg>