<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1366" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1349.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1349.00"> </text><svg id="frames" x="10" width="1180" total_samples="881"><g><title>[unknown] (3 samples, 0.34%)</title><rect x="0.0000%" y="1269" width="0.3405%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1279.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="0.0000%" y="1253" width="0.3405%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1263.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="0.0000%" y="1237" width="0.3405%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1247.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="0.0000%" y="1221" width="0.3405%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1231.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="0.0000%" y="1205" width="0.3405%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="0.0000%" y="1189" width="0.3405%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="0.0000%" y="1173" width="0.3405%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="0.0000%" y="1157" width="0.3405%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="0.0000%" y="1141" width="0.3405%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="0.0000%" y="1125" width="0.3405%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="0.0000%" y="1109" width="0.3405%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="0.0000%" y="1093" width="0.3405%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="0.2270%" y="1077" width="0.1135%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="0.4770%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="0.3405%" y="805" width="0.1135%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.5905%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.11%)</title><rect x="0.3405%" y="789" width="0.1135%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.5905%" y="799.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.11%)</title><rect x="0.3405%" y="773" width="0.1135%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="0.5905%" y="783.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.11%)</title><rect x="0.3405%" y="757" width="0.1135%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="0.5905%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="0.3405%" y="741" width="0.1135%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="0.5905%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="0.3405%" y="725" width="0.1135%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="0.5905%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.11%)</title><rect x="0.3405%" y="709" width="0.1135%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="0.5905%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.11%)</title><rect x="0.3405%" y="693" width="0.1135%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="0.5905%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.11%)</title><rect x="0.3405%" y="677" width="0.1135%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="0.5905%" y="687.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.11%)</title><rect x="0.3405%" y="661" width="0.1135%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="0.5905%" y="671.50"></text></g><g><title>mi_malloc (1 samples, 0.11%)</title><rect x="0.3405%" y="645" width="0.1135%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="0.5905%" y="655.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.11%)</title><rect x="0.3405%" y="629" width="0.1135%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="1"/><text x="0.5905%" y="639.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.11%)</title><rect x="0.3405%" y="613" width="0.1135%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="1"/><text x="0.5905%" y="623.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.11%)</title><rect x="0.3405%" y="597" width="0.1135%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="1"/><text x="0.5905%" y="607.50"></text></g><g><title>__libc_start_call_main (7 samples, 0.79%)</title><rect x="0.3405%" y="1269" width="0.7946%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1279.50"></text></g><g><title>main (7 samples, 0.79%)</title><rect x="0.3405%" y="1253" width="0.7946%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1263.50"></text></g><g><title>std::rt::lang_start_internal (7 samples, 0.79%)</title><rect x="0.3405%" y="1237" width="0.7946%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1247.50"></text></g><g><title>std::panic::catch_unwind (7 samples, 0.79%)</title><rect x="0.3405%" y="1221" width="0.7946%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1231.50"></text></g><g><title>std::panicking::try (7 samples, 0.79%)</title><rect x="0.3405%" y="1205" width="0.7946%" height="15" fill="rgb(229,88,8)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1215.50"></text></g><g><title>std::panicking::try::do_call (7 samples, 0.79%)</title><rect x="0.3405%" y="1189" width="0.7946%" height="15" fill="rgb(213,181,19)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1199.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (7 samples, 0.79%)</title><rect x="0.3405%" y="1173" width="0.7946%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1183.50"></text></g><g><title>std::panic::catch_unwind (7 samples, 0.79%)</title><rect x="0.3405%" y="1157" width="0.7946%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1167.50"></text></g><g><title>std::panicking::try (7 samples, 0.79%)</title><rect x="0.3405%" y="1141" width="0.7946%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1151.50"></text></g><g><title>std::panicking::try::do_call (7 samples, 0.79%)</title><rect x="0.3405%" y="1125" width="0.7946%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1135.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (7 samples, 0.79%)</title><rect x="0.3405%" y="1109" width="0.7946%" height="15" fill="rgb(245,192,40)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1119.50"></text></g><g><title>std::rt::lang_start::{{closure}} (7 samples, 0.79%)</title><rect x="0.3405%" y="1093" width="0.7946%" height="15" fill="rgb(238,167,29)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1103.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7 samples, 0.79%)</title><rect x="0.3405%" y="1077" width="0.7946%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1087.50"></text></g><g><title>core::ops::function::FnOnce::call_once (7 samples, 0.79%)</title><rect x="0.3405%" y="1061" width="0.7946%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1071.50"></text></g><g><title>demoparser::main (7 samples, 0.79%)</title><rect x="0.3405%" y="1045" width="0.7946%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1055.50"></text></g><g><title>demoparser::parsing::parser::Demo::start_parsing (7 samples, 0.79%)</title><rect x="0.3405%" y="1029" width="0.7946%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1039.50"></text></g><g><title>demoparser::parsing::parser::Demo::parse_cmd (7 samples, 0.79%)</title><rect x="0.3405%" y="1013" width="0.7946%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1023.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_datatable (7 samples, 0.79%)</title><rect x="0.3405%" y="997" width="0.7946%" height="15" fill="rgb(222,207,29)" fg:x="3" fg:w="7"/><text x="0.5905%" y="1007.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::flatten_dt (7 samples, 0.79%)</title><rect x="0.3405%" y="981" width="0.7946%" height="15" fill="rgb(206,96,30)" fg:x="3" fg:w="7"/><text x="0.5905%" y="991.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (7 samples, 0.79%)</title><rect x="0.3405%" y="965" width="0.7946%" height="15" fill="rgb(218,138,4)" fg:x="3" fg:w="7"/><text x="0.5905%" y="975.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (7 samples, 0.79%)</title><rect x="0.3405%" y="949" width="0.7946%" height="15" fill="rgb(250,191,14)" fg:x="3" fg:w="7"/><text x="0.5905%" y="959.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as core::clone::Clone&gt;::clone (7 samples, 0.79%)</title><rect x="0.3405%" y="933" width="0.7946%" height="15" fill="rgb(239,60,40)" fg:x="3" fg:w="7"/><text x="0.5905%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.79%)</title><rect x="0.3405%" y="917" width="0.7946%" height="15" fill="rgb(206,27,48)" fg:x="3" fg:w="7"/><text x="0.5905%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.79%)</title><rect x="0.3405%" y="901" width="0.7946%" height="15" fill="rgb(225,35,8)" fg:x="3" fg:w="7"/><text x="0.5905%" y="911.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.79%)</title><rect x="0.3405%" y="885" width="0.7946%" height="15" fill="rgb(250,213,24)" fg:x="3" fg:w="7"/><text x="0.5905%" y="895.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.79%)</title><rect x="0.3405%" y="869" width="0.7946%" height="15" fill="rgb(247,123,22)" fg:x="3" fg:w="7"/><text x="0.5905%" y="879.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as core::clone::Clone&gt;::clone (7 samples, 0.79%)</title><rect x="0.3405%" y="853" width="0.7946%" height="15" fill="rgb(231,138,38)" fg:x="3" fg:w="7"/><text x="0.5905%" y="863.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.79%)</title><rect x="0.3405%" y="837" width="0.7946%" height="15" fill="rgb(231,145,46)" fg:x="3" fg:w="7"/><text x="0.5905%" y="847.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.79%)</title><rect x="0.3405%" y="821" width="0.7946%" height="15" fill="rgb(251,118,11)" fg:x="3" fg:w="7"/><text x="0.5905%" y="831.50"></text></g><g><title>[unknown] (6 samples, 0.68%)</title><rect x="0.4540%" y="805" width="0.6810%" height="15" fill="rgb(217,147,25)" fg:x="4" fg:w="6"/><text x="0.7040%" y="815.50"></text></g><g><title>[unknown] (6 samples, 0.68%)</title><rect x="0.4540%" y="789" width="0.6810%" height="15" fill="rgb(247,81,37)" fg:x="4" fg:w="6"/><text x="0.7040%" y="799.50"></text></g><g><title>[unknown] (6 samples, 0.68%)</title><rect x="0.4540%" y="773" width="0.6810%" height="15" fill="rgb(209,12,38)" fg:x="4" fg:w="6"/><text x="0.7040%" y="783.50"></text></g><g><title>[unknown] (6 samples, 0.68%)</title><rect x="0.4540%" y="757" width="0.6810%" height="15" fill="rgb(227,1,9)" fg:x="4" fg:w="6"/><text x="0.7040%" y="767.50"></text></g><g><title>[unknown] (6 samples, 0.68%)</title><rect x="0.4540%" y="741" width="0.6810%" height="15" fill="rgb(248,47,43)" fg:x="4" fg:w="6"/><text x="0.7040%" y="751.50"></text></g><g><title>[unknown] (6 samples, 0.68%)</title><rect x="0.4540%" y="725" width="0.6810%" height="15" fill="rgb(221,10,30)" fg:x="4" fg:w="6"/><text x="0.7040%" y="735.50"></text></g><g><title>[unknown] (6 samples, 0.68%)</title><rect x="0.4540%" y="709" width="0.6810%" height="15" fill="rgb(210,229,1)" fg:x="4" fg:w="6"/><text x="0.7040%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="0.5675%" y="693" width="0.5675%" height="15" fill="rgb(222,148,37)" fg:x="5" fg:w="5"/><text x="0.8175%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="0.5675%" y="677" width="0.5675%" height="15" fill="rgb(234,67,33)" fg:x="5" fg:w="5"/><text x="0.8175%" y="687.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (3 samples, 0.34%)</title><rect x="1.1351%" y="1221" width="0.3405%" height="15" fill="rgb(247,98,35)" fg:x="10" fg:w="3"/><text x="1.3851%" y="1231.50"></text></g><g><title>[libc.so.6] (3 samples, 0.34%)</title><rect x="1.1351%" y="1205" width="0.3405%" height="15" fill="rgb(247,138,52)" fg:x="10" fg:w="3"/><text x="1.3851%" y="1215.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="1.5891%" y="1205" width="0.1135%" height="15" fill="rgb(213,79,30)" fg:x="14" fg:w="1"/><text x="1.8391%" y="1215.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="1.5891%" y="1189" width="0.1135%" height="15" fill="rgb(246,177,23)" fg:x="14" fg:w="1"/><text x="1.8391%" y="1199.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.11%)</title><rect x="1.5891%" y="1173" width="0.1135%" height="15" fill="rgb(230,62,27)" fg:x="14" fg:w="1"/><text x="1.8391%" y="1183.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.11%)</title><rect x="1.5891%" y="1157" width="0.1135%" height="15" fill="rgb(216,154,8)" fg:x="14" fg:w="1"/><text x="1.8391%" y="1167.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.11%)</title><rect x="1.5891%" y="1141" width="0.1135%" height="15" fill="rgb(244,35,45)" fg:x="14" fg:w="1"/><text x="1.8391%" y="1151.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="1.5891%" y="1125" width="0.1135%" height="15" fill="rgb(251,115,12)" fg:x="14" fg:w="1"/><text x="1.8391%" y="1135.50"></text></g><g><title>[unknown] (16 samples, 1.82%)</title><rect x="0.0000%" y="1285" width="1.8161%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="16"/><text x="0.2500%" y="1295.50">[..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (6 samples, 0.68%)</title><rect x="1.1351%" y="1269" width="0.6810%" height="15" fill="rgb(233,84,52)" fg:x="10" fg:w="6"/><text x="1.3851%" y="1279.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (6 samples, 0.68%)</title><rect x="1.1351%" y="1253" width="0.6810%" height="15" fill="rgb(207,117,47)" fg:x="10" fg:w="6"/><text x="1.3851%" y="1263.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (6 samples, 0.68%)</title><rect x="1.1351%" y="1237" width="0.6810%" height="15" fill="rgb(249,43,39)" fg:x="10" fg:w="6"/><text x="1.3851%" y="1247.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (3 samples, 0.34%)</title><rect x="1.4756%" y="1221" width="0.3405%" height="15" fill="rgb(209,38,44)" fg:x="13" fg:w="3"/><text x="1.7256%" y="1231.50"></text></g><g><title>csgoproto::netmessages::csvcmsg_send_table::Sendprop_t::flags (1 samples, 0.11%)</title><rect x="1.7026%" y="1205" width="0.1135%" height="15" fill="rgb(236,212,23)" fg:x="15" fg:w="1"/><text x="1.9526%" y="1215.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1 samples, 0.11%)</title><rect x="1.7026%" y="1189" width="0.1135%" height="15" fill="rgb(242,79,21)" fg:x="15" fg:w="1"/><text x="1.9526%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::stringtables::StringTable&gt;&gt; (5 samples, 0.57%)</title><rect x="1.8161%" y="997" width="0.5675%" height="15" fill="rgb(211,96,35)" fg:x="16" fg:w="5"/><text x="2.0661%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.57%)</title><rect x="1.8161%" y="981" width="0.5675%" height="15" fill="rgb(253,215,40)" fg:x="16" fg:w="5"/><text x="2.0661%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::stringtables::StringTable]&gt; (5 samples, 0.57%)</title><rect x="1.8161%" y="965" width="0.5675%" height="15" fill="rgb(211,81,21)" fg:x="16" fg:w="5"/><text x="2.0661%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::stringtables::StringTable&gt; (5 samples, 0.57%)</title><rect x="1.8161%" y="949" width="0.5675%" height="15" fill="rgb(208,190,38)" fg:x="16" fg:w="5"/><text x="2.0661%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::stringtables::StField&gt;&gt; (5 samples, 0.57%)</title><rect x="1.8161%" y="933" width="0.5675%" height="15" fill="rgb(235,213,38)" fg:x="16" fg:w="5"/><text x="2.0661%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.57%)</title><rect x="1.8161%" y="917" width="0.5675%" height="15" fill="rgb(237,122,38)" fg:x="16" fg:w="5"/><text x="2.0661%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::stringtables::StField]&gt; (5 samples, 0.57%)</title><rect x="1.8161%" y="901" width="0.5675%" height="15" fill="rgb(244,218,35)" fg:x="16" fg:w="5"/><text x="2.0661%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::stringtables::StField&gt; (5 samples, 0.57%)</title><rect x="1.8161%" y="885" width="0.5675%" height="15" fill="rgb(240,68,47)" fg:x="16" fg:w="5"/><text x="2.0661%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5 samples, 0.57%)</title><rect x="1.8161%" y="869" width="0.5675%" height="15" fill="rgb(210,16,53)" fg:x="16" fg:w="5"/><text x="2.0661%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.57%)</title><rect x="1.8161%" y="853" width="0.5675%" height="15" fill="rgb(235,124,12)" fg:x="16" fg:w="5"/><text x="2.0661%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.57%)</title><rect x="1.8161%" y="837" width="0.5675%" height="15" fill="rgb(224,169,11)" fg:x="16" fg:w="5"/><text x="2.0661%" y="847.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.57%)</title><rect x="1.8161%" y="821" width="0.5675%" height="15" fill="rgb(250,166,2)" fg:x="16" fg:w="5"/><text x="2.0661%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.57%)</title><rect x="1.8161%" y="805" width="0.5675%" height="15" fill="rgb(242,216,29)" fg:x="16" fg:w="5"/><text x="2.0661%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.11%)</title><rect x="2.3837%" y="853" width="0.1135%" height="15" fill="rgb(230,116,27)" fg:x="21" fg:w="1"/><text x="2.6337%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="2.3837%" y="837" width="0.1135%" height="15" fill="rgb(228,99,48)" fg:x="21" fg:w="1"/><text x="2.6337%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="2.3837%" y="821" width="0.1135%" height="15" fill="rgb(253,11,6)" fg:x="21" fg:w="1"/><text x="2.6337%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="2.3837%" y="805" width="0.1135%" height="15" fill="rgb(247,143,39)" fg:x="21" fg:w="1"/><text x="2.6337%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.11%)</title><rect x="2.3837%" y="789" width="0.1135%" height="15" fill="rgb(236,97,10)" fg:x="21" fg:w="1"/><text x="2.6337%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.11%)</title><rect x="2.3837%" y="773" width="0.1135%" height="15" fill="rgb(233,208,19)" fg:x="21" fg:w="1"/><text x="2.6337%" y="783.50"></text></g><g><title>__rg_dealloc (1 samples, 0.11%)</title><rect x="2.3837%" y="757" width="0.1135%" height="15" fill="rgb(216,164,2)" fg:x="21" fg:w="1"/><text x="2.6337%" y="767.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.11%)</title><rect x="2.3837%" y="741" width="0.1135%" height="15" fill="rgb(220,129,5)" fg:x="21" fg:w="1"/><text x="2.6337%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt;&gt; (2 samples, 0.23%)</title><rect x="2.3837%" y="997" width="0.2270%" height="15" fill="rgb(242,17,10)" fg:x="21" fg:w="2"/><text x="2.6337%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt; (2 samples, 0.23%)</title><rect x="2.3837%" y="981" width="0.2270%" height="15" fill="rgb(242,107,0)" fg:x="21" fg:w="2"/><text x="2.6337%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt; (2 samples, 0.23%)</title><rect x="2.3837%" y="965" width="0.2270%" height="15" fill="rgb(251,28,31)" fg:x="21" fg:w="2"/><text x="2.6337%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable)&gt;&gt; (2 samples, 0.23%)</title><rect x="2.3837%" y="949" width="0.2270%" height="15" fill="rgb(233,223,10)" fg:x="21" fg:w="2"/><text x="2.6337%" y="959.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.23%)</title><rect x="2.3837%" y="933" width="0.2270%" height="15" fill="rgb(215,21,27)" fg:x="21" fg:w="2"/><text x="2.6337%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (2 samples, 0.23%)</title><rect x="2.3837%" y="917" width="0.2270%" height="15" fill="rgb(232,23,21)" fg:x="21" fg:w="2"/><text x="2.6337%" y="927.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.23%)</title><rect x="2.3837%" y="901" width="0.2270%" height="15" fill="rgb(244,5,23)" fg:x="21" fg:w="2"/><text x="2.6337%" y="911.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2 samples, 0.23%)</title><rect x="2.3837%" y="885" width="0.2270%" height="15" fill="rgb(226,81,46)" fg:x="21" fg:w="2"/><text x="2.6337%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable)&gt; (2 samples, 0.23%)</title><rect x="2.3837%" y="869" width="0.2270%" height="15" fill="rgb(247,70,30)" fg:x="21" fg:w="2"/><text x="2.6337%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::CSVCMsg_SendTable&gt; (1 samples, 0.11%)</title><rect x="2.4972%" y="853" width="0.1135%" height="15" fill="rgb(212,68,19)" fg:x="22" fg:w="1"/><text x="2.7472%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt;&gt; (1 samples, 0.11%)</title><rect x="2.4972%" y="837" width="0.1135%" height="15" fill="rgb(240,187,13)" fg:x="22" fg:w="1"/><text x="2.7472%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="2.4972%" y="821" width="0.1135%" height="15" fill="rgb(223,113,26)" fg:x="22" fg:w="1"/><text x="2.7472%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;[csgoproto::netmessages::csvcmsg_send_table::Sendprop_t]&gt; (1 samples, 0.11%)</title><rect x="2.4972%" y="805" width="0.1135%" height="15" fill="rgb(206,192,2)" fg:x="22" fg:w="1"/><text x="2.7472%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt; (1 samples, 0.11%)</title><rect x="2.4972%" y="789" width="0.1135%" height="15" fill="rgb(241,108,4)" fg:x="22" fg:w="1"/><text x="2.7472%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1 samples, 0.11%)</title><rect x="2.4972%" y="773" width="0.1135%" height="15" fill="rgb(247,173,49)" fg:x="22" fg:w="1"/><text x="2.7472%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.11%)</title><rect x="2.4972%" y="757" width="0.1135%" height="15" fill="rgb(224,114,35)" fg:x="22" fg:w="1"/><text x="2.7472%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="2.4972%" y="741" width="0.1135%" height="15" fill="rgb(245,159,27)" fg:x="22" fg:w="1"/><text x="2.7472%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="2.4972%" y="725" width="0.1135%" height="15" fill="rgb(245,172,44)" fg:x="22" fg:w="1"/><text x="2.7472%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="2.4972%" y="709" width="0.1135%" height="15" fill="rgb(236,23,11)" fg:x="22" fg:w="1"/><text x="2.7472%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.11%)</title><rect x="2.4972%" y="693" width="0.1135%" height="15" fill="rgb(205,117,38)" fg:x="22" fg:w="1"/><text x="2.7472%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.11%)</title><rect x="2.4972%" y="677" width="0.1135%" height="15" fill="rgb(237,72,25)" fg:x="22" fg:w="1"/><text x="2.7472%" y="687.50"></text></g><g><title>mi_free (1 samples, 0.11%)</title><rect x="2.4972%" y="661" width="0.1135%" height="15" fill="rgb(244,70,9)" fg:x="22" fg:w="1"/><text x="2.7472%" y="671.50"></text></g><g><title>mi_block_set_next (1 samples, 0.11%)</title><rect x="2.4972%" y="645" width="0.1135%" height="15" fill="rgb(217,125,39)" fg:x="22" fg:w="1"/><text x="2.7472%" y="655.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.11%)</title><rect x="2.4972%" y="629" width="0.1135%" height="15" fill="rgb(235,36,10)" fg:x="22" fg:w="1"/><text x="2.7472%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::BytesVariant&gt; (5 samples, 0.57%)</title><rect x="2.6107%" y="997" width="0.5675%" height="15" fill="rgb(251,123,47)" fg:x="23" fg:w="5"/><text x="2.8607%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap::Mmap&gt; (5 samples, 0.57%)</title><rect x="2.6107%" y="981" width="0.5675%" height="15" fill="rgb(221,13,13)" fg:x="23" fg:w="5"/><text x="2.8607%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap::unix::MmapInner&gt; (5 samples, 0.57%)</title><rect x="2.6107%" y="965" width="0.5675%" height="15" fill="rgb(238,131,9)" fg:x="23" fg:w="5"/><text x="2.8607%" y="975.50"></text></g><g><title>&lt;memmap::unix::MmapInner as core::ops::drop::Drop&gt;::drop (5 samples, 0.57%)</title><rect x="2.6107%" y="949" width="0.5675%" height="15" fill="rgb(211,50,8)" fg:x="23" fg:w="5"/><text x="2.8607%" y="959.50"></text></g><g><title>__GI___munmap (5 samples, 0.57%)</title><rect x="2.6107%" y="933" width="0.5675%" height="15" fill="rgb(245,182,24)" fg:x="23" fg:w="5"/><text x="2.8607%" y="943.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="2.6107%" y="917" width="0.5675%" height="15" fill="rgb(242,14,37)" fg:x="23" fg:w="5"/><text x="2.8607%" y="927.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="2.6107%" y="901" width="0.5675%" height="15" fill="rgb(246,228,12)" fg:x="23" fg:w="5"/><text x="2.8607%" y="911.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="2.6107%" y="885" width="0.5675%" height="15" fill="rgb(213,55,15)" fg:x="23" fg:w="5"/><text x="2.8607%" y="895.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="2.6107%" y="869" width="0.5675%" height="15" fill="rgb(209,9,3)" fg:x="23" fg:w="5"/><text x="2.8607%" y="879.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="2.6107%" y="853" width="0.5675%" height="15" fill="rgb(230,59,30)" fg:x="23" fg:w="5"/><text x="2.8607%" y="863.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="2.6107%" y="837" width="0.5675%" height="15" fill="rgb(209,121,21)" fg:x="23" fg:w="5"/><text x="2.8607%" y="847.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="2.6107%" y="821" width="0.5675%" height="15" fill="rgb(220,109,13)" fg:x="23" fg:w="5"/><text x="2.8607%" y="831.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="2.6107%" y="805" width="0.5675%" height="15" fill="rgb(232,18,1)" fg:x="23" fg:w="5"/><text x="2.8607%" y="815.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="2.6107%" y="789" width="0.5675%" height="15" fill="rgb(215,41,42)" fg:x="23" fg:w="5"/><text x="2.8607%" y="799.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="2.6107%" y="773" width="0.5675%" height="15" fill="rgb(224,123,36)" fg:x="23" fg:w="5"/><text x="2.8607%" y="783.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="2.6107%" y="757" width="0.5675%" height="15" fill="rgb(240,125,3)" fg:x="23" fg:w="5"/><text x="2.8607%" y="767.50"></text></g><g><title>[unknown] (4 samples, 0.45%)</title><rect x="2.7242%" y="741" width="0.4540%" height="15" fill="rgb(205,98,50)" fg:x="24" fg:w="4"/><text x="2.9742%" y="751.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="2.8377%" y="725" width="0.3405%" height="15" fill="rgb(205,185,37)" fg:x="25" fg:w="3"/><text x="3.0877%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="2.9512%" y="709" width="0.2270%" height="15" fill="rgb(238,207,15)" fg:x="26" fg:w="2"/><text x="3.2012%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="2.9512%" y="693" width="0.2270%" height="15" fill="rgb(213,199,42)" fg:x="26" fg:w="2"/><text x="3.2012%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="3.0647%" y="677" width="0.1135%" height="15" fill="rgb(235,201,11)" fg:x="27" fg:w="1"/><text x="3.3147%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.11%)</title><rect x="3.1782%" y="789" width="0.1135%" height="15" fill="rgb(207,46,11)" fg:x="28" fg:w="1"/><text x="3.4282%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="3.1782%" y="773" width="0.1135%" height="15" fill="rgb(241,35,35)" fg:x="28" fg:w="1"/><text x="3.4282%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="3.1782%" y="757" width="0.1135%" height="15" fill="rgb(243,32,47)" fg:x="28" fg:w="1"/><text x="3.4282%" y="767.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="3.1782%" y="741" width="0.1135%" height="15" fill="rgb(247,202,23)" fg:x="28" fg:w="1"/><text x="3.4282%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.11%)</title><rect x="3.1782%" y="725" width="0.1135%" height="15" fill="rgb(219,102,11)" fg:x="28" fg:w="1"/><text x="3.4282%" y="735.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.11%)</title><rect x="3.1782%" y="709" width="0.1135%" height="15" fill="rgb(243,110,44)" fg:x="28" fg:w="1"/><text x="3.4282%" y="719.50"></text></g><g><title>mi_free (1 samples, 0.11%)</title><rect x="3.1782%" y="693" width="0.1135%" height="15" fill="rgb(222,74,54)" fg:x="28" fg:w="1"/><text x="3.4282%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::Demo&gt; (14 samples, 1.59%)</title><rect x="1.8161%" y="1013" width="1.5891%" height="15" fill="rgb(216,99,12)" fg:x="16" fg:w="14"/><text x="2.0661%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (2 samples, 0.23%)</title><rect x="3.1782%" y="997" width="0.2270%" height="15" fill="rgb(226,22,26)" fg:x="28" fg:w="2"/><text x="3.4282%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (2 samples, 0.23%)</title><rect x="3.1782%" y="981" width="0.2270%" height="15" fill="rgb(217,163,10)" fg:x="28" fg:w="2"/><text x="3.4282%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,demoparser::parsing::data_table::ServerClass)&gt;&gt; (2 samples, 0.23%)</title><rect x="3.1782%" y="965" width="0.2270%" height="15" fill="rgb(213,25,53)" fg:x="28" fg:w="2"/><text x="3.4282%" y="975.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.23%)</title><rect x="3.1782%" y="949" width="0.2270%" height="15" fill="rgb(252,105,26)" fg:x="28" fg:w="2"/><text x="3.4282%" y="959.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (2 samples, 0.23%)</title><rect x="3.1782%" y="933" width="0.2270%" height="15" fill="rgb(220,39,43)" fg:x="28" fg:w="2"/><text x="3.4282%" y="943.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.23%)</title><rect x="3.1782%" y="917" width="0.2270%" height="15" fill="rgb(229,68,48)" fg:x="28" fg:w="2"/><text x="3.4282%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2 samples, 0.23%)</title><rect x="3.1782%" y="901" width="0.2270%" height="15" fill="rgb(252,8,32)" fg:x="28" fg:w="2"/><text x="3.4282%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u16,demoparser::parsing::data_table::ServerClass)&gt; (2 samples, 0.23%)</title><rect x="3.1782%" y="885" width="0.2270%" height="15" fill="rgb(223,20,43)" fg:x="28" fg:w="2"/><text x="3.4282%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::data_table::ServerClass&gt; (2 samples, 0.23%)</title><rect x="3.1782%" y="869" width="0.2270%" height="15" fill="rgb(229,81,49)" fg:x="28" fg:w="2"/><text x="3.4282%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::entities::Prop&gt;&gt; (2 samples, 0.23%)</title><rect x="3.1782%" y="853" width="0.2270%" height="15" fill="rgb(236,28,36)" fg:x="28" fg:w="2"/><text x="3.4282%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.23%)</title><rect x="3.1782%" y="837" width="0.2270%" height="15" fill="rgb(249,185,26)" fg:x="28" fg:w="2"/><text x="3.4282%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::entities::Prop]&gt; (2 samples, 0.23%)</title><rect x="3.1782%" y="821" width="0.2270%" height="15" fill="rgb(249,174,33)" fg:x="28" fg:w="2"/><text x="3.4282%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::entities::Prop&gt; (2 samples, 0.23%)</title><rect x="3.1782%" y="805" width="0.2270%" height="15" fill="rgb(233,201,37)" fg:x="28" fg:w="2"/><text x="3.4282%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt;&gt; (1 samples, 0.11%)</title><rect x="3.2917%" y="789" width="0.1135%" height="15" fill="rgb(221,78,26)" fg:x="29" fg:w="1"/><text x="3.5417%" y="799.50"></text></g><g><title>csgoproto::netmessages::file_descriptor (1 samples, 0.11%)</title><rect x="3.4052%" y="1013" width="0.1135%" height="15" fill="rgb(250,127,30)" fg:x="30" fg:w="1"/><text x="3.6552%" y="1023.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.11%)</title><rect x="3.4052%" y="997" width="0.1135%" height="15" fill="rgb(230,49,44)" fg:x="30" fg:w="1"/><text x="3.6552%" y="1007.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.11%)</title><rect x="3.4052%" y="981" width="0.1135%" height="15" fill="rgb(229,67,23)" fg:x="30" fg:w="1"/><text x="3.6552%" y="991.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.11%)</title><rect x="3.4052%" y="965" width="0.1135%" height="15" fill="rgb(249,83,47)" fg:x="30" fg:w="1"/><text x="3.6552%" y="975.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.11%)</title><rect x="3.4052%" y="949" width="0.1135%" height="15" fill="rgb(215,43,3)" fg:x="30" fg:w="1"/><text x="3.6552%" y="959.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.11%)</title><rect x="3.4052%" y="933" width="0.1135%" height="15" fill="rgb(238,154,13)" fg:x="30" fg:w="1"/><text x="3.6552%" y="943.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.11%)</title><rect x="3.4052%" y="917" width="0.1135%" height="15" fill="rgb(219,56,2)" fg:x="30" fg:w="1"/><text x="3.6552%" y="927.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.11%)</title><rect x="3.4052%" y="901" width="0.1135%" height="15" fill="rgb(233,0,4)" fg:x="30" fg:w="1"/><text x="3.6552%" y="911.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.11%)</title><rect x="3.4052%" y="885" width="0.1135%" height="15" fill="rgb(235,30,7)" fg:x="30" fg:w="1"/><text x="3.6552%" y="895.50"></text></g><g><title>csgoproto::netmessages::file_descriptor::{{closure}} (1 samples, 0.11%)</title><rect x="3.4052%" y="869" width="0.1135%" height="15" fill="rgb(250,79,13)" fg:x="30" fg:w="1"/><text x="3.6552%" y="879.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.11%)</title><rect x="3.4052%" y="853" width="0.1135%" height="15" fill="rgb(211,146,34)" fg:x="30" fg:w="1"/><text x="3.6552%" y="863.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.11%)</title><rect x="3.4052%" y="837" width="0.1135%" height="15" fill="rgb(228,22,38)" fg:x="30" fg:w="1"/><text x="3.6552%" y="847.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.11%)</title><rect x="3.4052%" y="821" width="0.1135%" height="15" fill="rgb(235,168,5)" fg:x="30" fg:w="1"/><text x="3.6552%" y="831.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.11%)</title><rect x="3.4052%" y="805" width="0.1135%" height="15" fill="rgb(221,155,16)" fg:x="30" fg:w="1"/><text x="3.6552%" y="815.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.11%)</title><rect x="3.4052%" y="789" width="0.1135%" height="15" fill="rgb(215,215,53)" fg:x="30" fg:w="1"/><text x="3.6552%" y="799.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.11%)</title><rect x="3.4052%" y="773" width="0.1135%" height="15" fill="rgb(223,4,10)" fg:x="30" fg:w="1"/><text x="3.6552%" y="783.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.11%)</title><rect x="3.4052%" y="757" width="0.1135%" height="15" fill="rgb(234,103,6)" fg:x="30" fg:w="1"/><text x="3.6552%" y="767.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.11%)</title><rect x="3.4052%" y="741" width="0.1135%" height="15" fill="rgb(227,97,0)" fg:x="30" fg:w="1"/><text x="3.6552%" y="751.50"></text></g><g><title>csgoproto::netmessages::file_descriptor::{{closure}}::{{closure}} (1 samples, 0.11%)</title><rect x="3.4052%" y="725" width="0.1135%" height="15" fill="rgb(234,150,53)" fg:x="30" fg:w="1"/><text x="3.6552%" y="735.50"></text></g><g><title>protobuf::descriptor::file_descriptor (1 samples, 0.11%)</title><rect x="3.4052%" y="709" width="0.1135%" height="15" fill="rgb(228,201,54)" fg:x="30" fg:w="1"/><text x="3.6552%" y="719.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.11%)</title><rect x="3.4052%" y="693" width="0.1135%" height="15" fill="rgb(222,22,37)" fg:x="30" fg:w="1"/><text x="3.6552%" y="703.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.11%)</title><rect x="3.4052%" y="677" width="0.1135%" height="15" fill="rgb(237,53,32)" fg:x="30" fg:w="1"/><text x="3.6552%" y="687.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.11%)</title><rect x="3.4052%" y="661" width="0.1135%" height="15" fill="rgb(233,25,53)" fg:x="30" fg:w="1"/><text x="3.6552%" y="671.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.11%)</title><rect x="3.4052%" y="645" width="0.1135%" height="15" fill="rgb(210,40,34)" fg:x="30" fg:w="1"/><text x="3.6552%" y="655.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.11%)</title><rect x="3.4052%" y="629" width="0.1135%" height="15" fill="rgb(241,220,44)" fg:x="30" fg:w="1"/><text x="3.6552%" y="639.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.11%)</title><rect x="3.4052%" y="613" width="0.1135%" height="15" fill="rgb(235,28,35)" fg:x="30" fg:w="1"/><text x="3.6552%" y="623.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.11%)</title><rect x="3.4052%" y="597" width="0.1135%" height="15" fill="rgb(210,56,17)" fg:x="30" fg:w="1"/><text x="3.6552%" y="607.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.11%)</title><rect x="3.4052%" y="581" width="0.1135%" height="15" fill="rgb(224,130,29)" fg:x="30" fg:w="1"/><text x="3.6552%" y="591.50"></text></g><g><title>protobuf::descriptor::file_descriptor::{{closure}} (1 samples, 0.11%)</title><rect x="3.4052%" y="565" width="0.1135%" height="15" fill="rgb(235,212,8)" fg:x="30" fg:w="1"/><text x="3.6552%" y="575.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.11%)</title><rect x="3.4052%" y="549" width="0.1135%" height="15" fill="rgb(223,33,50)" fg:x="30" fg:w="1"/><text x="3.6552%" y="559.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.11%)</title><rect x="3.4052%" y="533" width="0.1135%" height="15" fill="rgb(219,149,13)" fg:x="30" fg:w="1"/><text x="3.6552%" y="543.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.11%)</title><rect x="3.4052%" y="517" width="0.1135%" height="15" fill="rgb(250,156,29)" fg:x="30" fg:w="1"/><text x="3.6552%" y="527.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.11%)</title><rect x="3.4052%" y="501" width="0.1135%" height="15" fill="rgb(216,193,19)" fg:x="30" fg:w="1"/><text x="3.6552%" y="511.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.11%)</title><rect x="3.4052%" y="485" width="0.1135%" height="15" fill="rgb(216,135,14)" fg:x="30" fg:w="1"/><text x="3.6552%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.11%)</title><rect x="3.4052%" y="469" width="0.1135%" height="15" fill="rgb(241,47,5)" fg:x="30" fg:w="1"/><text x="3.6552%" y="479.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.11%)</title><rect x="3.4052%" y="453" width="0.1135%" height="15" fill="rgb(233,42,35)" fg:x="30" fg:w="1"/><text x="3.6552%" y="463.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.11%)</title><rect x="3.4052%" y="437" width="0.1135%" height="15" fill="rgb(231,13,6)" fg:x="30" fg:w="1"/><text x="3.6552%" y="447.50"></text></g><g><title>protobuf::descriptor::file_descriptor::{{closure}}::{{closure}} (1 samples, 0.11%)</title><rect x="3.4052%" y="421" width="0.1135%" height="15" fill="rgb(207,181,40)" fg:x="30" fg:w="1"/><text x="3.6552%" y="431.50"></text></g><g><title>protobuf::descriptor::file_descriptor_proto (1 samples, 0.11%)</title><rect x="3.4052%" y="405" width="0.1135%" height="15" fill="rgb(254,173,49)" fg:x="30" fg:w="1"/><text x="3.6552%" y="415.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.11%)</title><rect x="3.4052%" y="389" width="0.1135%" height="15" fill="rgb(221,1,38)" fg:x="30" fg:w="1"/><text x="3.6552%" y="399.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.11%)</title><rect x="3.4052%" y="373" width="0.1135%" height="15" fill="rgb(206,124,46)" fg:x="30" fg:w="1"/><text x="3.6552%" y="383.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.11%)</title><rect x="3.4052%" y="357" width="0.1135%" height="15" fill="rgb(249,21,11)" fg:x="30" fg:w="1"/><text x="3.6552%" y="367.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.11%)</title><rect x="3.4052%" y="341" width="0.1135%" height="15" fill="rgb(222,201,40)" fg:x="30" fg:w="1"/><text x="3.6552%" y="351.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.11%)</title><rect x="3.4052%" y="325" width="0.1135%" height="15" fill="rgb(235,61,29)" fg:x="30" fg:w="1"/><text x="3.6552%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.11%)</title><rect x="3.4052%" y="309" width="0.1135%" height="15" fill="rgb(219,207,3)" fg:x="30" fg:w="1"/><text x="3.6552%" y="319.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.11%)</title><rect x="3.4052%" y="293" width="0.1135%" height="15" fill="rgb(222,56,46)" fg:x="30" fg:w="1"/><text x="3.6552%" y="303.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.11%)</title><rect x="3.4052%" y="277" width="0.1135%" height="15" fill="rgb(239,76,54)" fg:x="30" fg:w="1"/><text x="3.6552%" y="287.50"></text></g><g><title>protobuf::descriptor::file_descriptor_proto::{{closure}} (1 samples, 0.11%)</title><rect x="3.4052%" y="261" width="0.1135%" height="15" fill="rgb(231,124,27)" fg:x="30" fg:w="1"/><text x="3.6552%" y="271.50"></text></g><g><title>protobuf::message::Message::parse_from_bytes (1 samples, 0.11%)</title><rect x="3.4052%" y="245" width="0.1135%" height="15" fill="rgb(249,195,6)" fg:x="30" fg:w="1"/><text x="3.6552%" y="255.50"></text></g><g><title>protobuf::message::Message::parse_from (1 samples, 0.11%)</title><rect x="3.4052%" y="229" width="0.1135%" height="15" fill="rgb(237,174,47)" fg:x="30" fg:w="1"/><text x="3.6552%" y="239.50"></text></g><g><title>&lt;protobuf::descriptor::FileDescriptorProto as protobuf::message::Message&gt;::merge_from (1 samples, 0.11%)</title><rect x="3.4052%" y="213" width="0.1135%" height="15" fill="rgb(206,201,31)" fg:x="30" fg:w="1"/><text x="3.6552%" y="223.50"></text></g><g><title>protobuf::rt::message::read_singular_message_into_field (1 samples, 0.11%)</title><rect x="3.4052%" y="197" width="0.1135%" height="15" fill="rgb(231,57,52)" fg:x="30" fg:w="1"/><text x="3.6552%" y="207.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (1 samples, 0.11%)</title><rect x="3.4052%" y="181" width="0.1135%" height="15" fill="rgb(248,177,22)" fg:x="30" fg:w="1"/><text x="3.6552%" y="191.50"></text></g><g><title>&lt;protobuf::descriptor::SourceCodeInfo as protobuf::message::Message&gt;::merge_from (1 samples, 0.11%)</title><rect x="3.4052%" y="165" width="0.1135%" height="15" fill="rgb(215,211,37)" fg:x="30" fg:w="1"/><text x="3.6552%" y="175.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (1 samples, 0.11%)</title><rect x="3.4052%" y="149" width="0.1135%" height="15" fill="rgb(241,128,51)" fg:x="30" fg:w="1"/><text x="3.6552%" y="159.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (1 samples, 0.11%)</title><rect x="3.4052%" y="133" width="0.1135%" height="15" fill="rgb(227,165,31)" fg:x="30" fg:w="1"/><text x="3.6552%" y="143.50"></text></g><g><title>&lt;protobuf::descriptor::source_code_info::Location as protobuf::message::Message&gt;::merge_from (1 samples, 0.11%)</title><rect x="3.4052%" y="117" width="0.1135%" height="15" fill="rgb(228,167,24)" fg:x="30" fg:w="1"/><text x="3.6552%" y="127.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_repeated_packed_int32_into (1 samples, 0.11%)</title><rect x="3.4052%" y="101" width="0.1135%" height="15" fill="rgb(228,143,12)" fg:x="30" fg:w="1"/><text x="3.6552%" y="111.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_repeated_packed_into (1 samples, 0.11%)</title><rect x="3.4052%" y="85" width="0.1135%" height="15" fill="rgb(249,149,8)" fg:x="30" fg:w="1"/><text x="3.6552%" y="95.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::eof (1 samples, 0.11%)</title><rect x="3.4052%" y="69" width="0.1135%" height="15" fill="rgb(243,35,44)" fg:x="30" fg:w="1"/><text x="3.6552%" y="79.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::eof (1 samples, 0.11%)</title><rect x="3.4052%" y="53" width="0.1135%" height="15" fill="rgb(246,89,9)" fg:x="30" fg:w="1"/><text x="3.6552%" y="63.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::fill_buf (1 samples, 0.11%)</title><rect x="3.4052%" y="37" width="0.1135%" height="15" fill="rgb(233,213,13)" fg:x="30" fg:w="1"/><text x="3.6552%" y="47.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.11%)</title><rect x="4.4268%" y="917" width="0.1135%" height="15" fill="rgb(233,141,41)" fg:x="39" fg:w="1"/><text x="4.6768%" y="927.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.11%)</title><rect x="4.4268%" y="901" width="0.1135%" height="15" fill="rgb(239,167,4)" fg:x="39" fg:w="1"/><text x="4.6768%" y="911.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.11%)</title><rect x="4.4268%" y="885" width="0.1135%" height="15" fill="rgb(209,217,16)" fg:x="39" fg:w="1"/><text x="4.6768%" y="895.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.11%)</title><rect x="4.4268%" y="869" width="0.1135%" height="15" fill="rgb(219,88,35)" fg:x="39" fg:w="1"/><text x="4.6768%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="4.8808%" y="869" width="0.1135%" height="15" fill="rgb(220,193,23)" fg:x="43" fg:w="1"/><text x="5.1308%" y="879.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.11%)</title><rect x="4.9943%" y="869" width="0.1135%" height="15" fill="rgb(230,90,52)" fg:x="44" fg:w="1"/><text x="5.2443%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (7 samples, 0.79%)</title><rect x="5.1078%" y="869" width="0.7946%" height="15" fill="rgb(252,106,19)" fg:x="45" fg:w="7"/><text x="5.3578%" y="879.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (1 samples, 0.11%)</title><rect x="5.9024%" y="869" width="0.1135%" height="15" fill="rgb(206,74,20)" fg:x="52" fg:w="1"/><text x="6.1524%" y="879.50"></text></g><g><title>demoparser::parsing::collect_data::&lt;impl demoparser::parsing::parser::Demo&gt;::collect_player_data (24 samples, 2.72%)</title><rect x="3.6322%" y="997" width="2.7242%" height="15" fill="rgb(230,138,44)" fg:x="32" fg:w="24"/><text x="3.8822%" y="1007.50">de..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (18 samples, 2.04%)</title><rect x="4.3133%" y="981" width="2.0431%" height="15" fill="rgb(235,182,43)" fg:x="38" fg:w="18"/><text x="4.5633%" y="991.50">s..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (18 samples, 2.04%)</title><rect x="4.3133%" y="965" width="2.0431%" height="15" fill="rgb(242,16,51)" fg:x="38" fg:w="18"/><text x="4.5633%" y="975.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (18 samples, 2.04%)</title><rect x="4.3133%" y="949" width="2.0431%" height="15" fill="rgb(248,9,4)" fg:x="38" fg:w="18"/><text x="4.5633%" y="959.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (18 samples, 2.04%)</title><rect x="4.3133%" y="933" width="2.0431%" height="15" fill="rgb(210,31,22)" fg:x="38" fg:w="18"/><text x="4.5633%" y="943.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (16 samples, 1.82%)</title><rect x="4.5403%" y="917" width="1.8161%" height="15" fill="rgb(239,54,39)" fg:x="40" fg:w="16"/><text x="4.7903%" y="927.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (16 samples, 1.82%)</title><rect x="4.5403%" y="901" width="1.8161%" height="15" fill="rgb(230,99,41)" fg:x="40" fg:w="16"/><text x="4.7903%" y="911.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (16 samples, 1.82%)</title><rect x="4.5403%" y="885" width="1.8161%" height="15" fill="rgb(253,106,12)" fg:x="40" fg:w="16"/><text x="4.7903%" y="895.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.34%)</title><rect x="6.0159%" y="869" width="0.3405%" height="15" fill="rgb(213,46,41)" fg:x="53" fg:w="3"/><text x="6.2659%" y="879.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.34%)</title><rect x="6.0159%" y="853" width="0.3405%" height="15" fill="rgb(215,133,35)" fg:x="53" fg:w="3"/><text x="6.2659%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::CSVCMsg_SendTable&gt; (1 samples, 0.11%)</title><rect x="6.4699%" y="965" width="0.1135%" height="15" fill="rgb(213,28,5)" fg:x="57" fg:w="1"/><text x="6.7199%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt;&gt; (1 samples, 0.11%)</title><rect x="6.4699%" y="949" width="0.1135%" height="15" fill="rgb(215,77,49)" fg:x="57" fg:w="1"/><text x="6.7199%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="6.4699%" y="933" width="0.1135%" height="15" fill="rgb(248,100,22)" fg:x="57" fg:w="1"/><text x="6.7199%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;[csgoproto::netmessages::csvcmsg_send_table::Sendprop_t]&gt; (1 samples, 0.11%)</title><rect x="6.4699%" y="917" width="0.1135%" height="15" fill="rgb(208,67,9)" fg:x="57" fg:w="1"/><text x="6.7199%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt; (1 samples, 0.11%)</title><rect x="6.4699%" y="901" width="0.1135%" height="15" fill="rgb(219,133,21)" fg:x="57" fg:w="1"/><text x="6.7199%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1 samples, 0.11%)</title><rect x="6.4699%" y="885" width="0.1135%" height="15" fill="rgb(246,46,29)" fg:x="57" fg:w="1"/><text x="6.7199%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.11%)</title><rect x="6.4699%" y="869" width="0.1135%" height="15" fill="rgb(246,185,52)" fg:x="57" fg:w="1"/><text x="6.7199%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="6.4699%" y="853" width="0.1135%" height="15" fill="rgb(252,136,11)" fg:x="57" fg:w="1"/><text x="6.7199%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.11%)</title><rect x="6.4699%" y="837" width="0.1135%" height="15" fill="rgb(219,138,53)" fg:x="57" fg:w="1"/><text x="6.7199%" y="847.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="6.4699%" y="821" width="0.1135%" height="15" fill="rgb(211,51,23)" fg:x="57" fg:w="1"/><text x="6.7199%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.11%)</title><rect x="6.4699%" y="805" width="0.1135%" height="15" fill="rgb(247,221,28)" fg:x="57" fg:w="1"/><text x="6.7199%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.11%)</title><rect x="6.4699%" y="789" width="0.1135%" height="15" fill="rgb(251,222,45)" fg:x="57" fg:w="1"/><text x="6.7199%" y="799.50"></text></g><g><title>mi_free (1 samples, 0.11%)</title><rect x="6.4699%" y="773" width="0.1135%" height="15" fill="rgb(217,162,53)" fg:x="57" fg:w="1"/><text x="6.7199%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.11%)</title><rect x="6.5834%" y="725" width="0.1135%" height="15" fill="rgb(229,93,14)" fg:x="58" fg:w="1"/><text x="6.8334%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.11%)</title><rect x="6.5834%" y="709" width="0.1135%" height="15" fill="rgb(209,67,49)" fg:x="58" fg:w="1"/><text x="6.8334%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.11%)</title><rect x="6.5834%" y="693" width="0.1135%" height="15" fill="rgb(213,87,29)" fg:x="58" fg:w="1"/><text x="6.8334%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.11%)</title><rect x="6.5834%" y="677" width="0.1135%" height="15" fill="rgb(205,151,52)" fg:x="58" fg:w="1"/><text x="6.8334%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.11%)</title><rect x="6.5834%" y="661" width="0.1135%" height="15" fill="rgb(253,215,39)" fg:x="58" fg:w="1"/><text x="6.8334%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 0.45%)</title><rect x="6.5834%" y="949" width="0.4540%" height="15" fill="rgb(221,220,41)" fg:x="58" fg:w="4"/><text x="6.8334%" y="959.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.45%)</title><rect x="6.5834%" y="933" width="0.4540%" height="15" fill="rgb(218,133,21)" fg:x="58" fg:w="4"/><text x="6.8334%" y="943.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (4 samples, 0.45%)</title><rect x="6.5834%" y="917" width="0.4540%" height="15" fill="rgb(221,193,43)" fg:x="58" fg:w="4"/><text x="6.8334%" y="927.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (4 samples, 0.45%)</title><rect x="6.5834%" y="901" width="0.4540%" height="15" fill="rgb(240,128,52)" fg:x="58" fg:w="4"/><text x="6.8334%" y="911.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (4 samples, 0.45%)</title><rect x="6.5834%" y="885" width="0.4540%" height="15" fill="rgb(253,114,12)" fg:x="58" fg:w="4"/><text x="6.8334%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.45%)</title><rect x="6.5834%" y="869" width="0.4540%" height="15" fill="rgb(215,223,47)" fg:x="58" fg:w="4"/><text x="6.8334%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.45%)</title><rect x="6.5834%" y="853" width="0.4540%" height="15" fill="rgb(248,225,23)" fg:x="58" fg:w="4"/><text x="6.8334%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.45%)</title><rect x="6.5834%" y="837" width="0.4540%" height="15" fill="rgb(250,108,0)" fg:x="58" fg:w="4"/><text x="6.8334%" y="847.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (4 samples, 0.45%)</title><rect x="6.5834%" y="821" width="0.4540%" height="15" fill="rgb(228,208,7)" fg:x="58" fg:w="4"/><text x="6.8334%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (4 samples, 0.45%)</title><rect x="6.5834%" y="805" width="0.4540%" height="15" fill="rgb(244,45,10)" fg:x="58" fg:w="4"/><text x="6.8334%" y="815.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (4 samples, 0.45%)</title><rect x="6.5834%" y="789" width="0.4540%" height="15" fill="rgb(207,125,25)" fg:x="58" fg:w="4"/><text x="6.8334%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.45%)</title><rect x="6.5834%" y="773" width="0.4540%" height="15" fill="rgb(210,195,18)" fg:x="58" fg:w="4"/><text x="6.8334%" y="783.50"></text></g><g><title>hashbrown::map::make_insert_hash (4 samples, 0.45%)</title><rect x="6.5834%" y="757" width="0.4540%" height="15" fill="rgb(249,80,12)" fg:x="58" fg:w="4"/><text x="6.8334%" y="767.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.45%)</title><rect x="6.5834%" y="741" width="0.4540%" height="15" fill="rgb(221,65,9)" fg:x="58" fg:w="4"/><text x="6.8334%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.34%)</title><rect x="6.6969%" y="725" width="0.3405%" height="15" fill="rgb(235,49,36)" fg:x="59" fg:w="3"/><text x="6.9469%" y="735.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="7.0375%" y="933" width="0.1135%" height="15" fill="rgb(225,32,20)" fg:x="62" fg:w="1"/><text x="7.2875%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="7.0375%" y="917" width="0.1135%" height="15" fill="rgb(215,141,46)" fg:x="62" fg:w="1"/><text x="7.2875%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.11%)</title><rect x="7.0375%" y="901" width="0.1135%" height="15" fill="rgb(250,160,47)" fg:x="62" fg:w="1"/><text x="7.2875%" y="911.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.11%)</title><rect x="7.0375%" y="885" width="0.1135%" height="15" fill="rgb(216,222,40)" fg:x="62" fg:w="1"/><text x="7.2875%" y="895.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.11%)</title><rect x="7.0375%" y="869" width="0.1135%" height="15" fill="rgb(234,217,39)" fg:x="62" fg:w="1"/><text x="7.2875%" y="879.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.11%)</title><rect x="7.0375%" y="853" width="0.1135%" height="15" fill="rgb(207,178,40)" fg:x="62" fg:w="1"/><text x="7.2875%" y="863.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1 samples, 0.11%)</title><rect x="7.1510%" y="933" width="0.1135%" height="15" fill="rgb(221,136,13)" fg:x="63" fg:w="1"/><text x="7.4010%" y="943.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.11%)</title><rect x="7.1510%" y="917" width="0.1135%" height="15" fill="rgb(249,199,10)" fg:x="63" fg:w="1"/><text x="7.4010%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.11%)</title><rect x="7.1510%" y="901" width="0.1135%" height="15" fill="rgb(249,222,13)" fg:x="63" fg:w="1"/><text x="7.4010%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.11%)</title><rect x="7.1510%" y="885" width="0.1135%" height="15" fill="rgb(244,185,38)" fg:x="63" fg:w="1"/><text x="7.4010%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.11%)</title><rect x="7.1510%" y="869" width="0.1135%" height="15" fill="rgb(236,202,9)" fg:x="63" fg:w="1"/><text x="7.4010%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.11%)</title><rect x="7.1510%" y="853" width="0.1135%" height="15" fill="rgb(250,229,37)" fg:x="63" fg:w="1"/><text x="7.4010%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.11%)</title><rect x="7.1510%" y="837" width="0.1135%" height="15" fill="rgb(206,174,23)" fg:x="63" fg:w="1"/><text x="7.4010%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.11%)</title><rect x="7.1510%" y="821" width="0.1135%" height="15" fill="rgb(211,33,43)" fg:x="63" fg:w="1"/><text x="7.4010%" y="831.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.11%)</title><rect x="7.1510%" y="805" width="0.1135%" height="15" fill="rgb(245,58,50)" fg:x="63" fg:w="1"/><text x="7.4010%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.11%)</title><rect x="7.1510%" y="789" width="0.1135%" height="15" fill="rgb(244,68,36)" fg:x="63" fg:w="1"/><text x="7.4010%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.11%)</title><rect x="7.1510%" y="773" width="0.1135%" height="15" fill="rgb(232,229,15)" fg:x="63" fg:w="1"/><text x="7.4010%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.11%)</title><rect x="7.1510%" y="757" width="0.1135%" height="15" fill="rgb(254,30,23)" fg:x="63" fg:w="1"/><text x="7.4010%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.11%)</title><rect x="7.1510%" y="741" width="0.1135%" height="15" fill="rgb(235,160,14)" fg:x="63" fg:w="1"/><text x="7.4010%" y="751.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (3 samples, 0.34%)</title><rect x="7.0375%" y="949" width="0.3405%" height="15" fill="rgb(212,155,44)" fg:x="62" fg:w="3"/><text x="7.2875%" y="959.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (1 samples, 0.11%)</title><rect x="7.2645%" y="933" width="0.1135%" height="15" fill="rgb(226,2,50)" fg:x="64" fg:w="1"/><text x="7.5145%" y="943.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1 samples, 0.11%)</title><rect x="7.2645%" y="917" width="0.1135%" height="15" fill="rgb(234,177,6)" fg:x="64" fg:w="1"/><text x="7.5145%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.11%)</title><rect x="7.2645%" y="901" width="0.1135%" height="15" fill="rgb(217,24,9)" fg:x="64" fg:w="1"/><text x="7.5145%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.11%)</title><rect x="7.2645%" y="885" width="0.1135%" height="15" fill="rgb(220,13,46)" fg:x="64" fg:w="1"/><text x="7.5145%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.11%)</title><rect x="7.2645%" y="869" width="0.1135%" height="15" fill="rgb(239,221,27)" fg:x="64" fg:w="1"/><text x="7.5145%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.11%)</title><rect x="7.2645%" y="853" width="0.1135%" height="15" fill="rgb(222,198,25)" fg:x="64" fg:w="1"/><text x="7.5145%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.11%)</title><rect x="7.2645%" y="837" width="0.1135%" height="15" fill="rgb(211,99,13)" fg:x="64" fg:w="1"/><text x="7.5145%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.11%)</title><rect x="7.2645%" y="821" width="0.1135%" height="15" fill="rgb(232,111,31)" fg:x="64" fg:w="1"/><text x="7.5145%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.11%)</title><rect x="7.2645%" y="805" width="0.1135%" height="15" fill="rgb(245,82,37)" fg:x="64" fg:w="1"/><text x="7.5145%" y="815.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.11%)</title><rect x="7.2645%" y="789" width="0.1135%" height="15" fill="rgb(227,149,46)" fg:x="64" fg:w="1"/><text x="7.5145%" y="799.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.11%)</title><rect x="7.2645%" y="773" width="0.1135%" height="15" fill="rgb(218,36,50)" fg:x="64" fg:w="1"/><text x="7.5145%" y="783.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.11%)</title><rect x="7.2645%" y="757" width="0.1135%" height="15" fill="rgb(226,80,48)" fg:x="64" fg:w="1"/><text x="7.5145%" y="767.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.11%)</title><rect x="7.2645%" y="741" width="0.1135%" height="15" fill="rgb(238,224,15)" fg:x="64" fg:w="1"/><text x="7.5145%" y="751.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.11%)</title><rect x="7.2645%" y="725" width="0.1135%" height="15" fill="rgb(241,136,10)" fg:x="64" fg:w="1"/><text x="7.5145%" y="735.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="7.2645%" y="709" width="0.1135%" height="15" fill="rgb(208,32,45)" fg:x="64" fg:w="1"/><text x="7.5145%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (1 samples, 0.11%)</title><rect x="7.3780%" y="933" width="0.1135%" height="15" fill="rgb(207,135,9)" fg:x="65" fg:w="1"/><text x="7.6280%" y="943.50"></text></g><g><title>alloc::slice::merge_sort (1 samples, 0.11%)</title><rect x="7.3780%" y="917" width="0.1135%" height="15" fill="rgb(206,86,44)" fg:x="65" fg:w="1"/><text x="7.6280%" y="927.50"></text></g><g><title>alloc::slice::merge (1 samples, 0.11%)</title><rect x="7.3780%" y="901" width="0.1135%" height="15" fill="rgb(245,177,15)" fg:x="65" fg:w="1"/><text x="7.6280%" y="911.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.11%)</title><rect x="7.3780%" y="885" width="0.1135%" height="15" fill="rgb(206,64,50)" fg:x="65" fg:w="1"/><text x="7.6280%" y="895.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="7.3780%" y="869" width="0.1135%" height="15" fill="rgb(234,36,40)" fg:x="65" fg:w="1"/><text x="7.6280%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.34%)</title><rect x="7.4915%" y="933" width="0.3405%" height="15" fill="rgb(213,64,8)" fg:x="66" fg:w="3"/><text x="7.7415%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.34%)</title><rect x="7.4915%" y="917" width="0.3405%" height="15" fill="rgb(210,75,36)" fg:x="66" fg:w="3"/><text x="7.7415%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.34%)</title><rect x="7.4915%" y="901" width="0.3405%" height="15" fill="rgb(229,88,21)" fg:x="66" fg:w="3"/><text x="7.7415%" y="911.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.34%)</title><rect x="7.4915%" y="885" width="0.3405%" height="15" fill="rgb(252,204,47)" fg:x="66" fg:w="3"/><text x="7.7415%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.34%)</title><rect x="7.4915%" y="869" width="0.3405%" height="15" fill="rgb(208,77,27)" fg:x="66" fg:w="3"/><text x="7.7415%" y="879.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.34%)</title><rect x="7.4915%" y="853" width="0.3405%" height="15" fill="rgb(221,76,26)" fg:x="66" fg:w="3"/><text x="7.7415%" y="863.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.34%)</title><rect x="7.4915%" y="837" width="0.3405%" height="15" fill="rgb(225,139,18)" fg:x="66" fg:w="3"/><text x="7.7415%" y="847.50"></text></g><g><title>_mi_heap_realloc_zero (3 samples, 0.34%)</title><rect x="7.4915%" y="821" width="0.3405%" height="15" fill="rgb(230,137,11)" fg:x="66" fg:w="3"/><text x="7.7415%" y="831.50"></text></g><g><title>_mi_memcpy_aligned (3 samples, 0.34%)</title><rect x="7.4915%" y="805" width="0.3405%" height="15" fill="rgb(212,28,1)" fg:x="66" fg:w="3"/><text x="7.7415%" y="815.50"></text></g><g><title>_mi_memcpy (3 samples, 0.34%)</title><rect x="7.4915%" y="789" width="0.3405%" height="15" fill="rgb(248,164,17)" fg:x="66" fg:w="3"/><text x="7.7415%" y="799.50"></text></g><g><title>memcpy (3 samples, 0.34%)</title><rect x="7.4915%" y="773" width="0.3405%" height="15" fill="rgb(222,171,42)" fg:x="66" fg:w="3"/><text x="7.7415%" y="783.50"></text></g><g><title>[libc.so.6] (3 samples, 0.34%)</title><rect x="7.4915%" y="757" width="0.3405%" height="15" fill="rgb(243,84,45)" fg:x="66" fg:w="3"/><text x="7.7415%" y="767.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="8.0590%" y="917" width="0.1135%" height="15" fill="rgb(252,49,23)" fg:x="71" fg:w="1"/><text x="8.3090%" y="927.50"></text></g><g><title>core::ptr::read (1 samples, 0.11%)</title><rect x="8.0590%" y="901" width="0.1135%" height="15" fill="rgb(215,19,7)" fg:x="71" fg:w="1"/><text x="8.3090%" y="911.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1 samples, 0.11%)</title><rect x="8.1725%" y="917" width="0.1135%" height="15" fill="rgb(238,81,41)" fg:x="72" fg:w="1"/><text x="8.4225%" y="927.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.11%)</title><rect x="8.1725%" y="901" width="0.1135%" height="15" fill="rgb(210,199,37)" fg:x="72" fg:w="1"/><text x="8.4225%" y="911.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.11%)</title><rect x="8.1725%" y="885" width="0.1135%" height="15" fill="rgb(244,192,49)" fg:x="72" fg:w="1"/><text x="8.4225%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.11%)</title><rect x="8.1725%" y="869" width="0.1135%" height="15" fill="rgb(226,211,11)" fg:x="72" fg:w="1"/><text x="8.4225%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.11%)</title><rect x="8.1725%" y="853" width="0.1135%" height="15" fill="rgb(236,162,54)" fg:x="72" fg:w="1"/><text x="8.4225%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.11%)</title><rect x="8.1725%" y="837" width="0.1135%" height="15" fill="rgb(220,229,9)" fg:x="72" fg:w="1"/><text x="8.4225%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.11%)</title><rect x="8.1725%" y="821" width="0.1135%" height="15" fill="rgb(250,87,22)" fg:x="72" fg:w="1"/><text x="8.4225%" y="831.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.11%)</title><rect x="8.1725%" y="805" width="0.1135%" height="15" fill="rgb(239,43,17)" fg:x="72" fg:w="1"/><text x="8.4225%" y="815.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.11%)</title><rect x="8.1725%" y="789" width="0.1135%" height="15" fill="rgb(231,177,25)" fg:x="72" fg:w="1"/><text x="8.4225%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.11%)</title><rect x="8.1725%" y="773" width="0.1135%" height="15" fill="rgb(219,179,1)" fg:x="72" fg:w="1"/><text x="8.4225%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.34%)</title><rect x="8.2860%" y="901" width="0.3405%" height="15" fill="rgb(238,219,53)" fg:x="73" fg:w="3"/><text x="8.5360%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.34%)</title><rect x="8.2860%" y="885" width="0.3405%" height="15" fill="rgb(232,167,36)" fg:x="73" fg:w="3"/><text x="8.5360%" y="895.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.34%)</title><rect x="8.2860%" y="869" width="0.3405%" height="15" fill="rgb(244,19,51)" fg:x="73" fg:w="3"/><text x="8.5360%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.34%)</title><rect x="8.2860%" y="853" width="0.3405%" height="15" fill="rgb(224,6,22)" fg:x="73" fg:w="3"/><text x="8.5360%" y="863.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.34%)</title><rect x="8.2860%" y="837" width="0.3405%" height="15" fill="rgb(224,145,5)" fg:x="73" fg:w="3"/><text x="8.5360%" y="847.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.34%)</title><rect x="8.2860%" y="821" width="0.3405%" height="15" fill="rgb(234,130,49)" fg:x="73" fg:w="3"/><text x="8.5360%" y="831.50"></text></g><g><title>_mi_heap_realloc_zero (3 samples, 0.34%)</title><rect x="8.2860%" y="805" width="0.3405%" height="15" fill="rgb(254,6,2)" fg:x="73" fg:w="3"/><text x="8.5360%" y="815.50"></text></g><g><title>_mi_memcpy_aligned (3 samples, 0.34%)</title><rect x="8.2860%" y="789" width="0.3405%" height="15" fill="rgb(208,96,46)" fg:x="73" fg:w="3"/><text x="8.5360%" y="799.50"></text></g><g><title>_mi_memcpy (3 samples, 0.34%)</title><rect x="8.2860%" y="773" width="0.3405%" height="15" fill="rgb(239,3,39)" fg:x="73" fg:w="3"/><text x="8.5360%" y="783.50"></text></g><g><title>memcpy (3 samples, 0.34%)</title><rect x="8.2860%" y="757" width="0.3405%" height="15" fill="rgb(233,210,1)" fg:x="73" fg:w="3"/><text x="8.5360%" y="767.50"></text></g><g><title>[libc.so.6] (3 samples, 0.34%)</title><rect x="8.2860%" y="741" width="0.3405%" height="15" fill="rgb(244,137,37)" fg:x="73" fg:w="3"/><text x="8.5360%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.45%)</title><rect x="8.2860%" y="917" width="0.4540%" height="15" fill="rgb(240,136,2)" fg:x="73" fg:w="4"/><text x="8.5360%" y="927.50"></text></g><g><title>core::ptr::write (1 samples, 0.11%)</title><rect x="8.6266%" y="901" width="0.1135%" height="15" fill="rgb(239,18,37)" fg:x="76" fg:w="1"/><text x="8.8766%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.11%)</title><rect x="8.9671%" y="901" width="0.1135%" height="15" fill="rgb(218,185,22)" fg:x="79" fg:w="1"/><text x="9.2171%" y="911.50"></text></g><g><title>core::ptr::write (1 samples, 0.11%)</title><rect x="8.9671%" y="885" width="0.1135%" height="15" fill="rgb(225,218,4)" fg:x="79" fg:w="1"/><text x="9.2171%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (1 samples, 0.11%)</title><rect x="9.0806%" y="885" width="0.1135%" height="15" fill="rgb(230,182,32)" fg:x="80" fg:w="1"/><text x="9.3306%" y="895.50"></text></g><g><title>alloc::slice::merge_sort (1 samples, 0.11%)</title><rect x="9.0806%" y="869" width="0.1135%" height="15" fill="rgb(242,56,43)" fg:x="80" fg:w="1"/><text x="9.3306%" y="879.50"></text></g><g><title>alloc::slice::merge (1 samples, 0.11%)</title><rect x="9.0806%" y="853" width="0.1135%" height="15" fill="rgb(233,99,24)" fg:x="80" fg:w="1"/><text x="9.3306%" y="863.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.11%)</title><rect x="9.0806%" y="837" width="0.1135%" height="15" fill="rgb(234,209,42)" fg:x="80" fg:w="1"/><text x="9.3306%" y="847.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="9.0806%" y="821" width="0.1135%" height="15" fill="rgb(227,7,12)" fg:x="80" fg:w="1"/><text x="9.3306%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.11%)</title><rect x="9.1941%" y="885" width="0.1135%" height="15" fill="rgb(245,203,43)" fg:x="81" fg:w="1"/><text x="9.4441%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.11%)</title><rect x="9.1941%" y="869" width="0.1135%" height="15" fill="rgb(238,205,33)" fg:x="81" fg:w="1"/><text x="9.4441%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.11%)</title><rect x="9.1941%" y="853" width="0.1135%" height="15" fill="rgb(231,56,7)" fg:x="81" fg:w="1"/><text x="9.4441%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="9.1941%" y="837" width="0.1135%" height="15" fill="rgb(244,186,29)" fg:x="81" fg:w="1"/><text x="9.4441%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.11%)</title><rect x="9.1941%" y="821" width="0.1135%" height="15" fill="rgb(234,111,31)" fg:x="81" fg:w="1"/><text x="9.4441%" y="831.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.11%)</title><rect x="9.1941%" y="805" width="0.1135%" height="15" fill="rgb(241,149,10)" fg:x="81" fg:w="1"/><text x="9.4441%" y="815.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.11%)</title><rect x="9.1941%" y="789" width="0.1135%" height="15" fill="rgb(249,206,44)" fg:x="81" fg:w="1"/><text x="9.4441%" y="799.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.11%)</title><rect x="9.1941%" y="773" width="0.1135%" height="15" fill="rgb(251,153,30)" fg:x="81" fg:w="1"/><text x="9.4441%" y="783.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.11%)</title><rect x="9.1941%" y="757" width="0.1135%" height="15" fill="rgb(239,152,38)" fg:x="81" fg:w="1"/><text x="9.4441%" y="767.50"></text></g><g><title>_mi_memcpy (1 samples, 0.11%)</title><rect x="9.1941%" y="741" width="0.1135%" height="15" fill="rgb(249,139,47)" fg:x="81" fg:w="1"/><text x="9.4441%" y="751.50"></text></g><g><title>memcpy (1 samples, 0.11%)</title><rect x="9.1941%" y="725" width="0.1135%" height="15" fill="rgb(244,64,35)" fg:x="81" fg:w="1"/><text x="9.4441%" y="735.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="9.1941%" y="709" width="0.1135%" height="15" fill="rgb(216,46,15)" fg:x="81" fg:w="1"/><text x="9.4441%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.11%)</title><rect x="9.4211%" y="869" width="0.1135%" height="15" fill="rgb(250,74,19)" fg:x="83" fg:w="1"/><text x="9.6711%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.11%)</title><rect x="9.4211%" y="853" width="0.1135%" height="15" fill="rgb(249,42,33)" fg:x="83" fg:w="1"/><text x="9.6711%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.11%)</title><rect x="9.4211%" y="837" width="0.1135%" height="15" fill="rgb(242,149,17)" fg:x="83" fg:w="1"/><text x="9.6711%" y="847.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="9.4211%" y="821" width="0.1135%" height="15" fill="rgb(244,29,21)" fg:x="83" fg:w="1"/><text x="9.6711%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.11%)</title><rect x="9.4211%" y="805" width="0.1135%" height="15" fill="rgb(220,130,37)" fg:x="83" fg:w="1"/><text x="9.6711%" y="815.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.11%)</title><rect x="9.4211%" y="789" width="0.1135%" height="15" fill="rgb(211,67,2)" fg:x="83" fg:w="1"/><text x="9.6711%" y="799.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.11%)</title><rect x="9.4211%" y="773" width="0.1135%" height="15" fill="rgb(235,68,52)" fg:x="83" fg:w="1"/><text x="9.6711%" y="783.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.11%)</title><rect x="9.4211%" y="757" width="0.1135%" height="15" fill="rgb(246,142,3)" fg:x="83" fg:w="1"/><text x="9.6711%" y="767.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.11%)</title><rect x="9.4211%" y="741" width="0.1135%" height="15" fill="rgb(241,25,7)" fg:x="83" fg:w="1"/><text x="9.6711%" y="751.50"></text></g><g><title>_mi_memcpy (1 samples, 0.11%)</title><rect x="9.4211%" y="725" width="0.1135%" height="15" fill="rgb(242,119,39)" fg:x="83" fg:w="1"/><text x="9.6711%" y="735.50"></text></g><g><title>memcpy (1 samples, 0.11%)</title><rect x="9.4211%" y="709" width="0.1135%" height="15" fill="rgb(241,98,45)" fg:x="83" fg:w="1"/><text x="9.6711%" y="719.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="9.4211%" y="693" width="0.1135%" height="15" fill="rgb(254,28,30)" fg:x="83" fg:w="1"/><text x="9.6711%" y="703.50"></text></g><g><title>__rg_alloc (1 samples, 0.11%)</title><rect x="9.7616%" y="629" width="0.1135%" height="15" fill="rgb(241,142,54)" fg:x="86" fg:w="1"/><text x="10.0116%" y="639.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.11%)</title><rect x="9.7616%" y="613" width="0.1135%" height="15" fill="rgb(222,85,15)" fg:x="86" fg:w="1"/><text x="10.0116%" y="623.50"></text></g><g><title>mimalloc::may_use_unaligned_api (1 samples, 0.11%)</title><rect x="9.7616%" y="597" width="0.1135%" height="15" fill="rgb(210,85,47)" fg:x="86" fg:w="1"/><text x="10.0116%" y="607.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (2 samples, 0.23%)</title><rect x="9.7616%" y="853" width="0.2270%" height="15" fill="rgb(224,206,25)" fg:x="86" fg:w="2"/><text x="10.0116%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (2 samples, 0.23%)</title><rect x="9.7616%" y="837" width="0.2270%" height="15" fill="rgb(243,201,19)" fg:x="86" fg:w="2"/><text x="10.0116%" y="847.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.23%)</title><rect x="9.7616%" y="821" width="0.2270%" height="15" fill="rgb(236,59,4)" fg:x="86" fg:w="2"/><text x="10.0116%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.23%)</title><rect x="9.7616%" y="805" width="0.2270%" height="15" fill="rgb(254,179,45)" fg:x="86" fg:w="2"/><text x="10.0116%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.23%)</title><rect x="9.7616%" y="789" width="0.2270%" height="15" fill="rgb(226,14,10)" fg:x="86" fg:w="2"/><text x="10.0116%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.23%)</title><rect x="9.7616%" y="773" width="0.2270%" height="15" fill="rgb(244,27,41)" fg:x="86" fg:w="2"/><text x="10.0116%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.23%)</title><rect x="9.7616%" y="757" width="0.2270%" height="15" fill="rgb(235,35,32)" fg:x="86" fg:w="2"/><text x="10.0116%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.23%)</title><rect x="9.7616%" y="741" width="0.2270%" height="15" fill="rgb(218,68,31)" fg:x="86" fg:w="2"/><text x="10.0116%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.23%)</title><rect x="9.7616%" y="725" width="0.2270%" height="15" fill="rgb(207,120,37)" fg:x="86" fg:w="2"/><text x="10.0116%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.23%)</title><rect x="9.7616%" y="709" width="0.2270%" height="15" fill="rgb(227,98,0)" fg:x="86" fg:w="2"/><text x="10.0116%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.23%)</title><rect x="9.7616%" y="693" width="0.2270%" height="15" fill="rgb(207,7,3)" fg:x="86" fg:w="2"/><text x="10.0116%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.23%)</title><rect x="9.7616%" y="677" width="0.2270%" height="15" fill="rgb(206,98,19)" fg:x="86" fg:w="2"/><text x="10.0116%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.23%)</title><rect x="9.7616%" y="661" width="0.2270%" height="15" fill="rgb(217,5,26)" fg:x="86" fg:w="2"/><text x="10.0116%" y="671.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.23%)</title><rect x="9.7616%" y="645" width="0.2270%" height="15" fill="rgb(235,190,38)" fg:x="86" fg:w="2"/><text x="10.0116%" y="655.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.11%)</title><rect x="9.8751%" y="629" width="0.1135%" height="15" fill="rgb(247,86,24)" fg:x="87" fg:w="1"/><text x="10.1251%" y="639.50"></text></g><g><title>mi_find_page (1 samples, 0.11%)</title><rect x="9.8751%" y="613" width="0.1135%" height="15" fill="rgb(205,101,16)" fg:x="87" fg:w="1"/><text x="10.1251%" y="623.50"></text></g><g><title>mi_find_free_page (1 samples, 0.11%)</title><rect x="9.8751%" y="597" width="0.1135%" height="15" fill="rgb(246,168,33)" fg:x="87" fg:w="1"/><text x="10.1251%" y="607.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 0.11%)</title><rect x="9.8751%" y="581" width="0.1135%" height="15" fill="rgb(231,114,1)" fg:x="87" fg:w="1"/><text x="10.1251%" y="591.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.11%)</title><rect x="9.8751%" y="565" width="0.1135%" height="15" fill="rgb(207,184,53)" fg:x="87" fg:w="1"/><text x="10.1251%" y="575.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.11%)</title><rect x="9.8751%" y="549" width="0.1135%" height="15" fill="rgb(224,95,51)" fg:x="87" fg:w="1"/><text x="10.1251%" y="559.50"></text></g><g><title>mi_page_free_list_extend (1 samples, 0.11%)</title><rect x="9.8751%" y="533" width="0.1135%" height="15" fill="rgb(212,188,45)" fg:x="87" fg:w="1"/><text x="10.1251%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.11%)</title><rect x="9.9886%" y="853" width="0.1135%" height="15" fill="rgb(223,154,38)" fg:x="88" fg:w="1"/><text x="10.2386%" y="863.50"></text></g><g><title>core::ptr::write (1 samples, 0.11%)</title><rect x="9.9886%" y="837" width="0.1135%" height="15" fill="rgb(251,22,52)" fg:x="88" fg:w="1"/><text x="10.2386%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.11%)</title><rect x="10.1022%" y="837" width="0.1135%" height="15" fill="rgb(229,209,22)" fg:x="89" fg:w="1"/><text x="10.3522%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.11%)</title><rect x="10.1022%" y="821" width="0.1135%" height="15" fill="rgb(234,138,34)" fg:x="89" fg:w="1"/><text x="10.3522%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.11%)</title><rect x="10.1022%" y="805" width="0.1135%" height="15" fill="rgb(212,95,11)" fg:x="89" fg:w="1"/><text x="10.3522%" y="815.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="10.1022%" y="789" width="0.1135%" height="15" fill="rgb(240,179,47)" fg:x="89" fg:w="1"/><text x="10.3522%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.11%)</title><rect x="10.1022%" y="773" width="0.1135%" height="15" fill="rgb(240,163,11)" fg:x="89" fg:w="1"/><text x="10.3522%" y="783.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.11%)</title><rect x="10.1022%" y="757" width="0.1135%" height="15" fill="rgb(236,37,12)" fg:x="89" fg:w="1"/><text x="10.3522%" y="767.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.11%)</title><rect x="10.1022%" y="741" width="0.1135%" height="15" fill="rgb(232,164,16)" fg:x="89" fg:w="1"/><text x="10.3522%" y="751.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.11%)</title><rect x="10.1022%" y="725" width="0.1135%" height="15" fill="rgb(244,205,15)" fg:x="89" fg:w="1"/><text x="10.3522%" y="735.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.11%)</title><rect x="10.1022%" y="709" width="0.1135%" height="15" fill="rgb(223,117,47)" fg:x="89" fg:w="1"/><text x="10.3522%" y="719.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.11%)</title><rect x="10.1022%" y="693" width="0.1135%" height="15" fill="rgb(244,107,35)" fg:x="89" fg:w="1"/><text x="10.3522%" y="703.50"></text></g><g><title>csgoproto::netmessages::csvcmsg_send_table::Sendprop_t::flags (1 samples, 0.11%)</title><rect x="10.2157%" y="837" width="0.1135%" height="15" fill="rgb(205,140,8)" fg:x="90" fg:w="1"/><text x="10.4657%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.11%)</title><rect x="10.3292%" y="805" width="0.1135%" height="15" fill="rgb(228,84,46)" fg:x="91" fg:w="1"/><text x="10.5792%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.11%)</title><rect x="10.3292%" y="789" width="0.1135%" height="15" fill="rgb(254,188,9)" fg:x="91" fg:w="1"/><text x="10.5792%" y="799.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="10.3292%" y="773" width="0.1135%" height="15" fill="rgb(206,112,54)" fg:x="91" fg:w="1"/><text x="10.5792%" y="783.50"></text></g><g><title>mi_malloc (1 samples, 0.11%)</title><rect x="10.3292%" y="757" width="0.1135%" height="15" fill="rgb(216,84,49)" fg:x="91" fg:w="1"/><text x="10.5792%" y="767.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.11%)</title><rect x="10.3292%" y="741" width="0.1135%" height="15" fill="rgb(214,194,35)" fg:x="91" fg:w="1"/><text x="10.5792%" y="751.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.11%)</title><rect x="10.3292%" y="725" width="0.1135%" height="15" fill="rgb(249,28,3)" fg:x="91" fg:w="1"/><text x="10.5792%" y="735.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.11%)</title><rect x="10.3292%" y="709" width="0.1135%" height="15" fill="rgb(222,56,52)" fg:x="91" fg:w="1"/><text x="10.5792%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.45%)</title><rect x="10.3292%" y="821" width="0.4540%" height="15" fill="rgb(245,217,50)" fg:x="91" fg:w="4"/><text x="10.5792%" y="831.50"></text></g><g><title>core::ptr::write (3 samples, 0.34%)</title><rect x="10.4427%" y="805" width="0.3405%" height="15" fill="rgb(213,201,24)" fg:x="92" fg:w="3"/><text x="10.6927%" y="815.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1 samples, 0.11%)</title><rect x="10.7832%" y="805" width="0.1135%" height="15" fill="rgb(248,116,28)" fg:x="95" fg:w="1"/><text x="11.0332%" y="815.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.11%)</title><rect x="10.7832%" y="789" width="0.1135%" height="15" fill="rgb(219,72,43)" fg:x="95" fg:w="1"/><text x="11.0332%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.11%)</title><rect x="10.7832%" y="773" width="0.1135%" height="15" fill="rgb(209,138,14)" fg:x="95" fg:w="1"/><text x="11.0332%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.11%)</title><rect x="10.7832%" y="757" width="0.1135%" height="15" fill="rgb(222,18,33)" fg:x="95" fg:w="1"/><text x="11.0332%" y="767.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.11%)</title><rect x="10.7832%" y="741" width="0.1135%" height="15" fill="rgb(213,199,7)" fg:x="95" fg:w="1"/><text x="11.0332%" y="751.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.11%)</title><rect x="10.7832%" y="725" width="0.1135%" height="15" fill="rgb(250,110,10)" fg:x="95" fg:w="1"/><text x="11.0332%" y="735.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.11%)</title><rect x="10.7832%" y="709" width="0.1135%" height="15" fill="rgb(248,123,6)" fg:x="95" fg:w="1"/><text x="11.0332%" y="719.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.11%)</title><rect x="10.7832%" y="693" width="0.1135%" height="15" fill="rgb(206,91,31)" fg:x="95" fg:w="1"/><text x="11.0332%" y="703.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.11%)</title><rect x="10.7832%" y="677" width="0.1135%" height="15" fill="rgb(211,154,13)" fg:x="95" fg:w="1"/><text x="11.0332%" y="687.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1 samples, 0.11%)</title><rect x="10.8967%" y="805" width="0.1135%" height="15" fill="rgb(225,148,7)" fg:x="96" fg:w="1"/><text x="11.1467%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.11%)</title><rect x="10.8967%" y="789" width="0.1135%" height="15" fill="rgb(220,160,43)" fg:x="96" fg:w="1"/><text x="11.1467%" y="799.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.11%)</title><rect x="10.8967%" y="773" width="0.1135%" height="15" fill="rgb(213,52,39)" fg:x="96" fg:w="1"/><text x="11.1467%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.11%)</title><rect x="10.8967%" y="757" width="0.1135%" height="15" fill="rgb(243,137,7)" fg:x="96" fg:w="1"/><text x="11.1467%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.11%)</title><rect x="10.8967%" y="741" width="0.1135%" height="15" fill="rgb(230,79,13)" fg:x="96" fg:w="1"/><text x="11.1467%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.11%)</title><rect x="10.8967%" y="725" width="0.1135%" height="15" fill="rgb(247,105,23)" fg:x="96" fg:w="1"/><text x="11.1467%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.11%)</title><rect x="10.8967%" y="709" width="0.1135%" height="15" fill="rgb(223,179,41)" fg:x="96" fg:w="1"/><text x="11.1467%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.11%)</title><rect x="10.8967%" y="693" width="0.1135%" height="15" fill="rgb(218,9,34)" fg:x="96" fg:w="1"/><text x="11.1467%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="10.8967%" y="677" width="0.1135%" height="15" fill="rgb(222,106,8)" fg:x="96" fg:w="1"/><text x="11.1467%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="10.8967%" y="661" width="0.1135%" height="15" fill="rgb(211,220,0)" fg:x="96" fg:w="1"/><text x="11.1467%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.11%)</title><rect x="10.8967%" y="645" width="0.1135%" height="15" fill="rgb(229,52,16)" fg:x="96" fg:w="1"/><text x="11.1467%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.11%)</title><rect x="10.8967%" y="629" width="0.1135%" height="15" fill="rgb(212,155,18)" fg:x="96" fg:w="1"/><text x="11.1467%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.11%)</title><rect x="10.8967%" y="613" width="0.1135%" height="15" fill="rgb(242,21,14)" fg:x="96" fg:w="1"/><text x="11.1467%" y="623.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.11%)</title><rect x="10.8967%" y="597" width="0.1135%" height="15" fill="rgb(222,19,48)" fg:x="96" fg:w="1"/><text x="11.1467%" y="607.50"></text></g><g><title>mi_malloc (1 samples, 0.11%)</title><rect x="10.8967%" y="581" width="0.1135%" height="15" fill="rgb(232,45,27)" fg:x="96" fg:w="1"/><text x="11.1467%" y="591.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.11%)</title><rect x="10.8967%" y="565" width="0.1135%" height="15" fill="rgb(249,103,42)" fg:x="96" fg:w="1"/><text x="11.1467%" y="575.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.11%)</title><rect x="10.8967%" y="549" width="0.1135%" height="15" fill="rgb(246,81,33)" fg:x="96" fg:w="1"/><text x="11.1467%" y="559.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.11%)</title><rect x="10.8967%" y="533" width="0.1135%" height="15" fill="rgb(252,33,42)" fg:x="96" fg:w="1"/><text x="11.1467%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.11%)</title><rect x="11.0102%" y="805" width="0.1135%" height="15" fill="rgb(209,212,41)" fg:x="97" fg:w="1"/><text x="11.2602%" y="815.50"></text></g><g><title>core::ptr::write (1 samples, 0.11%)</title><rect x="11.0102%" y="789" width="0.1135%" height="15" fill="rgb(207,154,6)" fg:x="97" fg:w="1"/><text x="11.2602%" y="799.50"></text></g><g><title>csgoproto::netmessages::csvcmsg_send_table::Sendprop_t::type_ (1 samples, 0.11%)</title><rect x="11.1237%" y="805" width="0.1135%" height="15" fill="rgb(223,64,47)" fg:x="98" fg:w="1"/><text x="11.3737%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1 samples, 0.11%)</title><rect x="11.1237%" y="789" width="0.1135%" height="15" fill="rgb(211,161,38)" fg:x="98" fg:w="1"/><text x="11.3737%" y="799.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (21 samples, 2.38%)</title><rect x="9.3076%" y="885" width="2.3837%" height="15" fill="rgb(219,138,40)" fg:x="82" fg:w="21"/><text x="9.5576%" y="895.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (19 samples, 2.16%)</title><rect x="9.5346%" y="869" width="2.1566%" height="15" fill="rgb(241,228,46)" fg:x="84" fg:w="19"/><text x="9.7846%" y="879.50">d..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (14 samples, 1.59%)</title><rect x="10.1022%" y="853" width="1.5891%" height="15" fill="rgb(223,209,38)" fg:x="89" fg:w="14"/><text x="10.3522%" y="863.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (12 samples, 1.36%)</title><rect x="10.3292%" y="837" width="1.3621%" height="15" fill="rgb(236,164,45)" fg:x="91" fg:w="12"/><text x="10.5792%" y="847.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (8 samples, 0.91%)</title><rect x="10.7832%" y="821" width="0.9081%" height="15" fill="rgb(231,15,5)" fg:x="95" fg:w="8"/><text x="11.0332%" y="831.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (4 samples, 0.45%)</title><rect x="11.2372%" y="805" width="0.4540%" height="15" fill="rgb(252,35,15)" fg:x="99" fg:w="4"/><text x="11.4872%" y="815.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::is_prop_excl (2 samples, 0.23%)</title><rect x="11.4642%" y="789" width="0.2270%" height="15" fill="rgb(248,181,18)" fg:x="101" fg:w="2"/><text x="11.7142%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.23%)</title><rect x="11.4642%" y="773" width="0.2270%" height="15" fill="rgb(233,39,42)" fg:x="101" fg:w="2"/><text x="11.7142%" y="783.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2 samples, 0.23%)</title><rect x="11.4642%" y="757" width="0.2270%" height="15" fill="rgb(238,110,33)" fg:x="101" fg:w="2"/><text x="11.7142%" y="767.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.23%)</title><rect x="11.4642%" y="741" width="0.2270%" height="15" fill="rgb(233,195,10)" fg:x="101" fg:w="2"/><text x="11.7142%" y="751.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.23%)</title><rect x="11.4642%" y="725" width="0.2270%" height="15" fill="rgb(254,105,3)" fg:x="101" fg:w="2"/><text x="11.7142%" y="735.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.23%)</title><rect x="11.4642%" y="709" width="0.2270%" height="15" fill="rgb(221,225,9)" fg:x="101" fg:w="2"/><text x="11.7142%" y="719.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::flatten_dt (46 samples, 5.22%)</title><rect x="6.5834%" y="965" width="5.2213%" height="15" fill="rgb(224,227,45)" fg:x="58" fg:w="46"/><text x="6.8334%" y="975.50">demopa..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (39 samples, 4.43%)</title><rect x="7.3780%" y="949" width="4.4268%" height="15" fill="rgb(229,198,43)" fg:x="65" fg:w="39"/><text x="7.6280%" y="959.50">demop..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (35 samples, 3.97%)</title><rect x="7.8320%" y="933" width="3.9728%" height="15" fill="rgb(206,209,35)" fg:x="69" fg:w="35"/><text x="8.0820%" y="943.50">demo..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (27 samples, 3.06%)</title><rect x="8.7401%" y="917" width="3.0647%" height="15" fill="rgb(245,195,53)" fg:x="77" fg:w="27"/><text x="8.9901%" y="927.50">dem..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (24 samples, 2.72%)</title><rect x="9.0806%" y="901" width="2.7242%" height="15" fill="rgb(240,92,26)" fg:x="80" fg:w="24"/><text x="9.3306%" y="911.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::is_prop_excl (1 samples, 0.11%)</title><rect x="11.6913%" y="885" width="0.1135%" height="15" fill="rgb(207,40,23)" fg:x="103" fg:w="1"/><text x="11.9413%" y="895.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.11%)</title><rect x="11.6913%" y="869" width="0.1135%" height="15" fill="rgb(223,111,35)" fg:x="103" fg:w="1"/><text x="11.9413%" y="879.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.11%)</title><rect x="11.6913%" y="853" width="0.1135%" height="15" fill="rgb(229,147,28)" fg:x="103" fg:w="1"/><text x="11.9413%" y="863.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.11%)</title><rect x="11.6913%" y="837" width="0.1135%" height="15" fill="rgb(211,29,28)" fg:x="103" fg:w="1"/><text x="11.9413%" y="847.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.11%)</title><rect x="11.6913%" y="821" width="0.1135%" height="15" fill="rgb(228,72,33)" fg:x="103" fg:w="1"/><text x="11.9413%" y="831.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.11%)</title><rect x="11.6913%" y="805" width="0.1135%" height="15" fill="rgb(205,214,31)" fg:x="103" fg:w="1"/><text x="11.9413%" y="815.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="11.6913%" y="789" width="0.1135%" height="15" fill="rgb(224,111,15)" fg:x="103" fg:w="1"/><text x="11.9413%" y="799.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_float (1 samples, 0.11%)</title><rect x="11.8048%" y="869" width="0.1135%" height="15" fill="rgb(253,21,26)" fg:x="104" fg:w="1"/><text x="12.0548%" y="879.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (2 samples, 0.23%)</title><rect x="11.9183%" y="869" width="0.2270%" height="15" fill="rgb(245,139,43)" fg:x="105" fg:w="2"/><text x="12.1683%" y="879.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (1 samples, 0.11%)</title><rect x="12.0318%" y="853" width="0.1135%" height="15" fill="rgb(252,170,7)" fg:x="106" fg:w="1"/><text x="12.2818%" y="863.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::eof (1 samples, 0.11%)</title><rect x="12.0318%" y="837" width="0.1135%" height="15" fill="rgb(231,118,14)" fg:x="106" fg:w="1"/><text x="12.2818%" y="847.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::eof (1 samples, 0.11%)</title><rect x="12.0318%" y="821" width="0.1135%" height="15" fill="rgb(238,83,0)" fg:x="106" fg:w="1"/><text x="12.2818%" y="831.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::fill_buf (1 samples, 0.11%)</title><rect x="12.0318%" y="805" width="0.1135%" height="15" fill="rgb(221,39,39)" fg:x="106" fg:w="1"/><text x="12.2818%" y="815.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::pos (1 samples, 0.11%)</title><rect x="12.0318%" y="789" width="0.1135%" height="15" fill="rgb(222,119,46)" fg:x="106" fg:w="1"/><text x="12.2818%" y="799.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::pos_within_buf (1 samples, 0.11%)</title><rect x="12.0318%" y="773" width="0.1135%" height="15" fill="rgb(222,165,49)" fg:x="106" fg:w="1"/><text x="12.2818%" y="783.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_datatable (51 samples, 5.79%)</title><rect x="6.4699%" y="981" width="5.7889%" height="15" fill="rgb(219,113,52)" fg:x="57" fg:w="51"/><text x="6.7199%" y="991.50">demopar..</text></g><g><title>protobuf::message::Message::parse_from_bytes (4 samples, 0.45%)</title><rect x="11.8048%" y="965" width="0.4540%" height="15" fill="rgb(214,7,15)" fg:x="104" fg:w="4"/><text x="12.0548%" y="975.50"></text></g><g><title>protobuf::message::Message::parse_from (4 samples, 0.45%)</title><rect x="11.8048%" y="949" width="0.4540%" height="15" fill="rgb(235,32,4)" fg:x="104" fg:w="4"/><text x="12.0548%" y="959.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as protobuf::message::Message&gt;::merge_from (4 samples, 0.45%)</title><rect x="11.8048%" y="933" width="0.4540%" height="15" fill="rgb(238,90,54)" fg:x="104" fg:w="4"/><text x="12.0548%" y="943.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (4 samples, 0.45%)</title><rect x="11.8048%" y="917" width="0.4540%" height="15" fill="rgb(213,208,19)" fg:x="104" fg:w="4"/><text x="12.0548%" y="927.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (4 samples, 0.45%)</title><rect x="11.8048%" y="901" width="0.4540%" height="15" fill="rgb(233,156,4)" fg:x="104" fg:w="4"/><text x="12.0548%" y="911.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as protobuf::message::Message&gt;::merge_from (4 samples, 0.45%)</title><rect x="11.8048%" y="885" width="0.4540%" height="15" fill="rgb(207,194,5)" fg:x="104" fg:w="4"/><text x="12.0548%" y="895.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_string (1 samples, 0.11%)</title><rect x="12.1453%" y="869" width="0.1135%" height="15" fill="rgb(206,111,30)" fg:x="107" fg:w="1"/><text x="12.3953%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (8 samples, 0.91%)</title><rect x="13.3939%" y="949" width="0.9081%" height="15" fill="rgb(243,70,54)" fg:x="118" fg:w="8"/><text x="13.6439%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (8 samples, 0.91%)</title><rect x="13.3939%" y="933" width="0.9081%" height="15" fill="rgb(242,28,8)" fg:x="118" fg:w="8"/><text x="13.6439%" y="943.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (1 samples, 0.11%)</title><rect x="14.3019%" y="949" width="0.1135%" height="15" fill="rgb(219,106,18)" fg:x="126" fg:w="1"/><text x="14.5519%" y="959.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_hasher (1 samples, 0.11%)</title><rect x="14.3019%" y="933" width="0.1135%" height="15" fill="rgb(244,222,10)" fg:x="126" fg:w="1"/><text x="14.5519%" y="943.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.23%)</title><rect x="14.4154%" y="949" width="0.2270%" height="15" fill="rgb(236,179,52)" fg:x="127" fg:w="2"/><text x="14.6654%" y="959.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.23%)</title><rect x="14.4154%" y="933" width="0.2270%" height="15" fill="rgb(213,23,39)" fg:x="127" fg:w="2"/><text x="14.6654%" y="943.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (1 samples, 0.11%)</title><rect x="14.5289%" y="917" width="0.1135%" height="15" fill="rgb(238,48,10)" fg:x="128" fg:w="1"/><text x="14.7789%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::CSVCMsg_PacketEntities&gt; (3 samples, 0.34%)</title><rect x="14.6425%" y="949" width="0.3405%" height="15" fill="rgb(251,196,23)" fg:x="129" fg:w="3"/><text x="14.8925%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (3 samples, 0.34%)</title><rect x="14.6425%" y="933" width="0.3405%" height="15" fill="rgb(250,152,24)" fg:x="129" fg:w="3"/><text x="14.8925%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.23%)</title><rect x="14.7560%" y="917" width="0.2270%" height="15" fill="rgb(209,150,17)" fg:x="130" fg:w="2"/><text x="15.0060%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.23%)</title><rect x="14.7560%" y="901" width="0.2270%" height="15" fill="rgb(234,202,34)" fg:x="130" fg:w="2"/><text x="15.0060%" y="911.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.23%)</title><rect x="14.7560%" y="885" width="0.2270%" height="15" fill="rgb(253,148,53)" fg:x="130" fg:w="2"/><text x="15.0060%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.23%)</title><rect x="14.7560%" y="869" width="0.2270%" height="15" fill="rgb(218,129,16)" fg:x="130" fg:w="2"/><text x="15.0060%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.23%)</title><rect x="14.7560%" y="853" width="0.2270%" height="15" fill="rgb(216,85,19)" fg:x="130" fg:w="2"/><text x="15.0060%" y="863.50"></text></g><g><title>mi_free (2 samples, 0.23%)</title><rect x="14.7560%" y="837" width="0.2270%" height="15" fill="rgb(235,228,7)" fg:x="130" fg:w="2"/><text x="15.0060%" y="847.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.11%)</title><rect x="14.8695%" y="821" width="0.1135%" height="15" fill="rgb(245,175,0)" fg:x="131" fg:w="1"/><text x="15.1195%" y="831.50"></text></g><g><title>mi_slice_first (1 samples, 0.11%)</title><rect x="14.8695%" y="805" width="0.1135%" height="15" fill="rgb(208,168,36)" fg:x="131" fg:w="1"/><text x="15.1195%" y="815.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (14 samples, 1.59%)</title><rect x="14.9830%" y="933" width="1.5891%" height="15" fill="rgb(246,171,24)" fg:x="132" fg:w="14"/><text x="15.2330%" y="943.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::TryFrom&lt;u32&gt; for u16&gt;::try_from (14 samples, 1.59%)</title><rect x="14.9830%" y="917" width="1.5891%" height="15" fill="rgb(215,142,24)" fg:x="132" fg:w="14"/><text x="15.2330%" y="927.50"></text></g><g><title>ahash::operations::folded_multiply (9 samples, 1.02%)</title><rect x="16.5721%" y="821" width="1.0216%" height="15" fill="rgb(250,187,7)" fg:x="146" fg:w="9"/><text x="16.8221%" y="831.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (7 samples, 0.79%)</title><rect x="16.7991%" y="805" width="0.7946%" height="15" fill="rgb(228,66,33)" fg:x="148" fg:w="7"/><text x="17.0491%" y="815.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (12 samples, 1.36%)</title><rect x="16.5721%" y="837" width="1.3621%" height="15" fill="rgb(234,215,21)" fg:x="146" fg:w="12"/><text x="16.8221%" y="847.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.34%)</title><rect x="17.5936%" y="821" width="0.3405%" height="15" fill="rgb(222,191,20)" fg:x="155" fg:w="3"/><text x="17.8436%" y="831.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 1.82%)</title><rect x="16.5721%" y="869" width="1.8161%" height="15" fill="rgb(245,79,54)" fg:x="146" fg:w="16"/><text x="16.8221%" y="879.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 1.82%)</title><rect x="16.5721%" y="853" width="1.8161%" height="15" fill="rgb(240,10,37)" fg:x="146" fg:w="16"/><text x="16.8221%" y="863.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.45%)</title><rect x="17.9342%" y="837" width="0.4540%" height="15" fill="rgb(214,192,32)" fg:x="158" fg:w="4"/><text x="18.1842%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (4 samples, 0.45%)</title><rect x="17.9342%" y="821" width="0.4540%" height="15" fill="rgb(209,36,54)" fg:x="158" fg:w="4"/><text x="18.1842%" y="831.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u16 (4 samples, 0.45%)</title><rect x="17.9342%" y="805" width="0.4540%" height="15" fill="rgb(220,10,11)" fg:x="158" fg:w="4"/><text x="18.1842%" y="815.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (4 samples, 0.45%)</title><rect x="17.9342%" y="789" width="0.4540%" height="15" fill="rgb(221,106,17)" fg:x="158" fg:w="4"/><text x="18.1842%" y="799.50"></text></g><g><title>ahash::operations::folded_multiply (4 samples, 0.45%)</title><rect x="17.9342%" y="773" width="0.4540%" height="15" fill="rgb(251,142,44)" fg:x="158" fg:w="4"/><text x="18.1842%" y="783.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (4 samples, 0.45%)</title><rect x="17.9342%" y="757" width="0.4540%" height="15" fill="rgb(238,13,15)" fg:x="158" fg:w="4"/><text x="18.1842%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.45%)</title><rect x="20.5448%" y="821" width="0.4540%" height="15" fill="rgb(208,107,27)" fg:x="181" fg:w="4"/><text x="20.7948%" y="831.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.11%)</title><rect x="20.8854%" y="805" width="0.1135%" height="15" fill="rgb(205,136,37)" fg:x="184" fg:w="1"/><text x="21.1354%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (6 samples, 0.68%)</title><rect x="20.9989%" y="821" width="0.6810%" height="15" fill="rgb(250,205,27)" fg:x="185" fg:w="6"/><text x="21.2489%" y="831.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (6 samples, 0.68%)</title><rect x="20.9989%" y="805" width="0.6810%" height="15" fill="rgb(210,80,43)" fg:x="185" fg:w="6"/><text x="21.2489%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (6 samples, 0.68%)</title><rect x="21.6799%" y="821" width="0.6810%" height="15" fill="rgb(247,160,36)" fg:x="191" fg:w="6"/><text x="21.9299%" y="831.50"></text></g><g><title>hashbrown::raw::h2 (4 samples, 0.45%)</title><rect x="22.3610%" y="821" width="0.4540%" height="15" fill="rgb(234,13,49)" fg:x="197" fg:w="4"/><text x="22.6110%" y="831.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (58 samples, 6.58%)</title><rect x="16.5721%" y="933" width="6.5834%" height="15" fill="rgb(234,122,0)" fg:x="146" fg:w="58"/><text x="16.8221%" y="943.50">&lt;std::col..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (58 samples, 6.58%)</title><rect x="16.5721%" y="917" width="6.5834%" height="15" fill="rgb(207,146,38)" fg:x="146" fg:w="58"/><text x="16.8221%" y="927.50">std::coll..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (58 samples, 6.58%)</title><rect x="16.5721%" y="901" width="6.5834%" height="15" fill="rgb(207,177,25)" fg:x="146" fg:w="58"/><text x="16.8221%" y="911.50">hashbrown..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (58 samples, 6.58%)</title><rect x="16.5721%" y="885" width="6.5834%" height="15" fill="rgb(211,178,42)" fg:x="146" fg:w="58"/><text x="16.8221%" y="895.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (42 samples, 4.77%)</title><rect x="18.3882%" y="869" width="4.7673%" height="15" fill="rgb(230,69,54)" fg:x="162" fg:w="42"/><text x="18.6382%" y="879.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (42 samples, 4.77%)</title><rect x="18.3882%" y="853" width="4.7673%" height="15" fill="rgb(214,135,41)" fg:x="162" fg:w="42"/><text x="18.6382%" y="863.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (42 samples, 4.77%)</title><rect x="18.3882%" y="837" width="4.7673%" height="15" fill="rgb(237,67,25)" fg:x="162" fg:w="42"/><text x="18.6382%" y="847.50">hashbr..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.34%)</title><rect x="22.8150%" y="821" width="0.3405%" height="15" fill="rgb(222,189,50)" fg:x="201" fg:w="3"/><text x="23.0650%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.34%)</title><rect x="22.8150%" y="805" width="0.3405%" height="15" fill="rgb(245,148,34)" fg:x="201" fg:w="3"/><text x="23.0650%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.11%)</title><rect x="23.1555%" y="933" width="0.1135%" height="15" fill="rgb(222,29,6)" fg:x="204" fg:w="1"/><text x="23.4055%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 1.14%)</title><rect x="27.3553%" y="901" width="1.1351%" height="15" fill="rgb(221,189,43)" fg:x="241" fg:w="10"/><text x="27.6053%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (16 samples, 1.82%)</title><rect x="27.3553%" y="917" width="1.8161%" height="15" fill="rgb(207,36,27)" fg:x="241" fg:w="16"/><text x="27.6053%" y="927.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.68%)</title><rect x="28.4904%" y="901" width="0.6810%" height="15" fill="rgb(217,90,24)" fg:x="251" fg:w="6"/><text x="28.7404%" y="911.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.68%)</title><rect x="28.4904%" y="885" width="0.6810%" height="15" fill="rgb(224,66,35)" fg:x="251" fg:w="6"/><text x="28.7404%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (15 samples, 1.70%)</title><rect x="29.1714%" y="917" width="1.7026%" height="15" fill="rgb(221,13,50)" fg:x="257" fg:w="15"/><text x="29.4214%" y="927.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (15 samples, 1.70%)</title><rect x="29.1714%" y="901" width="1.7026%" height="15" fill="rgb(236,68,49)" fg:x="257" fg:w="15"/><text x="29.4214%" y="911.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (15 samples, 1.70%)</title><rect x="29.1714%" y="885" width="1.7026%" height="15" fill="rgb(229,146,28)" fg:x="257" fg:w="15"/><text x="29.4214%" y="895.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (7 samples, 0.79%)</title><rect x="30.8740%" y="917" width="0.7946%" height="15" fill="rgb(225,31,38)" fg:x="272" fg:w="7"/><text x="31.1240%" y="927.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (7 samples, 0.79%)</title><rect x="30.8740%" y="901" width="0.7946%" height="15" fill="rgb(250,208,3)" fg:x="272" fg:w="7"/><text x="31.1240%" y="911.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (4 samples, 0.45%)</title><rect x="31.2145%" y="885" width="0.4540%" height="15" fill="rgb(246,54,23)" fg:x="275" fg:w="4"/><text x="31.4645%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::PropData&gt; (8 samples, 0.91%)</title><rect x="31.6686%" y="917" width="0.9081%" height="15" fill="rgb(243,76,11)" fg:x="279" fg:w="8"/><text x="31.9186%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.34%)</title><rect x="32.5766%" y="885" width="0.3405%" height="15" fill="rgb(245,21,50)" fg:x="287" fg:w="3"/><text x="32.8266%" y="895.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (8 samples, 0.91%)</title><rect x="32.5766%" y="901" width="0.9081%" height="15" fill="rgb(228,9,43)" fg:x="287" fg:w="8"/><text x="32.8266%" y="911.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (5 samples, 0.57%)</title><rect x="32.9171%" y="885" width="0.5675%" height="15" fill="rgb(208,100,47)" fg:x="290" fg:w="5"/><text x="33.1671%" y="895.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (5 samples, 0.57%)</title><rect x="32.9171%" y="869" width="0.5675%" height="15" fill="rgb(232,26,8)" fg:x="290" fg:w="5"/><text x="33.1671%" y="879.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.57%)</title><rect x="32.9171%" y="853" width="0.5675%" height="15" fill="rgb(216,166,38)" fg:x="290" fg:w="5"/><text x="33.1671%" y="863.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (5 samples, 0.57%)</title><rect x="32.9171%" y="837" width="0.5675%" height="15" fill="rgb(251,202,51)" fg:x="290" fg:w="5"/><text x="33.1671%" y="847.50"></text></g><g><title>demoparser::parsing::entities::is_wanted_prop_name (12 samples, 1.36%)</title><rect x="32.5766%" y="917" width="1.3621%" height="15" fill="rgb(254,216,34)" fg:x="287" fg:w="12"/><text x="32.8266%" y="927.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.45%)</title><rect x="33.4847%" y="901" width="0.4540%" height="15" fill="rgb(251,32,27)" fg:x="295" fg:w="4"/><text x="33.7347%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="47.4461%" y="901" width="0.1135%" height="15" fill="rgb(208,127,28)" fg:x="418" fg:w="1"/><text x="47.6961%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="47.4461%" y="885" width="0.1135%" height="15" fill="rgb(224,137,22)" fg:x="418" fg:w="1"/><text x="47.6961%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="47.4461%" y="869" width="0.1135%" height="15" fill="rgb(254,70,32)" fg:x="418" fg:w="1"/><text x="47.6961%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="47.4461%" y="853" width="0.1135%" height="15" fill="rgb(229,75,37)" fg:x="418" fg:w="1"/><text x="47.6961%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="47.4461%" y="837" width="0.1135%" height="15" fill="rgb(252,64,23)" fg:x="418" fg:w="1"/><text x="47.6961%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="47.4461%" y="821" width="0.1135%" height="15" fill="rgb(232,162,48)" fg:x="418" fg:w="1"/><text x="47.6961%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="47.4461%" y="805" width="0.1135%" height="15" fill="rgb(246,160,12)" fg:x="418" fg:w="1"/><text x="47.6961%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="47.4461%" y="789" width="0.1135%" height="15" fill="rgb(247,166,0)" fg:x="418" fg:w="1"/><text x="47.6961%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="47.4461%" y="773" width="0.1135%" height="15" fill="rgb(249,219,21)" fg:x="418" fg:w="1"/><text x="47.6961%" y="783.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::consume (7 samples, 0.79%)</title><rect x="57.2077%" y="853" width="0.7946%" height="15" fill="rgb(205,209,3)" fg:x="504" fg:w="7"/><text x="57.4577%" y="863.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.11%)</title><rect x="58.1158%" y="821" width="0.1135%" height="15" fill="rgb(243,44,1)" fg:x="512" fg:w="1"/><text x="58.3658%" y="831.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.11%)</title><rect x="58.1158%" y="805" width="0.1135%" height="15" fill="rgb(206,159,16)" fg:x="512" fg:w="1"/><text x="58.3658%" y="815.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::decode_special_float (49 samples, 5.56%)</title><rect x="53.3485%" y="885" width="5.5619%" height="15" fill="rgb(244,77,30)" fg:x="470" fg:w="49"/><text x="53.5985%" y="895.50">demopar..</text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_nbits (37 samples, 4.20%)</title><rect x="54.7106%" y="869" width="4.1998%" height="15" fill="rgb(218,69,12)" fg:x="482" fg:w="37"/><text x="54.9606%" y="879.50">demop..</text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::ensure_bits (8 samples, 0.91%)</title><rect x="58.0023%" y="853" width="0.9081%" height="15" fill="rgb(212,87,7)" fg:x="511" fg:w="8"/><text x="58.2523%" y="863.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (8 samples, 0.91%)</title><rect x="58.0023%" y="837" width="0.9081%" height="15" fill="rgb(245,114,25)" fg:x="511" fg:w="8"/><text x="58.2523%" y="847.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (6 samples, 0.68%)</title><rect x="58.2293%" y="821" width="0.6810%" height="15" fill="rgb(210,61,42)" fg:x="513" fg:w="6"/><text x="58.4793%" y="831.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (6 samples, 0.68%)</title><rect x="58.2293%" y="805" width="0.6810%" height="15" fill="rgb(211,52,33)" fg:x="513" fg:w="6"/><text x="58.4793%" y="815.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (6 samples, 0.68%)</title><rect x="58.2293%" y="789" width="0.6810%" height="15" fill="rgb(234,58,33)" fg:x="513" fg:w="6"/><text x="58.4793%" y="799.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6 samples, 0.68%)</title><rect x="58.2293%" y="773" width="0.6810%" height="15" fill="rgb(220,115,36)" fg:x="513" fg:w="6"/><text x="58.4793%" y="783.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6 samples, 0.68%)</title><rect x="58.2293%" y="757" width="0.6810%" height="15" fill="rgb(243,153,54)" fg:x="513" fg:w="6"/><text x="58.4793%" y="767.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (6 samples, 0.68%)</title><rect x="58.2293%" y="741" width="0.6810%" height="15" fill="rgb(251,47,18)" fg:x="513" fg:w="6"/><text x="58.4793%" y="751.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (6 samples, 0.68%)</title><rect x="58.2293%" y="725" width="0.6810%" height="15" fill="rgb(242,102,42)" fg:x="513" fg:w="6"/><text x="58.4793%" y="735.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::decode_float (111 samples, 12.60%)</title><rect x="47.5596%" y="901" width="12.5993%" height="15" fill="rgb(234,31,38)" fg:x="419" fg:w="111"/><text x="47.8096%" y="911.50">demoparser::parsing..</text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_nbits (11 samples, 1.25%)</title><rect x="58.9103%" y="885" width="1.2486%" height="15" fill="rgb(221,117,51)" fg:x="519" fg:w="11"/><text x="59.1603%" y="895.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::consume (1 samples, 0.11%)</title><rect x="60.0454%" y="869" width="0.1135%" height="15" fill="rgb(212,20,18)" fg:x="529" fg:w="1"/><text x="60.2954%" y="879.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.11%)</title><rect x="60.8400%" y="885" width="0.1135%" height="15" fill="rgb(245,133,36)" fg:x="536" fg:w="1"/><text x="61.0900%" y="895.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::consume (4 samples, 0.45%)</title><rect x="61.6345%" y="869" width="0.4540%" height="15" fill="rgb(212,6,19)" fg:x="543" fg:w="4"/><text x="61.8845%" y="879.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_nbits (12 samples, 1.36%)</title><rect x="60.9535%" y="885" width="1.3621%" height="15" fill="rgb(218,1,36)" fg:x="537" fg:w="12"/><text x="61.2035%" y="895.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::ensure_bits (2 samples, 0.23%)</title><rect x="62.0885%" y="869" width="0.2270%" height="15" fill="rgb(246,84,54)" fg:x="547" fg:w="2"/><text x="62.3385%" y="879.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (2 samples, 0.23%)</title><rect x="62.0885%" y="853" width="0.2270%" height="15" fill="rgb(242,110,6)" fg:x="547" fg:w="2"/><text x="62.3385%" y="863.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.11%)</title><rect x="62.2020%" y="837" width="0.1135%" height="15" fill="rgb(214,47,5)" fg:x="548" fg:w="1"/><text x="62.4520%" y="847.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.11%)</title><rect x="62.2020%" y="821" width="0.1135%" height="15" fill="rgb(218,159,25)" fg:x="548" fg:w="1"/><text x="62.4520%" y="831.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.11%)</title><rect x="62.2020%" y="805" width="0.1135%" height="15" fill="rgb(215,211,28)" fg:x="548" fg:w="1"/><text x="62.4520%" y="815.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.11%)</title><rect x="62.2020%" y="789" width="0.1135%" height="15" fill="rgb(238,59,32)" fg:x="548" fg:w="1"/><text x="62.4520%" y="799.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.11%)</title><rect x="62.2020%" y="773" width="0.1135%" height="15" fill="rgb(226,82,3)" fg:x="548" fg:w="1"/><text x="62.4520%" y="783.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::decode_int (23 samples, 2.61%)</title><rect x="60.1589%" y="901" width="2.6107%" height="15" fill="rgb(240,164,32)" fg:x="530" fg:w="23"/><text x="60.4089%" y="911.50">de..</text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_sbit_long (4 samples, 0.45%)</title><rect x="62.3156%" y="885" width="0.4540%" height="15" fill="rgb(232,46,7)" fg:x="549" fg:w="4"/><text x="62.5656%" y="895.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_nbits (1 samples, 0.11%)</title><rect x="62.6561%" y="869" width="0.1135%" height="15" fill="rgb(229,129,53)" fg:x="552" fg:w="1"/><text x="62.9061%" y="879.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::ensure_bits (1 samples, 0.11%)</title><rect x="62.6561%" y="853" width="0.1135%" height="15" fill="rgb(234,188,29)" fg:x="552" fg:w="1"/><text x="62.9061%" y="863.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (1 samples, 0.11%)</title><rect x="62.6561%" y="837" width="0.1135%" height="15" fill="rgb(246,141,4)" fg:x="552" fg:w="1"/><text x="62.9061%" y="847.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.11%)</title><rect x="62.6561%" y="821" width="0.1135%" height="15" fill="rgb(229,23,39)" fg:x="552" fg:w="1"/><text x="62.9061%" y="831.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.11%)</title><rect x="62.6561%" y="805" width="0.1135%" height="15" fill="rgb(206,12,3)" fg:x="552" fg:w="1"/><text x="62.9061%" y="815.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.11%)</title><rect x="62.7696%" y="869" width="0.1135%" height="15" fill="rgb(252,226,20)" fg:x="553" fg:w="1"/><text x="63.0196%" y="879.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::decode_string (2 samples, 0.23%)</title><rect x="62.7696%" y="901" width="0.2270%" height="15" fill="rgb(216,123,35)" fg:x="553" fg:w="2"/><text x="63.0196%" y="911.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_string (2 samples, 0.23%)</title><rect x="62.7696%" y="885" width="0.2270%" height="15" fill="rgb(212,68,40)" fg:x="553" fg:w="2"/><text x="63.0196%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.11%)</title><rect x="62.8831%" y="869" width="0.1135%" height="15" fill="rgb(254,125,32)" fg:x="554" fg:w="1"/><text x="63.1331%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.11%)</title><rect x="62.8831%" y="853" width="0.1135%" height="15" fill="rgb(253,97,22)" fg:x="554" fg:w="1"/><text x="63.1331%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.11%)</title><rect x="62.8831%" y="837" width="0.1135%" height="15" fill="rgb(241,101,14)" fg:x="554" fg:w="1"/><text x="63.1331%" y="847.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="62.8831%" y="821" width="0.1135%" height="15" fill="rgb(238,103,29)" fg:x="554" fg:w="1"/><text x="63.1331%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.11%)</title><rect x="62.8831%" y="805" width="0.1135%" height="15" fill="rgb(233,195,47)" fg:x="554" fg:w="1"/><text x="63.1331%" y="815.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.11%)</title><rect x="62.8831%" y="789" width="0.1135%" height="15" fill="rgb(246,218,30)" fg:x="554" fg:w="1"/><text x="63.1331%" y="799.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.11%)</title><rect x="62.8831%" y="773" width="0.1135%" height="15" fill="rgb(219,145,47)" fg:x="554" fg:w="1"/><text x="63.1331%" y="783.50"></text></g><g><title>mi_realloc (1 samples, 0.11%)</title><rect x="62.8831%" y="757" width="0.1135%" height="15" fill="rgb(243,12,26)" fg:x="554" fg:w="1"/><text x="63.1331%" y="767.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_bool (2 samples, 0.23%)</title><rect x="64.8127%" y="837" width="0.2270%" height="15" fill="rgb(214,87,16)" fg:x="571" fg:w="2"/><text x="65.0627%" y="847.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::consume (1 samples, 0.11%)</title><rect x="64.9262%" y="821" width="0.1135%" height="15" fill="rgb(208,99,42)" fg:x="572" fg:w="1"/><text x="65.1762%" y="831.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::consume (1 samples, 0.11%)</title><rect x="65.0397%" y="821" width="0.1135%" height="15" fill="rgb(253,99,2)" fg:x="573" fg:w="1"/><text x="65.2897%" y="831.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_bit_coord (11 samples, 1.25%)</title><rect x="64.0182%" y="853" width="1.2486%" height="15" fill="rgb(220,168,23)" fg:x="564" fg:w="11"/><text x="64.2682%" y="863.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_nbits (2 samples, 0.23%)</title><rect x="65.0397%" y="837" width="0.2270%" height="15" fill="rgb(242,38,24)" fg:x="573" fg:w="2"/><text x="65.2897%" y="847.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::ensure_bits (1 samples, 0.11%)</title><rect x="65.1532%" y="821" width="0.1135%" height="15" fill="rgb(225,182,9)" fg:x="574" fg:w="1"/><text x="65.4032%" y="831.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (1 samples, 0.11%)</title><rect x="65.1532%" y="805" width="0.1135%" height="15" fill="rgb(243,178,37)" fg:x="574" fg:w="1"/><text x="65.4032%" y="815.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::decode_special_float (12 samples, 1.36%)</title><rect x="64.0182%" y="869" width="1.3621%" height="15" fill="rgb(232,139,19)" fg:x="564" fg:w="12"/><text x="64.2682%" y="879.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_nbits (1 samples, 0.11%)</title><rect x="65.2667%" y="853" width="0.1135%" height="15" fill="rgb(225,201,24)" fg:x="575" fg:w="1"/><text x="65.5167%" y="863.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::consume (1 samples, 0.11%)</title><rect x="65.2667%" y="837" width="0.1135%" height="15" fill="rgb(221,47,46)" fg:x="575" fg:w="1"/><text x="65.5167%" y="847.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::decode_vec (26 samples, 2.95%)</title><rect x="62.9966%" y="901" width="2.9512%" height="15" fill="rgb(249,23,13)" fg:x="555" fg:w="26"/><text x="63.2466%" y="911.50">dem..</text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::decode_float (26 samples, 2.95%)</title><rect x="62.9966%" y="885" width="2.9512%" height="15" fill="rgb(219,9,5)" fg:x="555" fg:w="26"/><text x="63.2466%" y="895.50">dem..</text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_nbits (5 samples, 0.57%)</title><rect x="65.3802%" y="869" width="0.5675%" height="15" fill="rgb(254,171,16)" fg:x="576" fg:w="5"/><text x="65.6302%" y="879.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::decode (298 samples, 33.83%)</title><rect x="33.9387%" y="917" width="33.8252%" height="15" fill="rgb(230,171,20)" fg:x="299" fg:w="298"/><text x="34.1887%" y="927.50">demoparser::parsing::read_bits::BitReader&lt;R&gt;::decode</text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::decode_vec_xy (16 samples, 1.82%)</title><rect x="65.9478%" y="901" width="1.8161%" height="15" fill="rgb(210,71,41)" fg:x="581" fg:w="16"/><text x="66.1978%" y="911.50">d..</text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::decode_float (16 samples, 1.82%)</title><rect x="65.9478%" y="885" width="1.8161%" height="15" fill="rgb(206,173,20)" fg:x="581" fg:w="16"/><text x="66.1978%" y="895.50">d..</text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::decode_special_float (9 samples, 1.02%)</title><rect x="66.7423%" y="869" width="1.0216%" height="15" fill="rgb(233,88,34)" fg:x="588" fg:w="9"/><text x="66.9923%" y="879.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_nbits (6 samples, 0.68%)</title><rect x="67.0829%" y="853" width="0.6810%" height="15" fill="rgb(223,209,46)" fg:x="591" fg:w="6"/><text x="67.3329%" y="863.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::ensure_bits (2 samples, 0.23%)</title><rect x="67.5369%" y="837" width="0.2270%" height="15" fill="rgb(250,43,18)" fg:x="595" fg:w="2"/><text x="67.7869%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (2 samples, 0.23%)</title><rect x="67.5369%" y="821" width="0.2270%" height="15" fill="rgb(208,13,10)" fg:x="595" fg:w="2"/><text x="67.7869%" y="831.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.23%)</title><rect x="67.5369%" y="805" width="0.2270%" height="15" fill="rgb(212,200,36)" fg:x="595" fg:w="2"/><text x="67.7869%" y="815.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.23%)</title><rect x="67.5369%" y="789" width="0.2270%" height="15" fill="rgb(225,90,30)" fg:x="595" fg:w="2"/><text x="67.7869%" y="799.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (2 samples, 0.23%)</title><rect x="67.5369%" y="773" width="0.2270%" height="15" fill="rgb(236,182,39)" fg:x="595" fg:w="2"/><text x="67.7869%" y="783.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.23%)</title><rect x="67.5369%" y="757" width="0.2270%" height="15" fill="rgb(212,144,35)" fg:x="595" fg:w="2"/><text x="67.7869%" y="767.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.23%)</title><rect x="67.5369%" y="741" width="0.2270%" height="15" fill="rgb(228,63,44)" fg:x="595" fg:w="2"/><text x="67.7869%" y="751.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.23%)</title><rect x="67.5369%" y="725" width="0.2270%" height="15" fill="rgb(228,109,6)" fg:x="595" fg:w="2"/><text x="67.7869%" y="735.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.23%)</title><rect x="67.5369%" y="709" width="0.2270%" height="15" fill="rgb(238,117,24)" fg:x="595" fg:w="2"/><text x="67.7869%" y="719.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_bool (4 samples, 0.45%)</title><rect x="67.7639%" y="917" width="0.4540%" height="15" fill="rgb(242,26,26)" fg:x="597" fg:w="4"/><text x="68.0139%" y="927.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::consume (4 samples, 0.45%)</title><rect x="67.7639%" y="901" width="0.4540%" height="15" fill="rgb(221,92,48)" fg:x="597" fg:w="4"/><text x="68.0139%" y="911.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::consume (8 samples, 0.91%)</title><rect x="72.8717%" y="885" width="0.9081%" height="15" fill="rgb(209,209,32)" fg:x="642" fg:w="8"/><text x="73.1217%" y="895.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_bool (32 samples, 3.63%)</title><rect x="71.1691%" y="901" width="3.6322%" height="15" fill="rgb(221,70,22)" fg:x="627" fg:w="32"/><text x="71.4191%" y="911.50">demo..</text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::ensure_bits (9 samples, 1.02%)</title><rect x="73.7798%" y="885" width="1.0216%" height="15" fill="rgb(248,145,5)" fg:x="650" fg:w="9"/><text x="74.0298%" y="895.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (9 samples, 1.02%)</title><rect x="73.7798%" y="869" width="1.0216%" height="15" fill="rgb(226,116,26)" fg:x="650" fg:w="9"/><text x="74.0298%" y="879.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (5 samples, 0.57%)</title><rect x="74.2338%" y="853" width="0.5675%" height="15" fill="rgb(244,5,17)" fg:x="654" fg:w="5"/><text x="74.4838%" y="863.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (5 samples, 0.57%)</title><rect x="74.2338%" y="837" width="0.5675%" height="15" fill="rgb(252,159,33)" fg:x="654" fg:w="5"/><text x="74.4838%" y="847.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (5 samples, 0.57%)</title><rect x="74.2338%" y="821" width="0.5675%" height="15" fill="rgb(206,71,0)" fg:x="654" fg:w="5"/><text x="74.4838%" y="831.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5 samples, 0.57%)</title><rect x="74.2338%" y="805" width="0.5675%" height="15" fill="rgb(233,118,54)" fg:x="654" fg:w="5"/><text x="74.4838%" y="815.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5 samples, 0.57%)</title><rect x="74.2338%" y="789" width="0.5675%" height="15" fill="rgb(234,83,48)" fg:x="654" fg:w="5"/><text x="74.4838%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.45%)</title><rect x="74.3473%" y="773" width="0.4540%" height="15" fill="rgb(228,3,54)" fg:x="655" fg:w="4"/><text x="74.5973%" y="783.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (4 samples, 0.45%)</title><rect x="74.3473%" y="757" width="0.4540%" height="15" fill="rgb(226,155,13)" fg:x="655" fg:w="4"/><text x="74.5973%" y="767.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::consume (15 samples, 1.70%)</title><rect x="77.4120%" y="885" width="1.7026%" height="15" fill="rgb(241,28,37)" fg:x="682" fg:w="15"/><text x="77.6620%" y="895.50"></text></g><g><title>demoparser::parsing::entities::update_entity (574 samples, 65.15%)</title><rect x="14.9830%" y="949" width="65.1532%" height="15" fill="rgb(233,93,10)" fg:x="132" fg:w="574"/><text x="15.2330%" y="959.50">demoparser::parsing::entities::update_entity</text></g><g><title>demoparser::parsing::entities::parse_ent_props (501 samples, 56.87%)</title><rect x="23.2690%" y="933" width="56.8672%" height="15" fill="rgb(225,113,19)" fg:x="205" fg:w="501"/><text x="23.5190%" y="943.50">demoparser::parsing::entities::parse_ent_props</text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_inx (105 samples, 11.92%)</title><rect x="68.2179%" y="917" width="11.9183%" height="15" fill="rgb(241,2,18)" fg:x="601" fg:w="105"/><text x="68.4679%" y="927.50">demoparser::parsin..</text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_nbits (47 samples, 5.33%)</title><rect x="74.8014%" y="901" width="5.3348%" height="15" fill="rgb(228,207,21)" fg:x="659" fg:w="47"/><text x="75.0514%" y="911.50">demopar..</text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::ensure_bits (9 samples, 1.02%)</title><rect x="79.1146%" y="885" width="1.0216%" height="15" fill="rgb(213,211,35)" fg:x="697" fg:w="9"/><text x="79.3646%" y="895.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (9 samples, 1.02%)</title><rect x="79.1146%" y="869" width="1.0216%" height="15" fill="rgb(209,83,10)" fg:x="697" fg:w="9"/><text x="79.3646%" y="879.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (2 samples, 0.23%)</title><rect x="79.9092%" y="853" width="0.2270%" height="15" fill="rgb(209,164,1)" fg:x="704" fg:w="2"/><text x="80.1592%" y="863.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.23%)</title><rect x="79.9092%" y="837" width="0.2270%" height="15" fill="rgb(213,184,43)" fg:x="704" fg:w="2"/><text x="80.1592%" y="847.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (2 samples, 0.23%)</title><rect x="79.9092%" y="821" width="0.2270%" height="15" fill="rgb(231,61,34)" fg:x="704" fg:w="2"/><text x="80.1592%" y="831.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.23%)</title><rect x="79.9092%" y="805" width="0.2270%" height="15" fill="rgb(235,75,3)" fg:x="704" fg:w="2"/><text x="80.1592%" y="815.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.23%)</title><rect x="79.9092%" y="789" width="0.2270%" height="15" fill="rgb(220,106,47)" fg:x="704" fg:w="2"/><text x="80.1592%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.23%)</title><rect x="79.9092%" y="773" width="0.2270%" height="15" fill="rgb(210,196,33)" fg:x="704" fg:w="2"/><text x="80.1592%" y="783.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.23%)</title><rect x="79.9092%" y="757" width="0.2270%" height="15" fill="rgb(229,154,42)" fg:x="704" fg:w="2"/><text x="80.1592%" y="767.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::consume (1 samples, 0.11%)</title><rect x="80.1362%" y="933" width="0.1135%" height="15" fill="rgb(228,114,26)" fg:x="706" fg:w="1"/><text x="80.3862%" y="943.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_bool (3 samples, 0.34%)</title><rect x="80.1362%" y="949" width="0.3405%" height="15" fill="rgb(208,144,1)" fg:x="706" fg:w="3"/><text x="80.3862%" y="959.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::ensure_bits (2 samples, 0.23%)</title><rect x="80.2497%" y="933" width="0.2270%" height="15" fill="rgb(239,112,37)" fg:x="707" fg:w="2"/><text x="80.4997%" y="943.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (2 samples, 0.23%)</title><rect x="80.2497%" y="917" width="0.2270%" height="15" fill="rgb(210,96,50)" fg:x="707" fg:w="2"/><text x="80.4997%" y="927.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.11%)</title><rect x="80.3632%" y="901" width="0.1135%" height="15" fill="rgb(222,178,2)" fg:x="708" fg:w="1"/><text x="80.6132%" y="911.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.11%)</title><rect x="80.3632%" y="885" width="0.1135%" height="15" fill="rgb(226,74,18)" fg:x="708" fg:w="1"/><text x="80.6132%" y="895.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.11%)</title><rect x="80.3632%" y="869" width="0.1135%" height="15" fill="rgb(225,67,54)" fg:x="708" fg:w="1"/><text x="80.6132%" y="879.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.11%)</title><rect x="80.3632%" y="853" width="0.1135%" height="15" fill="rgb(251,92,32)" fg:x="708" fg:w="1"/><text x="80.6132%" y="863.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.11%)</title><rect x="80.3632%" y="837" width="0.1135%" height="15" fill="rgb(228,149,22)" fg:x="708" fg:w="1"/><text x="80.6132%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="80.5902%" y="933" width="0.1135%" height="15" fill="rgb(243,54,13)" fg:x="710" fg:w="1"/><text x="80.8402%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="80.5902%" y="917" width="0.1135%" height="15" fill="rgb(243,180,28)" fg:x="710" fg:w="1"/><text x="80.8402%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="80.5902%" y="901" width="0.1135%" height="15" fill="rgb(208,167,24)" fg:x="710" fg:w="1"/><text x="80.8402%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="80.5902%" y="885" width="0.1135%" height="15" fill="rgb(245,73,45)" fg:x="710" fg:w="1"/><text x="80.8402%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="80.5902%" y="869" width="0.1135%" height="15" fill="rgb(237,203,48)" fg:x="710" fg:w="1"/><text x="80.8402%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="80.5902%" y="853" width="0.1135%" height="15" fill="rgb(211,197,16)" fg:x="710" fg:w="1"/><text x="80.8402%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="80.5902%" y="837" width="0.1135%" height="15" fill="rgb(243,99,51)" fg:x="710" fg:w="1"/><text x="80.8402%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="80.5902%" y="821" width="0.1135%" height="15" fill="rgb(215,123,29)" fg:x="710" fg:w="1"/><text x="80.8402%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="80.5902%" y="805" width="0.1135%" height="15" fill="rgb(239,186,37)" fg:x="710" fg:w="1"/><text x="80.8402%" y="815.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_u_bit_var (14 samples, 1.59%)</title><rect x="80.4767%" y="949" width="1.5891%" height="15" fill="rgb(252,136,39)" fg:x="709" fg:w="14"/><text x="80.7267%" y="959.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_nbits (12 samples, 1.36%)</title><rect x="80.7037%" y="933" width="1.3621%" height="15" fill="rgb(223,213,32)" fg:x="711" fg:w="12"/><text x="80.9537%" y="943.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::ensure_bits (2 samples, 0.23%)</title><rect x="81.8388%" y="917" width="0.2270%" height="15" fill="rgb(233,115,5)" fg:x="721" fg:w="2"/><text x="82.0888%" y="927.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (2 samples, 0.23%)</title><rect x="81.8388%" y="901" width="0.2270%" height="15" fill="rgb(207,226,44)" fg:x="721" fg:w="2"/><text x="82.0888%" y="911.50"></text></g><g><title>demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_packet_entities (612 samples, 69.47%)</title><rect x="12.8263%" y="965" width="69.4665%" height="15" fill="rgb(208,126,0)" fg:x="113" fg:w="612"/><text x="13.0763%" y="975.50">demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_packet_entities</text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_uneven_end_bits (2 samples, 0.23%)</title><rect x="82.0658%" y="949" width="0.2270%" height="15" fill="rgb(244,66,21)" fg:x="723" fg:w="2"/><text x="82.3158%" y="959.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_i32 (1 samples, 0.11%)</title><rect x="82.2928%" y="965" width="0.1135%" height="15" fill="rgb(222,97,12)" fg:x="725" fg:w="1"/><text x="82.5428%" y="975.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.11%)</title><rect x="82.2928%" y="949" width="0.1135%" height="15" fill="rgb(219,213,19)" fg:x="725" fg:w="1"/><text x="82.5428%" y="959.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.11%)</title><rect x="82.2928%" y="933" width="0.1135%" height="15" fill="rgb(252,169,30)" fg:x="725" fg:w="1"/><text x="82.5428%" y="943.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.11%)</title><rect x="82.2928%" y="917" width="0.1135%" height="15" fill="rgb(206,32,51)" fg:x="725" fg:w="1"/><text x="82.5428%" y="927.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (1 samples, 0.11%)</title><rect x="82.2928%" y="901" width="0.1135%" height="15" fill="rgb(250,172,42)" fg:x="725" fg:w="1"/><text x="82.5428%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="82.2928%" y="885" width="0.1135%" height="15" fill="rgb(209,34,43)" fg:x="725" fg:w="1"/><text x="82.5428%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="82.2928%" y="869" width="0.1135%" height="15" fill="rgb(223,11,35)" fg:x="725" fg:w="1"/><text x="82.5428%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="82.2928%" y="853" width="0.1135%" height="15" fill="rgb(251,219,26)" fg:x="725" fg:w="1"/><text x="82.5428%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="82.2928%" y="837" width="0.1135%" height="15" fill="rgb(231,119,3)" fg:x="725" fg:w="1"/><text x="82.5428%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="82.2928%" y="821" width="0.1135%" height="15" fill="rgb(216,97,11)" fg:x="725" fg:w="1"/><text x="82.5428%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="82.2928%" y="805" width="0.1135%" height="15" fill="rgb(223,59,9)" fg:x="725" fg:w="1"/><text x="82.5428%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="82.2928%" y="789" width="0.1135%" height="15" fill="rgb(233,93,31)" fg:x="725" fg:w="1"/><text x="82.5428%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="82.2928%" y="773" width="0.1135%" height="15" fill="rgb(239,81,33)" fg:x="725" fg:w="1"/><text x="82.5428%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="82.2928%" y="757" width="0.1135%" height="15" fill="rgb(213,120,34)" fg:x="725" fg:w="1"/><text x="82.5428%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="82.2928%" y="741" width="0.1135%" height="15" fill="rgb(243,49,53)" fg:x="725" fg:w="1"/><text x="82.5428%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="82.2928%" y="725" width="0.1135%" height="15" fill="rgb(247,216,33)" fg:x="725" fg:w="1"/><text x="82.5428%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="82.2928%" y="709" width="0.1135%" height="15" fill="rgb(226,26,14)" fg:x="725" fg:w="1"/><text x="82.5428%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="82.2928%" y="693" width="0.1135%" height="15" fill="rgb(215,49,53)" fg:x="725" fg:w="1"/><text x="82.5428%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="82.2928%" y="677" width="0.1135%" height="15" fill="rgb(245,162,40)" fg:x="725" fg:w="1"/><text x="82.5428%" y="687.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_n_bytes (3 samples, 0.34%)</title><rect x="82.4064%" y="965" width="0.3405%" height="15" fill="rgb(229,68,17)" fg:x="726" fg:w="3"/><text x="82.6564%" y="975.50"></text></g><g><title>&lt;demoparser::parsing::variants::BytesVariant as core::ops::index::Index&lt;Idx&gt;&gt;::index (2 samples, 0.23%)</title><rect x="82.5199%" y="949" width="0.2270%" height="15" fill="rgb(213,182,10)" fg:x="727" fg:w="2"/><text x="82.7699%" y="959.50"></text></g><g><title>&lt;demoparser::parsing::variants::BytesVariant as core::ops::index::Index&lt;Idx&gt;&gt;::index (1 samples, 0.11%)</title><rect x="83.7684%" y="949" width="0.1135%" height="15" fill="rgb(245,125,30)" fg:x="738" fg:w="1"/><text x="84.0184%" y="959.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_varint (12 samples, 1.36%)</title><rect x="82.7469%" y="965" width="1.3621%" height="15" fill="rgb(232,202,2)" fg:x="729" fg:w="12"/><text x="82.9969%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="83.8820%" y="949" width="0.2270%" height="15" fill="rgb(237,140,51)" fg:x="739" fg:w="2"/><text x="84.1320%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="83.8820%" y="933" width="0.2270%" height="15" fill="rgb(236,157,25)" fg:x="739" fg:w="2"/><text x="84.1320%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="83.8820%" y="917" width="0.2270%" height="15" fill="rgb(219,209,0)" fg:x="739" fg:w="2"/><text x="84.1320%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="83.8820%" y="901" width="0.2270%" height="15" fill="rgb(240,116,54)" fg:x="739" fg:w="2"/><text x="84.1320%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="83.8820%" y="885" width="0.2270%" height="15" fill="rgb(216,10,36)" fg:x="739" fg:w="2"/><text x="84.1320%" y="895.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="83.8820%" y="869" width="0.2270%" height="15" fill="rgb(222,72,44)" fg:x="739" fg:w="2"/><text x="84.1320%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="83.8820%" y="853" width="0.2270%" height="15" fill="rgb(232,159,9)" fg:x="739" fg:w="2"/><text x="84.1320%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="83.8820%" y="837" width="0.2270%" height="15" fill="rgb(210,39,32)" fg:x="739" fg:w="2"/><text x="84.1320%" y="847.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="83.8820%" y="821" width="0.2270%" height="15" fill="rgb(216,194,45)" fg:x="739" fg:w="2"/><text x="84.1320%" y="831.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="83.8820%" y="805" width="0.2270%" height="15" fill="rgb(218,18,35)" fg:x="739" fg:w="2"/><text x="84.1320%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="83.9955%" y="789" width="0.1135%" height="15" fill="rgb(207,83,51)" fg:x="740" fg:w="1"/><text x="84.2455%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="83.9955%" y="773" width="0.1135%" height="15" fill="rgb(225,63,43)" fg:x="740" fg:w="1"/><text x="84.2455%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="83.9955%" y="757" width="0.1135%" height="15" fill="rgb(207,57,36)" fg:x="740" fg:w="1"/><text x="84.2455%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="83.9955%" y="741" width="0.1135%" height="15" fill="rgb(216,99,33)" fg:x="740" fg:w="1"/><text x="84.2455%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="84.1090%" y="869" width="0.1135%" height="15" fill="rgb(225,42,16)" fg:x="741" fg:w="1"/><text x="84.3590%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="84.7900%" y="773" width="0.1135%" height="15" fill="rgb(220,201,45)" fg:x="747" fg:w="1"/><text x="85.0400%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.11%)</title><rect x="84.7900%" y="757" width="0.1135%" height="15" fill="rgb(225,33,4)" fg:x="747" fg:w="1"/><text x="85.0400%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.11%)</title><rect x="84.7900%" y="741" width="0.1135%" height="15" fill="rgb(224,33,50)" fg:x="747" fg:w="1"/><text x="85.0400%" y="751.50"></text></g><g><title>&lt;demoparser::parsing::stringtables::StField as core::clone::Clone&gt;::clone (8 samples, 0.91%)</title><rect x="84.2225%" y="869" width="0.9081%" height="15" fill="rgb(246,198,51)" fg:x="742" fg:w="8"/><text x="84.4725%" y="879.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.91%)</title><rect x="84.2225%" y="853" width="0.9081%" height="15" fill="rgb(205,22,4)" fg:x="742" fg:w="8"/><text x="84.4725%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.34%)</title><rect x="84.7900%" y="837" width="0.3405%" height="15" fill="rgb(206,3,8)" fg:x="747" fg:w="3"/><text x="85.0400%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.34%)</title><rect x="84.7900%" y="821" width="0.3405%" height="15" fill="rgb(251,23,15)" fg:x="747" fg:w="3"/><text x="85.0400%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.34%)</title><rect x="84.7900%" y="805" width="0.3405%" height="15" fill="rgb(252,88,28)" fg:x="747" fg:w="3"/><text x="85.0400%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.34%)</title><rect x="84.7900%" y="789" width="0.3405%" height="15" fill="rgb(212,127,14)" fg:x="747" fg:w="3"/><text x="85.0400%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.23%)</title><rect x="84.9035%" y="773" width="0.2270%" height="15" fill="rgb(247,145,37)" fg:x="748" fg:w="2"/><text x="85.1535%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.23%)</title><rect x="84.9035%" y="757" width="0.2270%" height="15" fill="rgb(209,117,53)" fg:x="748" fg:w="2"/><text x="85.1535%" y="767.50"></text></g><g><title>[libc.so.6] (2 samples, 0.23%)</title><rect x="84.9035%" y="741" width="0.2270%" height="15" fill="rgb(212,90,42)" fg:x="748" fg:w="2"/><text x="85.1535%" y="751.50"></text></g><g><title>&lt;demoparser::parsing::stringtables::StringTable as core::clone::Clone&gt;::clone (28 samples, 3.18%)</title><rect x="84.1090%" y="949" width="3.1782%" height="15" fill="rgb(218,164,37)" fg:x="741" fg:w="28"/><text x="84.3590%" y="959.50">&lt;de..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (28 samples, 3.18%)</title><rect x="84.1090%" y="933" width="3.1782%" height="15" fill="rgb(246,65,34)" fg:x="741" fg:w="28"/><text x="84.3590%" y="943.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (28 samples, 3.18%)</title><rect x="84.1090%" y="917" width="3.1782%" height="15" fill="rgb(231,100,33)" fg:x="741" fg:w="28"/><text x="84.3590%" y="927.50">all..</text></g><g><title>alloc::slice::hack::to_vec (28 samples, 3.18%)</title><rect x="84.1090%" y="901" width="3.1782%" height="15" fill="rgb(228,126,14)" fg:x="741" fg:w="28"/><text x="84.3590%" y="911.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (28 samples, 3.18%)</title><rect x="84.1090%" y="885" width="3.1782%" height="15" fill="rgb(215,173,21)" fg:x="741" fg:w="28"/><text x="84.3590%" y="895.50">&lt;T ..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (19 samples, 2.16%)</title><rect x="85.1305%" y="869" width="2.1566%" height="15" fill="rgb(210,6,40)" fg:x="750" fg:w="19"/><text x="85.3805%" y="879.50">c..</text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="87.0602%" y="853" width="0.2270%" height="15" fill="rgb(212,48,18)" fg:x="767" fg:w="2"/><text x="87.3102%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="87.1737%" y="837" width="0.1135%" height="15" fill="rgb(230,214,11)" fg:x="768" fg:w="1"/><text x="87.4237%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="87.1737%" y="821" width="0.1135%" height="15" fill="rgb(254,105,39)" fg:x="768" fg:w="1"/><text x="87.4237%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="87.1737%" y="805" width="0.1135%" height="15" fill="rgb(245,158,5)" fg:x="768" fg:w="1"/><text x="87.4237%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="87.1737%" y="789" width="0.1135%" height="15" fill="rgb(249,208,11)" fg:x="768" fg:w="1"/><text x="87.4237%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="87.1737%" y="773" width="0.1135%" height="15" fill="rgb(210,39,28)" fg:x="768" fg:w="1"/><text x="87.4237%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="87.1737%" y="757" width="0.1135%" height="15" fill="rgb(211,56,53)" fg:x="768" fg:w="1"/><text x="87.4237%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="87.1737%" y="741" width="0.1135%" height="15" fill="rgb(226,201,30)" fg:x="768" fg:w="1"/><text x="87.4237%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="87.1737%" y="725" width="0.1135%" height="15" fill="rgb(239,101,34)" fg:x="768" fg:w="1"/><text x="87.4237%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="87.1737%" y="709" width="0.1135%" height="15" fill="rgb(226,209,5)" fg:x="768" fg:w="1"/><text x="87.4237%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="87.1737%" y="693" width="0.1135%" height="15" fill="rgb(250,105,47)" fg:x="768" fg:w="1"/><text x="87.4237%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.34%)</title><rect x="87.4007%" y="933" width="0.3405%" height="15" fill="rgb(230,72,3)" fg:x="770" fg:w="3"/><text x="87.6507%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.34%)</title><rect x="87.4007%" y="917" width="0.3405%" height="15" fill="rgb(232,218,39)" fg:x="770" fg:w="3"/><text x="87.6507%" y="927.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.34%)</title><rect x="87.4007%" y="901" width="0.3405%" height="15" fill="rgb(248,166,6)" fg:x="770" fg:w="3"/><text x="87.6507%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.34%)</title><rect x="87.4007%" y="885" width="0.3405%" height="15" fill="rgb(247,89,20)" fg:x="770" fg:w="3"/><text x="87.6507%" y="895.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.34%)</title><rect x="87.4007%" y="869" width="0.3405%" height="15" fill="rgb(248,130,54)" fg:x="770" fg:w="3"/><text x="87.6507%" y="879.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.34%)</title><rect x="87.4007%" y="853" width="0.3405%" height="15" fill="rgb(234,196,4)" fg:x="770" fg:w="3"/><text x="87.6507%" y="863.50"></text></g><g><title>_mi_heap_realloc_zero (3 samples, 0.34%)</title><rect x="87.4007%" y="837" width="0.3405%" height="15" fill="rgb(250,143,31)" fg:x="770" fg:w="3"/><text x="87.6507%" y="847.50"></text></g><g><title>_mi_memcpy_aligned (3 samples, 0.34%)</title><rect x="87.4007%" y="821" width="0.3405%" height="15" fill="rgb(211,110,34)" fg:x="770" fg:w="3"/><text x="87.6507%" y="831.50"></text></g><g><title>_mi_memcpy (3 samples, 0.34%)</title><rect x="87.4007%" y="805" width="0.3405%" height="15" fill="rgb(215,124,48)" fg:x="770" fg:w="3"/><text x="87.6507%" y="815.50"></text></g><g><title>memcpy (3 samples, 0.34%)</title><rect x="87.4007%" y="789" width="0.3405%" height="15" fill="rgb(216,46,13)" fg:x="770" fg:w="3"/><text x="87.6507%" y="799.50"></text></g><g><title>[libc.so.6] (3 samples, 0.34%)</title><rect x="87.4007%" y="773" width="0.3405%" height="15" fill="rgb(205,184,25)" fg:x="770" fg:w="3"/><text x="87.6507%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.57%)</title><rect x="87.2872%" y="949" width="0.5675%" height="15" fill="rgb(228,1,10)" fg:x="769" fg:w="5"/><text x="87.5372%" y="959.50"></text></g><g><title>core::ptr::write (1 samples, 0.11%)</title><rect x="87.7412%" y="933" width="0.1135%" height="15" fill="rgb(213,116,27)" fg:x="773" fg:w="1"/><text x="87.9912%" y="943.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.11%)</title><rect x="87.8547%" y="949" width="0.1135%" height="15" fill="rgb(241,95,50)" fg:x="774" fg:w="1"/><text x="88.1047%" y="959.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.11%)</title><rect x="87.8547%" y="933" width="0.1135%" height="15" fill="rgb(238,48,32)" fg:x="774" fg:w="1"/><text x="88.1047%" y="943.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (1 samples, 0.11%)</title><rect x="87.8547%" y="917" width="0.1135%" height="15" fill="rgb(235,113,49)" fg:x="774" fg:w="1"/><text x="88.1047%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::stringtables::StringTable&gt; (2 samples, 0.23%)</title><rect x="87.9682%" y="949" width="0.2270%" height="15" fill="rgb(205,127,43)" fg:x="775" fg:w="2"/><text x="88.2182%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::stringtables::StField&gt;&gt; (2 samples, 0.23%)</title><rect x="87.9682%" y="933" width="0.2270%" height="15" fill="rgb(250,162,2)" fg:x="775" fg:w="2"/><text x="88.2182%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.23%)</title><rect x="87.9682%" y="917" width="0.2270%" height="15" fill="rgb(220,13,41)" fg:x="775" fg:w="2"/><text x="88.2182%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::stringtables::StField]&gt; (2 samples, 0.23%)</title><rect x="87.9682%" y="901" width="0.2270%" height="15" fill="rgb(249,221,25)" fg:x="775" fg:w="2"/><text x="88.2182%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::stringtables::StField&gt; (2 samples, 0.23%)</title><rect x="87.9682%" y="885" width="0.2270%" height="15" fill="rgb(215,208,19)" fg:x="775" fg:w="2"/><text x="88.2182%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.23%)</title><rect x="87.9682%" y="869" width="0.2270%" height="15" fill="rgb(236,175,2)" fg:x="775" fg:w="2"/><text x="88.2182%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.23%)</title><rect x="87.9682%" y="853" width="0.2270%" height="15" fill="rgb(241,52,2)" fg:x="775" fg:w="2"/><text x="88.2182%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.23%)</title><rect x="87.9682%" y="837" width="0.2270%" height="15" fill="rgb(248,140,14)" fg:x="775" fg:w="2"/><text x="88.2182%" y="847.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.23%)</title><rect x="87.9682%" y="821" width="0.2270%" height="15" fill="rgb(253,22,42)" fg:x="775" fg:w="2"/><text x="88.2182%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.23%)</title><rect x="87.9682%" y="805" width="0.2270%" height="15" fill="rgb(234,61,47)" fg:x="775" fg:w="2"/><text x="88.2182%" y="815.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (1 samples, 0.11%)</title><rect x="88.1952%" y="933" width="0.1135%" height="15" fill="rgb(208,226,15)" fg:x="777" fg:w="1"/><text x="88.4452%" y="943.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (1 samples, 0.11%)</title><rect x="88.1952%" y="917" width="0.1135%" height="15" fill="rgb(217,221,4)" fg:x="777" fg:w="1"/><text x="88.4452%" y="927.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="88.1952%" y="901" width="0.1135%" height="15" fill="rgb(212,174,34)" fg:x="777" fg:w="1"/><text x="88.4452%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.11%)</title><rect x="88.1952%" y="885" width="0.1135%" height="15" fill="rgb(253,83,4)" fg:x="777" fg:w="1"/><text x="88.4452%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.11%)</title><rect x="88.1952%" y="869" width="0.1135%" height="15" fill="rgb(250,195,49)" fg:x="777" fg:w="1"/><text x="88.4452%" y="879.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.11%)</title><rect x="88.1952%" y="853" width="0.1135%" height="15" fill="rgb(241,192,25)" fg:x="777" fg:w="1"/><text x="88.4452%" y="863.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.11%)</title><rect x="88.1952%" y="837" width="0.1135%" height="15" fill="rgb(208,124,10)" fg:x="777" fg:w="1"/><text x="88.4452%" y="847.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.11%)</title><rect x="88.1952%" y="821" width="0.1135%" height="15" fill="rgb(222,33,0)" fg:x="777" fg:w="1"/><text x="88.4452%" y="831.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.11%)</title><rect x="88.1952%" y="805" width="0.1135%" height="15" fill="rgb(234,209,28)" fg:x="777" fg:w="1"/><text x="88.4452%" y="815.50"></text></g><g><title>[libc.so.6] (1 samples, 0.11%)</title><rect x="88.1952%" y="789" width="0.1135%" height="15" fill="rgb(224,11,23)" fg:x="777" fg:w="1"/><text x="88.4452%" y="799.50"></text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Demo&gt;::create_string_table (38 samples, 4.31%)</title><rect x="84.1090%" y="965" width="4.3133%" height="15" fill="rgb(232,99,1)" fg:x="741" fg:w="38"/><text x="84.3590%" y="975.50">demop..</text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Demo&gt;::update_string_table (2 samples, 0.23%)</title><rect x="88.1952%" y="949" width="0.2270%" height="15" fill="rgb(237,95,45)" fg:x="777" fg:w="2"/><text x="88.4452%" y="959.50"></text></g><g><title>demoparser::parsing::read_bits::BitReader&lt;R&gt;::read_nbits (1 samples, 0.11%)</title><rect x="88.3087%" y="933" width="0.1135%" height="15" fill="rgb(208,109,11)" fg:x="778" fg:w="1"/><text x="88.5587%" y="943.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;&amp;str&gt;&gt;::ne (1 samples, 0.11%)</title><rect x="88.4222%" y="949" width="0.1135%" height="15" fill="rgb(216,190,48)" fg:x="779" fg:w="1"/><text x="88.6722%" y="959.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::ne (1 samples, 0.11%)</title><rect x="88.4222%" y="933" width="0.1135%" height="15" fill="rgb(251,171,36)" fg:x="779" fg:w="1"/><text x="88.6722%" y="943.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.11%)</title><rect x="88.4222%" y="917" width="0.1135%" height="15" fill="rgb(230,62,22)" fg:x="779" fg:w="1"/><text x="88.6722%" y="927.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.11%)</title><rect x="88.4222%" y="901" width="0.1135%" height="15" fill="rgb(225,114,35)" fg:x="779" fg:w="1"/><text x="88.6722%" y="911.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.11%)</title><rect x="88.4222%" y="885" width="0.1135%" height="15" fill="rgb(215,118,42)" fg:x="779" fg:w="1"/><text x="88.6722%" y="895.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.11%)</title><rect x="88.4222%" y="869" width="0.1135%" height="15" fill="rgb(243,119,21)" fg:x="779" fg:w="1"/><text x="88.6722%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::CSVCMsg_UpdateStringTable&gt; (2 samples, 0.23%)</title><rect x="88.5358%" y="949" width="0.2270%" height="15" fill="rgb(252,177,53)" fg:x="780" fg:w="2"/><text x="88.7858%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (2 samples, 0.23%)</title><rect x="88.5358%" y="933" width="0.2270%" height="15" fill="rgb(237,209,29)" fg:x="780" fg:w="2"/><text x="88.7858%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.23%)</title><rect x="88.5358%" y="917" width="0.2270%" height="15" fill="rgb(212,65,23)" fg:x="780" fg:w="2"/><text x="88.7858%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.23%)</title><rect x="88.5358%" y="901" width="0.2270%" height="15" fill="rgb(230,222,46)" fg:x="780" fg:w="2"/><text x="88.7858%" y="911.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.23%)</title><rect x="88.5358%" y="885" width="0.2270%" height="15" fill="rgb(215,135,32)" fg:x="780" fg:w="2"/><text x="88.7858%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.23%)</title><rect x="88.5358%" y="869" width="0.2270%" height="15" fill="rgb(246,101,22)" fg:x="780" fg:w="2"/><text x="88.7858%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.23%)</title><rect x="88.5358%" y="853" width="0.2270%" height="15" fill="rgb(206,107,13)" fg:x="780" fg:w="2"/><text x="88.7858%" y="863.50"></text></g><g><title>mi_free (2 samples, 0.23%)</title><rect x="88.5358%" y="837" width="0.2270%" height="15" fill="rgb(250,100,44)" fg:x="780" fg:w="2"/><text x="88.7858%" y="847.50"></text></g><g><title>_mi_thread_id (2 samples, 0.23%)</title><rect x="88.5358%" y="821" width="0.2270%" height="15" fill="rgb(231,147,38)" fg:x="780" fg:w="2"/><text x="88.7858%" y="831.50"></text></g><g><title>mi_tls_slot (2 samples, 0.23%)</title><rect x="88.5358%" y="805" width="0.2270%" height="15" fill="rgb(229,8,40)" fg:x="780" fg:w="2"/><text x="88.7858%" y="815.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_end_matches (1 samples, 0.11%)</title><rect x="88.7628%" y="949" width="0.1135%" height="15" fill="rgb(221,135,30)" fg:x="782" fg:w="1"/><text x="89.0128%" y="959.50"></text></g><g><title>core::str::pattern::ReverseSearcher::next_reject_back (1 samples, 0.11%)</title><rect x="88.7628%" y="933" width="0.1135%" height="15" fill="rgb(249,193,18)" fg:x="782" fg:w="1"/><text x="89.0128%" y="943.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::ReverseSearcher&gt;::next_back (1 samples, 0.11%)</title><rect x="88.7628%" y="917" width="0.1135%" height="15" fill="rgb(209,133,39)" fg:x="782" fg:w="1"/><text x="89.0128%" y="927.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next_back (1 samples, 0.11%)</title><rect x="88.7628%" y="901" width="0.1135%" height="15" fill="rgb(232,100,14)" fg:x="782" fg:w="1"/><text x="89.0128%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="88.7628%" y="885" width="0.1135%" height="15" fill="rgb(224,185,1)" fg:x="782" fg:w="1"/><text x="89.0128%" y="895.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (1 samples, 0.11%)</title><rect x="88.7628%" y="869" width="0.1135%" height="15" fill="rgb(223,139,8)" fg:x="782" fg:w="1"/><text x="89.0128%" y="879.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (1 samples, 0.11%)</title><rect x="88.7628%" y="853" width="0.1135%" height="15" fill="rgb(232,213,38)" fg:x="782" fg:w="1"/><text x="89.0128%" y="863.50"></text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Demo&gt;::update_string_table_msg (5 samples, 0.57%)</title><rect x="88.4222%" y="965" width="0.5675%" height="15" fill="rgb(207,94,22)" fg:x="779" fg:w="5"/><text x="88.6722%" y="975.50"></text></g><g><title>csgoproto::netmessages::CCLCMsg_Move::num_backup_commands (1 samples, 0.11%)</title><rect x="88.8763%" y="949" width="0.1135%" height="15" fill="rgb(219,183,54)" fg:x="783" fg:w="1"/><text x="89.1263%" y="959.50"></text></g><g><title>&lt;protobuf::coded_input_stream::buf_read_iter::BufReadIter as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="89.1033%" y="949" width="0.1135%" height="15" fill="rgb(216,185,54)" fg:x="785" fg:w="1"/><text x="89.3533%" y="959.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::check_eof (1 samples, 0.11%)</title><rect x="89.2168%" y="949" width="0.1135%" height="15" fill="rgb(254,217,39)" fg:x="786" fg:w="1"/><text x="89.4668%" y="959.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.68%)</title><rect x="90.4654%" y="917" width="0.6810%" height="15" fill="rgb(240,178,23)" fg:x="797" fg:w="6"/><text x="90.7154%" y="927.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.11%)</title><rect x="91.1464%" y="885" width="0.1135%" height="15" fill="rgb(218,11,47)" fg:x="803" fg:w="1"/><text x="91.3964%" y="895.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.23%)</title><rect x="91.3734%" y="789" width="0.2270%" height="15" fill="rgb(218,51,51)" fg:x="805" fg:w="2"/><text x="91.6234%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.11%)</title><rect x="91.6005%" y="789" width="0.1135%" height="15" fill="rgb(238,126,27)" fg:x="807" fg:w="1"/><text x="91.8505%" y="799.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.11%)</title><rect x="91.8275%" y="773" width="0.1135%" height="15" fill="rgb(249,202,22)" fg:x="809" fg:w="1"/><text x="92.0775%" y="783.50"></text></g><g><title>mi_find_page (1 samples, 0.11%)</title><rect x="91.8275%" y="757" width="0.1135%" height="15" fill="rgb(254,195,49)" fg:x="809" fg:w="1"/><text x="92.0775%" y="767.50"></text></g><g><title>mi_find_free_page (1 samples, 0.11%)</title><rect x="91.8275%" y="741" width="0.1135%" height="15" fill="rgb(208,123,14)" fg:x="809" fg:w="1"/><text x="92.0775%" y="751.50"></text></g><g><title>mi_page_queue (1 samples, 0.11%)</title><rect x="91.8275%" y="725" width="0.1135%" height="15" fill="rgb(224,200,8)" fg:x="809" fg:w="1"/><text x="92.0775%" y="735.50"></text></g><g><title>_mi_bin (1 samples, 0.11%)</title><rect x="91.8275%" y="709" width="0.1135%" height="15" fill="rgb(217,61,36)" fg:x="809" fg:w="1"/><text x="92.0775%" y="719.50"></text></g><g><title>mi_bin (1 samples, 0.11%)</title><rect x="91.8275%" y="693" width="0.1135%" height="15" fill="rgb(206,35,45)" fg:x="809" fg:w="1"/><text x="92.0775%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (8 samples, 0.91%)</title><rect x="91.3734%" y="853" width="0.9081%" height="15" fill="rgb(217,65,33)" fg:x="805" fg:w="8"/><text x="91.6234%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (8 samples, 0.91%)</title><rect x="91.3734%" y="837" width="0.9081%" height="15" fill="rgb(222,158,48)" fg:x="805" fg:w="8"/><text x="91.6234%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (8 samples, 0.91%)</title><rect x="91.3734%" y="821" width="0.9081%" height="15" fill="rgb(254,2,54)" fg:x="805" fg:w="8"/><text x="91.6234%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (8 samples, 0.91%)</title><rect x="91.3734%" y="805" width="0.9081%" height="15" fill="rgb(250,143,38)" fg:x="805" fg:w="8"/><text x="91.6234%" y="815.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.57%)</title><rect x="91.7140%" y="789" width="0.5675%" height="15" fill="rgb(248,25,0)" fg:x="808" fg:w="5"/><text x="91.9640%" y="799.50"></text></g><g><title>mi_malloc (3 samples, 0.34%)</title><rect x="91.9410%" y="773" width="0.3405%" height="15" fill="rgb(206,152,27)" fg:x="810" fg:w="3"/><text x="92.1910%" y="783.50"></text></g><g><title>mi_heap_malloc (3 samples, 0.34%)</title><rect x="91.9410%" y="757" width="0.3405%" height="15" fill="rgb(240,77,30)" fg:x="810" fg:w="3"/><text x="92.1910%" y="767.50"></text></g><g><title>mi_heap_malloc_small (3 samples, 0.34%)</title><rect x="91.9410%" y="741" width="0.3405%" height="15" fill="rgb(231,5,3)" fg:x="810" fg:w="3"/><text x="92.1910%" y="751.50"></text></g><g><title>_mi_page_malloc (3 samples, 0.34%)</title><rect x="91.9410%" y="725" width="0.3405%" height="15" fill="rgb(207,226,32)" fg:x="810" fg:w="3"/><text x="92.1910%" y="735.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (14 samples, 1.59%)</title><rect x="91.1464%" y="917" width="1.5891%" height="15" fill="rgb(222,207,47)" fg:x="803" fg:w="14"/><text x="91.3964%" y="927.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (14 samples, 1.59%)</title><rect x="91.1464%" y="901" width="1.5891%" height="15" fill="rgb(229,115,45)" fg:x="803" fg:w="14"/><text x="91.3964%" y="911.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (13 samples, 1.48%)</title><rect x="91.2599%" y="885" width="1.4756%" height="15" fill="rgb(224,191,6)" fg:x="804" fg:w="13"/><text x="91.5099%" y="895.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (13 samples, 1.48%)</title><rect x="91.2599%" y="869" width="1.4756%" height="15" fill="rgb(230,227,24)" fg:x="804" fg:w="13"/><text x="91.5099%" y="879.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (4 samples, 0.45%)</title><rect x="92.2815%" y="853" width="0.4540%" height="15" fill="rgb(228,80,19)" fg:x="813" fg:w="4"/><text x="92.5315%" y="863.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (4 samples, 0.45%)</title><rect x="92.2815%" y="837" width="0.4540%" height="15" fill="rgb(247,229,0)" fg:x="813" fg:w="4"/><text x="92.5315%" y="847.50"></text></g><g><title>protobuf::misc::maybe_uninit_write_slice (4 samples, 0.45%)</title><rect x="92.2815%" y="821" width="0.4540%" height="15" fill="rgb(237,194,15)" fg:x="813" fg:w="4"/><text x="92.5315%" y="831.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.45%)</title><rect x="92.2815%" y="805" width="0.4540%" height="15" fill="rgb(219,203,20)" fg:x="813" fg:w="4"/><text x="92.5315%" y="815.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.45%)</title><rect x="92.2815%" y="789" width="0.4540%" height="15" fill="rgb(234,128,8)" fg:x="813" fg:w="4"/><text x="92.5315%" y="799.50"></text></g><g><title>[libc.so.6] (4 samples, 0.45%)</title><rect x="92.2815%" y="773" width="0.4540%" height="15" fill="rgb(248,202,8)" fg:x="813" fg:w="4"/><text x="92.5315%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="92.5085%" y="757" width="0.2270%" height="15" fill="rgb(206,104,37)" fg:x="815" fg:w="2"/><text x="92.7585%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="92.5085%" y="741" width="0.2270%" height="15" fill="rgb(223,8,27)" fg:x="815" fg:w="2"/><text x="92.7585%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="92.5085%" y="725" width="0.2270%" height="15" fill="rgb(216,217,28)" fg:x="815" fg:w="2"/><text x="92.7585%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="92.5085%" y="709" width="0.2270%" height="15" fill="rgb(249,199,1)" fg:x="815" fg:w="2"/><text x="92.7585%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="92.5085%" y="693" width="0.2270%" height="15" fill="rgb(240,85,17)" fg:x="815" fg:w="2"/><text x="92.7585%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="92.5085%" y="677" width="0.2270%" height="15" fill="rgb(206,108,45)" fg:x="815" fg:w="2"/><text x="92.7585%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="92.5085%" y="661" width="0.2270%" height="15" fill="rgb(245,210,41)" fg:x="815" fg:w="2"/><text x="92.7585%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="92.5085%" y="645" width="0.2270%" height="15" fill="rgb(206,13,37)" fg:x="815" fg:w="2"/><text x="92.7585%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="92.5085%" y="629" width="0.2270%" height="15" fill="rgb(250,61,18)" fg:x="815" fg:w="2"/><text x="92.7585%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="92.5085%" y="613" width="0.2270%" height="15" fill="rgb(235,172,48)" fg:x="815" fg:w="2"/><text x="92.7585%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="92.6220%" y="597" width="0.1135%" height="15" fill="rgb(249,201,17)" fg:x="816" fg:w="1"/><text x="92.8720%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.11%)</title><rect x="92.6220%" y="581" width="0.1135%" height="15" fill="rgb(219,208,6)" fg:x="816" fg:w="1"/><text x="92.8720%" y="591.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::TryFrom&lt;i64&gt; for i32&gt;::try_from (2 samples, 0.23%)</title><rect x="92.7355%" y="901" width="0.2270%" height="15" fill="rgb(248,31,23)" fg:x="817" fg:w="2"/><text x="92.9855%" y="911.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int32 (4 samples, 0.45%)</title><rect x="92.7355%" y="917" width="0.4540%" height="15" fill="rgb(245,15,42)" fg:x="817" fg:w="4"/><text x="92.9855%" y="927.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int64 (2 samples, 0.23%)</title><rect x="92.9625%" y="901" width="0.2270%" height="15" fill="rgb(222,217,39)" fg:x="819" fg:w="2"/><text x="93.2125%" y="911.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (2 samples, 0.23%)</title><rect x="92.9625%" y="885" width="0.2270%" height="15" fill="rgb(210,219,27)" fg:x="819" fg:w="2"/><text x="93.2125%" y="895.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::eof (1 samples, 0.11%)</title><rect x="93.4166%" y="885" width="0.1135%" height="15" fill="rgb(252,166,36)" fg:x="823" fg:w="1"/><text x="93.6666%" y="895.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::eof (1 samples, 0.11%)</title><rect x="93.4166%" y="869" width="0.1135%" height="15" fill="rgb(245,132,34)" fg:x="823" fg:w="1"/><text x="93.6666%" y="879.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::fill_buf (1 samples, 0.11%)</title><rect x="93.4166%" y="853" width="0.1135%" height="15" fill="rgb(236,54,3)" fg:x="823" fg:w="1"/><text x="93.6666%" y="863.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::fill_buf_slow (1 samples, 0.11%)</title><rect x="93.4166%" y="837" width="0.1135%" height="15" fill="rgb(241,173,43)" fg:x="823" fg:w="1"/><text x="93.6666%" y="847.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::pos (1 samples, 0.11%)</title><rect x="93.4166%" y="821" width="0.1135%" height="15" fill="rgb(215,190,9)" fg:x="823" fg:w="1"/><text x="93.6666%" y="831.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::pos_within_buf (1 samples, 0.11%)</title><rect x="93.4166%" y="805" width="0.1135%" height="15" fill="rgb(242,101,16)" fg:x="823" fg:w="1"/><text x="93.6666%" y="815.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_EntityMsg as protobuf::message::Message&gt;::merge_from (36 samples, 4.09%)</title><rect x="89.5573%" y="933" width="4.0863%" height="15" fill="rgb(223,190,21)" fg:x="789" fg:w="36"/><text x="89.8073%" y="943.50">&lt;csg..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (4 samples, 0.45%)</title><rect x="93.1896%" y="917" width="0.4540%" height="15" fill="rgb(215,228,25)" fg:x="821" fg:w="4"/><text x="93.4396%" y="927.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (2 samples, 0.23%)</title><rect x="93.4166%" y="901" width="0.2270%" height="15" fill="rgb(225,36,22)" fg:x="823" fg:w="2"/><text x="93.6666%" y="911.50"></text></g><g><title>protobuf::varint::decode::decode_varint32 (1 samples, 0.11%)</title><rect x="93.5301%" y="885" width="0.1135%" height="15" fill="rgb(251,106,46)" fg:x="824" fg:w="1"/><text x="93.7801%" y="895.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (1 samples, 0.11%)</title><rect x="93.5301%" y="869" width="0.1135%" height="15" fill="rgb(208,90,1)" fg:x="824" fg:w="1"/><text x="93.7801%" y="879.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.57%)</title><rect x="94.2111%" y="917" width="0.5675%" height="15" fill="rgb(243,10,4)" fg:x="830" fg:w="5"/><text x="94.4611%" y="927.50"></text></g><g><title>_mi_deferred_free (1 samples, 0.11%)</title><rect x="94.8922%" y="757" width="0.1135%" height="15" fill="rgb(212,137,27)" fg:x="836" fg:w="1"/><text x="95.1422%" y="767.50"></text></g><g><title>_mi_malloc_generic (2 samples, 0.23%)</title><rect x="94.8922%" y="773" width="0.2270%" height="15" fill="rgb(231,220,49)" fg:x="836" fg:w="2"/><text x="95.1422%" y="783.50"></text></g><g><title>mi_find_page (1 samples, 0.11%)</title><rect x="95.0057%" y="757" width="0.1135%" height="15" fill="rgb(237,96,20)" fg:x="837" fg:w="1"/><text x="95.2557%" y="767.50"></text></g><g><title>mi_find_free_page (1 samples, 0.11%)</title><rect x="95.0057%" y="741" width="0.1135%" height="15" fill="rgb(239,229,30)" fg:x="837" fg:w="1"/><text x="95.2557%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (5 samples, 0.57%)</title><rect x="94.7787%" y="853" width="0.5675%" height="15" fill="rgb(219,65,33)" fg:x="835" fg:w="5"/><text x="95.0287%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (5 samples, 0.57%)</title><rect x="94.7787%" y="837" width="0.5675%" height="15" fill="rgb(243,134,7)" fg:x="835" fg:w="5"/><text x="95.0287%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (5 samples, 0.57%)</title><rect x="94.7787%" y="821" width="0.5675%" height="15" fill="rgb(216,177,54)" fg:x="835" fg:w="5"/><text x="95.0287%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (5 samples, 0.57%)</title><rect x="94.7787%" y="805" width="0.5675%" height="15" fill="rgb(211,160,20)" fg:x="835" fg:w="5"/><text x="95.0287%" y="815.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.57%)</title><rect x="94.7787%" y="789" width="0.5675%" height="15" fill="rgb(239,85,39)" fg:x="835" fg:w="5"/><text x="95.0287%" y="799.50"></text></g><g><title>mi_malloc (2 samples, 0.23%)</title><rect x="95.1192%" y="773" width="0.2270%" height="15" fill="rgb(232,125,22)" fg:x="838" fg:w="2"/><text x="95.3692%" y="783.50"></text></g><g><title>mi_heap_malloc (2 samples, 0.23%)</title><rect x="95.1192%" y="757" width="0.2270%" height="15" fill="rgb(244,57,34)" fg:x="838" fg:w="2"/><text x="95.3692%" y="767.50"></text></g><g><title>mi_heap_malloc_small (2 samples, 0.23%)</title><rect x="95.1192%" y="741" width="0.2270%" height="15" fill="rgb(214,203,32)" fg:x="838" fg:w="2"/><text x="95.3692%" y="751.50"></text></g><g><title>_mi_page_malloc (2 samples, 0.23%)</title><rect x="95.1192%" y="725" width="0.2270%" height="15" fill="rgb(207,58,43)" fg:x="838" fg:w="2"/><text x="95.3692%" y="735.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (22 samples, 2.50%)</title><rect x="94.7787%" y="885" width="2.4972%" height="15" fill="rgb(215,193,15)" fg:x="835" fg:w="22"/><text x="95.0287%" y="895.50">pr..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (22 samples, 2.50%)</title><rect x="94.7787%" y="869" width="2.4972%" height="15" fill="rgb(232,15,44)" fg:x="835" fg:w="22"/><text x="95.0287%" y="879.50">pr..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (17 samples, 1.93%)</title><rect x="95.3462%" y="853" width="1.9296%" height="15" fill="rgb(212,3,48)" fg:x="840" fg:w="17"/><text x="95.5962%" y="863.50">p..</text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (17 samples, 1.93%)</title><rect x="95.3462%" y="837" width="1.9296%" height="15" fill="rgb(218,128,7)" fg:x="840" fg:w="17"/><text x="95.5962%" y="847.50">p..</text></g><g><title>protobuf::misc::maybe_uninit_write_slice (17 samples, 1.93%)</title><rect x="95.3462%" y="821" width="1.9296%" height="15" fill="rgb(226,216,39)" fg:x="840" fg:w="17"/><text x="95.5962%" y="831.50">p..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (17 samples, 1.93%)</title><rect x="95.3462%" y="805" width="1.9296%" height="15" fill="rgb(243,47,51)" fg:x="840" fg:w="17"/><text x="95.5962%" y="815.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 1.93%)</title><rect x="95.3462%" y="789" width="1.9296%" height="15" fill="rgb(241,183,40)" fg:x="840" fg:w="17"/><text x="95.5962%" y="799.50">c..</text></g><g><title>[libc.so.6] (17 samples, 1.93%)</title><rect x="95.3462%" y="773" width="1.9296%" height="15" fill="rgb(231,217,32)" fg:x="840" fg:w="17"/><text x="95.5962%" y="783.50">[..</text></g><g><title>[unknown] (4 samples, 0.45%)</title><rect x="96.8218%" y="757" width="0.4540%" height="15" fill="rgb(229,61,38)" fg:x="853" fg:w="4"/><text x="97.0718%" y="767.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="96.9353%" y="741" width="0.3405%" height="15" fill="rgb(225,210,5)" fg:x="854" fg:w="3"/><text x="97.1853%" y="751.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="96.9353%" y="725" width="0.3405%" height="15" fill="rgb(231,79,45)" fg:x="854" fg:w="3"/><text x="97.1853%" y="735.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="96.9353%" y="709" width="0.3405%" height="15" fill="rgb(224,100,7)" fg:x="854" fg:w="3"/><text x="97.1853%" y="719.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="96.9353%" y="693" width="0.3405%" height="15" fill="rgb(241,198,18)" fg:x="854" fg:w="3"/><text x="97.1853%" y="703.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="96.9353%" y="677" width="0.3405%" height="15" fill="rgb(252,97,53)" fg:x="854" fg:w="3"/><text x="97.1853%" y="687.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="96.9353%" y="661" width="0.3405%" height="15" fill="rgb(220,88,7)" fg:x="854" fg:w="3"/><text x="97.1853%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="96.9353%" y="645" width="0.3405%" height="15" fill="rgb(213,176,14)" fg:x="854" fg:w="3"/><text x="97.1853%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.34%)</title><rect x="96.9353%" y="629" width="0.3405%" height="15" fill="rgb(246,73,7)" fg:x="854" fg:w="3"/><text x="97.1853%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="97.0488%" y="613" width="0.2270%" height="15" fill="rgb(245,64,36)" fg:x="855" fg:w="2"/><text x="97.2988%" y="623.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (23 samples, 2.61%)</title><rect x="94.7787%" y="917" width="2.6107%" height="15" fill="rgb(245,80,10)" fg:x="835" fg:w="23"/><text x="95.0287%" y="927.50">pr..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (23 samples, 2.61%)</title><rect x="94.7787%" y="901" width="2.6107%" height="15" fill="rgb(232,107,50)" fg:x="835" fg:w="23"/><text x="95.0287%" y="911.50">pr..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32 (1 samples, 0.11%)</title><rect x="97.2758%" y="885" width="0.1135%" height="15" fill="rgb(253,3,0)" fg:x="857" fg:w="1"/><text x="97.5258%" y="895.50"></text></g><g><title>protobuf::varint::decode::decode_varint32 (1 samples, 0.11%)</title><rect x="97.2758%" y="869" width="0.1135%" height="15" fill="rgb(212,99,53)" fg:x="857" fg:w="1"/><text x="97.5258%" y="879.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (1 samples, 0.11%)</title><rect x="97.2758%" y="853" width="0.1135%" height="15" fill="rgb(249,111,54)" fg:x="857" fg:w="1"/><text x="97.5258%" y="863.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (3 samples, 0.34%)</title><rect x="97.6163%" y="885" width="0.3405%" height="15" fill="rgb(249,55,30)" fg:x="860" fg:w="3"/><text x="97.8663%" y="895.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int32 (8 samples, 0.91%)</title><rect x="97.3893%" y="917" width="0.9081%" height="15" fill="rgb(237,47,42)" fg:x="858" fg:w="8"/><text x="97.6393%" y="927.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int64 (6 samples, 0.68%)</title><rect x="97.6163%" y="901" width="0.6810%" height="15" fill="rgb(211,20,18)" fg:x="860" fg:w="6"/><text x="97.8663%" y="911.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (3 samples, 0.34%)</title><rect x="97.9569%" y="885" width="0.3405%" height="15" fill="rgb(231,203,46)" fg:x="863" fg:w="3"/><text x="98.2069%" y="895.50"></text></g><g><title>protobuf::varint::decode::decode_varint64 (3 samples, 0.34%)</title><rect x="97.9569%" y="869" width="0.3405%" height="15" fill="rgb(237,142,3)" fg:x="863" fg:w="3"/><text x="98.2069%" y="879.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (3 samples, 0.34%)</title><rect x="97.9569%" y="853" width="0.3405%" height="15" fill="rgb(241,107,1)" fg:x="863" fg:w="3"/><text x="98.2069%" y="863.50"></text></g><g><title>protobuf::varint::decode::decode_varint_full (2 samples, 0.23%)</title><rect x="98.0704%" y="837" width="0.2270%" height="15" fill="rgb(229,83,13)" fg:x="864" fg:w="2"/><text x="98.3204%" y="847.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::remaining_in_buf (2 samples, 0.23%)</title><rect x="98.4109%" y="885" width="0.2270%" height="15" fill="rgb(241,91,40)" fg:x="867" fg:w="2"/><text x="98.6609%" y="895.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::remaining_in_buf (1 samples, 0.11%)</title><rect x="98.5244%" y="869" width="0.1135%" height="15" fill="rgb(225,3,45)" fg:x="868" fg:w="1"/><text x="98.7744%" y="879.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.11%)</title><rect x="98.5244%" y="853" width="0.1135%" height="15" fill="rgb(244,223,14)" fg:x="868" fg:w="1"/><text x="98.7744%" y="863.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.11%)</title><rect x="98.5244%" y="837" width="0.1135%" height="15" fill="rgb(224,124,37)" fg:x="868" fg:w="1"/><text x="98.7744%" y="847.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.11%)</title><rect x="98.5244%" y="821" width="0.1135%" height="15" fill="rgb(251,171,30)" fg:x="868" fg:w="1"/><text x="98.7744%" y="831.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.11%)</title><rect x="98.5244%" y="805" width="0.1135%" height="15" fill="rgb(236,46,54)" fg:x="868" fg:w="1"/><text x="98.7744%" y="815.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_PacketEntities as protobuf::message::Message&gt;::merge_from (47 samples, 5.33%)</title><rect x="93.6436%" y="933" width="5.3348%" height="15" fill="rgb(245,213,5)" fg:x="825" fg:w="47"/><text x="93.8936%" y="943.50">&lt;csgopr..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (6 samples, 0.68%)</title><rect x="98.2974%" y="917" width="0.6810%" height="15" fill="rgb(230,144,27)" fg:x="866" fg:w="6"/><text x="98.5474%" y="927.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (6 samples, 0.68%)</title><rect x="98.2974%" y="901" width="0.6810%" height="15" fill="rgb(220,86,6)" fg:x="866" fg:w="6"/><text x="98.5474%" y="911.50"></text></g><g><title>protobuf::varint::decode::decode_varint32 (3 samples, 0.34%)</title><rect x="98.6379%" y="885" width="0.3405%" height="15" fill="rgb(240,20,13)" fg:x="869" fg:w="3"/><text x="98.8879%" y="895.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (3 samples, 0.34%)</title><rect x="98.6379%" y="869" width="0.3405%" height="15" fill="rgb(217,89,34)" fg:x="869" fg:w="3"/><text x="98.8879%" y="879.50"></text></g><g><title>&lt;u32 as protobuf::varint::decode::DecodeVarint&gt;::from_u64 (2 samples, 0.23%)</title><rect x="98.7514%" y="853" width="0.2270%" height="15" fill="rgb(229,13,5)" fg:x="870" fg:w="2"/><text x="99.0014%" y="863.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_PacketEntities as protobuf::message::Message&gt;::new (1 samples, 0.11%)</title><rect x="98.9784%" y="933" width="0.1135%" height="15" fill="rgb(244,67,35)" fg:x="872" fg:w="1"/><text x="99.2284%" y="943.50"></text></g><g><title>csgoproto::netmessages::CSVCMsg_PacketEntities::new (1 samples, 0.11%)</title><rect x="98.9784%" y="917" width="0.1135%" height="15" fill="rgb(221,40,2)" fg:x="872" fg:w="1"/><text x="99.2284%" y="927.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_PacketEntities as core::default::Default&gt;::default (1 samples, 0.11%)</title><rect x="98.9784%" y="901" width="0.1135%" height="15" fill="rgb(237,157,21)" fg:x="872" fg:w="1"/><text x="99.2284%" y="911.50"></text></g><g><title>demoparser::parsing::parser::Demo::parse_cmd (818 samples, 92.85%)</title><rect x="6.3564%" y="997" width="92.8490%" height="15" fill="rgb(222,94,11)" fg:x="56" fg:w="818"/><text x="6.6064%" y="1007.50">demoparser::parsing::parser::Demo::parse_cmd</text></g><g><title>demoparser::parsing::parser::Demo::parse_packet (766 samples, 86.95%)</title><rect x="12.2588%" y="981" width="86.9467%" height="15" fill="rgb(249,113,6)" fg:x="108" fg:w="766"/><text x="12.5088%" y="991.50">demoparser::parsing::parser::Demo::parse_packet</text></g><g><title>protobuf::message::Message::parse_from_bytes (90 samples, 10.22%)</title><rect x="88.9898%" y="965" width="10.2157%" height="15" fill="rgb(238,137,36)" fg:x="784" fg:w="90"/><text x="89.2398%" y="975.50">protobuf::messa..</text></g><g><title>protobuf::message::Message::parse_from (87 samples, 9.88%)</title><rect x="89.3303%" y="949" width="9.8751%" height="15" fill="rgb(210,102,26)" fg:x="787" fg:w="87"/><text x="89.5803%" y="959.50">protobuf::mess..</text></g><g><title>protobuf::message::Message::check_initialized (1 samples, 0.11%)</title><rect x="99.0919%" y="933" width="0.1135%" height="15" fill="rgb(218,30,30)" fg:x="873" fg:w="1"/><text x="99.3419%" y="943.50"></text></g><g><title>&lt;M as protobuf::message_dyn::MessageDyn&gt;::is_initialized_dyn (1 samples, 0.11%)</title><rect x="99.0919%" y="917" width="0.1135%" height="15" fill="rgb(214,67,26)" fg:x="873" fg:w="1"/><text x="99.3419%" y="927.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_frame_bytes (1 samples, 0.11%)</title><rect x="99.2054%" y="997" width="0.1135%" height="15" fill="rgb(251,9,53)" fg:x="874" fg:w="1"/><text x="99.4554%" y="1007.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_byte (1 samples, 0.11%)</title><rect x="99.2054%" y="981" width="0.1135%" height="15" fill="rgb(228,204,25)" fg:x="874" fg:w="1"/><text x="99.4554%" y="991.50"></text></g><g><title>demoparser (876 samples, 99.43%)</title><rect x="0.0000%" y="1301" width="99.4325%" height="15" fill="rgb(207,153,8)" fg:x="0" fg:w="876"/><text x="0.2500%" y="1311.50">demoparser</text></g><g><title>_start (860 samples, 97.62%)</title><rect x="1.8161%" y="1285" width="97.6163%" height="15" fill="rgb(242,9,16)" fg:x="16" fg:w="860"/><text x="2.0661%" y="1295.50">_start</text></g><g><title>__libc_start_main_impl (860 samples, 97.62%)</title><rect x="1.8161%" y="1269" width="97.6163%" height="15" fill="rgb(217,211,10)" fg:x="16" fg:w="860"/><text x="2.0661%" y="1279.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (860 samples, 97.62%)</title><rect x="1.8161%" y="1253" width="97.6163%" height="15" fill="rgb(219,228,52)" fg:x="16" fg:w="860"/><text x="2.0661%" y="1263.50">__libc_start_call_main</text></g><g><title>main (860 samples, 97.62%)</title><rect x="1.8161%" y="1237" width="97.6163%" height="15" fill="rgb(231,92,29)" fg:x="16" fg:w="860"/><text x="2.0661%" y="1247.50">main</text></g><g><title>std::rt::lang_start_internal (860 samples, 97.62%)</title><rect x="1.8161%" y="1221" width="97.6163%" height="15" fill="rgb(232,8,23)" fg:x="16" fg:w="860"/><text x="2.0661%" y="1231.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (860 samples, 97.62%)</title><rect x="1.8161%" y="1205" width="97.6163%" height="15" fill="rgb(216,211,34)" fg:x="16" fg:w="860"/><text x="2.0661%" y="1215.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (860 samples, 97.62%)</title><rect x="1.8161%" y="1189" width="97.6163%" height="15" fill="rgb(236,151,0)" fg:x="16" fg:w="860"/><text x="2.0661%" y="1199.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (860 samples, 97.62%)</title><rect x="1.8161%" y="1173" width="97.6163%" height="15" fill="rgb(209,168,3)" fg:x="16" fg:w="860"/><text x="2.0661%" y="1183.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (860 samples, 97.62%)</title><rect x="1.8161%" y="1157" width="97.6163%" height="15" fill="rgb(208,129,28)" fg:x="16" fg:w="860"/><text x="2.0661%" y="1167.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (860 samples, 97.62%)</title><rect x="1.8161%" y="1141" width="97.6163%" height="15" fill="rgb(229,78,22)" fg:x="16" fg:w="860"/><text x="2.0661%" y="1151.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (860 samples, 97.62%)</title><rect x="1.8161%" y="1125" width="97.6163%" height="15" fill="rgb(228,187,13)" fg:x="16" fg:w="860"/><text x="2.0661%" y="1135.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (860 samples, 97.62%)</title><rect x="1.8161%" y="1109" width="97.6163%" height="15" fill="rgb(240,119,24)" fg:x="16" fg:w="860"/><text x="2.0661%" y="1119.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (860 samples, 97.62%)</title><rect x="1.8161%" y="1093" width="97.6163%" height="15" fill="rgb(209,194,42)" fg:x="16" fg:w="860"/><text x="2.0661%" y="1103.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (860 samples, 97.62%)</title><rect x="1.8161%" y="1077" width="97.6163%" height="15" fill="rgb(247,200,46)" fg:x="16" fg:w="860"/><text x="2.0661%" y="1087.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (860 samples, 97.62%)</title><rect x="1.8161%" y="1061" width="97.6163%" height="15" fill="rgb(218,76,16)" fg:x="16" fg:w="860"/><text x="2.0661%" y="1071.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (860 samples, 97.62%)</title><rect x="1.8161%" y="1045" width="97.6163%" height="15" fill="rgb(225,21,48)" fg:x="16" fg:w="860"/><text x="2.0661%" y="1055.50">core::ops::function::FnOnce::call_once</text></g><g><title>demoparser::main (860 samples, 97.62%)</title><rect x="1.8161%" y="1029" width="97.6163%" height="15" fill="rgb(239,223,50)" fg:x="16" fg:w="860"/><text x="2.0661%" y="1039.50">demoparser::main</text></g><g><title>demoparser::parsing::parser::Demo::start_parsing (845 samples, 95.91%)</title><rect x="3.5187%" y="1013" width="95.9137%" height="15" fill="rgb(244,45,21)" fg:x="31" fg:w="845"/><text x="3.7687%" y="1023.50">demoparser::parsing::parser::Demo::start_parsing</text></g><g><title>demoparser::parsing::variants::BytesVariant::get_len (1 samples, 0.11%)</title><rect x="99.3190%" y="997" width="0.1135%" height="15" fill="rgb(232,33,43)" fg:x="875" fg:w="1"/><text x="99.5690%" y="1007.50"></text></g><g><title>all (881 samples, 100%)</title><rect x="0.0000%" y="1317" width="100.0000%" height="15" fill="rgb(209,8,3)" fg:x="0" fg:w="881"/><text x="0.2500%" y="1327.50"></text></g><g><title>perf-exec (5 samples, 0.57%)</title><rect x="99.4325%" y="1301" width="0.5675%" height="15" fill="rgb(214,25,53)" fg:x="876" fg:w="5"/><text x="99.6825%" y="1311.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="99.4325%" y="1285" width="0.5675%" height="15" fill="rgb(254,186,54)" fg:x="876" fg:w="5"/><text x="99.6825%" y="1295.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="99.4325%" y="1269" width="0.5675%" height="15" fill="rgb(208,174,49)" fg:x="876" fg:w="5"/><text x="99.6825%" y="1279.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="99.4325%" y="1253" width="0.5675%" height="15" fill="rgb(233,191,51)" fg:x="876" fg:w="5"/><text x="99.6825%" y="1263.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="99.4325%" y="1237" width="0.5675%" height="15" fill="rgb(222,134,10)" fg:x="876" fg:w="5"/><text x="99.6825%" y="1247.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="99.4325%" y="1221" width="0.5675%" height="15" fill="rgb(230,226,20)" fg:x="876" fg:w="5"/><text x="99.6825%" y="1231.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="99.4325%" y="1205" width="0.5675%" height="15" fill="rgb(251,111,25)" fg:x="876" fg:w="5"/><text x="99.6825%" y="1215.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="99.4325%" y="1189" width="0.5675%" height="15" fill="rgb(224,40,46)" fg:x="876" fg:w="5"/><text x="99.6825%" y="1199.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="99.4325%" y="1173" width="0.5675%" height="15" fill="rgb(236,108,47)" fg:x="876" fg:w="5"/><text x="99.6825%" y="1183.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="99.4325%" y="1157" width="0.5675%" height="15" fill="rgb(234,93,0)" fg:x="876" fg:w="5"/><text x="99.6825%" y="1167.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="99.4325%" y="1141" width="0.5675%" height="15" fill="rgb(224,213,32)" fg:x="876" fg:w="5"/><text x="99.6825%" y="1151.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="99.4325%" y="1125" width="0.5675%" height="15" fill="rgb(251,11,48)" fg:x="876" fg:w="5"/><text x="99.6825%" y="1135.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="99.4325%" y="1109" width="0.5675%" height="15" fill="rgb(236,173,5)" fg:x="876" fg:w="5"/><text x="99.6825%" y="1119.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="99.4325%" y="1093" width="0.5675%" height="15" fill="rgb(230,95,12)" fg:x="876" fg:w="5"/><text x="99.6825%" y="1103.50"></text></g><g><title>[unknown] (5 samples, 0.57%)</title><rect x="99.4325%" y="1077" width="0.5675%" height="15" fill="rgb(232,209,1)" fg:x="876" fg:w="5"/><text x="99.6825%" y="1087.50"></text></g></svg></svg>