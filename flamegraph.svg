<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1494" onload="init(evt)" viewBox="0 0 1200 1494" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1494" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1477.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1477.00"> </text><svg id="frames" x="10" width="1180" total_samples="197"><g><title>[unknown] (4 samples, 2.03%)</title><rect x="0.0000%" y="1397" width="2.0305%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1407.50">[..</text></g><g><title>[unknown] (4 samples, 2.03%)</title><rect x="0.0000%" y="1381" width="2.0305%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1391.50">[..</text></g><g><title>[unknown] (4 samples, 2.03%)</title><rect x="0.0000%" y="1365" width="2.0305%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1375.50">[..</text></g><g><title>[unknown] (4 samples, 2.03%)</title><rect x="0.0000%" y="1349" width="2.0305%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1359.50">[..</text></g><g><title>[unknown] (4 samples, 2.03%)</title><rect x="0.0000%" y="1333" width="2.0305%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1343.50">[..</text></g><g><title>[unknown] (4 samples, 2.03%)</title><rect x="0.0000%" y="1317" width="2.0305%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1327.50">[..</text></g><g><title>[unknown] (4 samples, 2.03%)</title><rect x="0.0000%" y="1301" width="2.0305%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1311.50">[..</text></g><g><title>[unknown] (4 samples, 2.03%)</title><rect x="0.0000%" y="1285" width="2.0305%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1295.50">[..</text></g><g><title>[unknown] (4 samples, 2.03%)</title><rect x="0.0000%" y="1269" width="2.0305%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1279.50">[..</text></g><g><title>[unknown] (4 samples, 2.03%)</title><rect x="0.0000%" y="1253" width="2.0305%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1263.50">[..</text></g><g><title>[unknown] (4 samples, 2.03%)</title><rect x="0.0000%" y="1237" width="2.0305%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1247.50">[..</text></g><g><title>[unknown] (4 samples, 2.03%)</title><rect x="0.0000%" y="1221" width="2.0305%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1231.50">[..</text></g><g><title>[unknown] (3 samples, 1.52%)</title><rect x="0.5076%" y="1205" width="1.5228%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="3"/><text x="0.7576%" y="1215.50"></text></g><g><title>[unknown] (3 samples, 1.52%)</title><rect x="0.5076%" y="1189" width="1.5228%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="3"/><text x="0.7576%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="1.0152%" y="1173" width="1.0152%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="2"/><text x="1.2652%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="1.0152%" y="1157" width="1.0152%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="2"/><text x="1.2652%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="1.5228%" y="1141" width="0.5076%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="1.7728%" y="1151.50"></text></g><g><title>[unknown] (5 samples, 2.54%)</title><rect x="0.0000%" y="1413" width="2.5381%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1423.50">[u..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (1 samples, 0.51%)</title><rect x="2.0305%" y="1397" width="0.5076%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="1"/><text x="2.2805%" y="1407.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (1 samples, 0.51%)</title><rect x="2.0305%" y="1381" width="0.5076%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="1"/><text x="2.2805%" y="1391.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (1 samples, 0.51%)</title><rect x="2.0305%" y="1365" width="0.5076%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="1"/><text x="2.2805%" y="1375.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_excl_props (1 samples, 0.51%)</title><rect x="2.0305%" y="1349" width="0.5076%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="1"/><text x="2.2805%" y="1359.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as core::clone::Clone&gt;::clone (1 samples, 0.51%)</title><rect x="2.0305%" y="1333" width="0.5076%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="1"/><text x="2.2805%" y="1343.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.51%)</title><rect x="2.0305%" y="1317" width="0.5076%" height="15" fill="rgb(247,18,42)" fg:x="4" fg:w="1"/><text x="2.2805%" y="1327.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.51%)</title><rect x="2.0305%" y="1301" width="0.5076%" height="15" fill="rgb(241,131,45)" fg:x="4" fg:w="1"/><text x="2.2805%" y="1311.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.51%)</title><rect x="2.0305%" y="1285" width="0.5076%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="1"/><text x="2.2805%" y="1295.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.51%)</title><rect x="2.0305%" y="1269" width="0.5076%" height="15" fill="rgb(225,111,53)" fg:x="4" fg:w="1"/><text x="2.2805%" y="1279.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as core::clone::Clone&gt;::clone (1 samples, 0.51%)</title><rect x="2.0305%" y="1253" width="0.5076%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="1"/><text x="2.2805%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.51%)</title><rect x="2.5381%" y="997" width="0.5076%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="1"/><text x="2.7881%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.51%)</title><rect x="2.5381%" y="981" width="0.5076%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="1"/><text x="2.7881%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.51%)</title><rect x="2.5381%" y="965" width="0.5076%" height="15" fill="rgb(209,103,24)" fg:x="5" fg:w="1"/><text x="2.7881%" y="975.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.51%)</title><rect x="2.5381%" y="949" width="0.5076%" height="15" fill="rgb(229,88,8)" fg:x="5" fg:w="1"/><text x="2.7881%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.51%)</title><rect x="2.5381%" y="933" width="0.5076%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="1"/><text x="2.7881%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::game_events::GameEvent&gt;&gt; (2 samples, 1.02%)</title><rect x="2.5381%" y="1125" width="1.0152%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="2"/><text x="2.7881%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 1.02%)</title><rect x="2.5381%" y="1109" width="1.0152%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="2"/><text x="2.7881%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::game_events::GameEvent]&gt; (2 samples, 1.02%)</title><rect x="2.5381%" y="1093" width="1.0152%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="2"/><text x="2.7881%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::game_events::GameEvent&gt; (2 samples, 1.02%)</title><rect x="2.5381%" y="1077" width="1.0152%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="2"/><text x="2.7881%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::game_events::NameDataPair&gt;&gt; (2 samples, 1.02%)</title><rect x="2.5381%" y="1061" width="1.0152%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="2"/><text x="2.7881%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 1.02%)</title><rect x="2.5381%" y="1045" width="1.0152%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="2"/><text x="2.7881%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::game_events::NameDataPair]&gt; (2 samples, 1.02%)</title><rect x="2.5381%" y="1029" width="1.0152%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="2"/><text x="2.7881%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::game_events::NameDataPair&gt; (2 samples, 1.02%)</title><rect x="2.5381%" y="1013" width="1.0152%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="2"/><text x="2.7881%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::game_events::KeyData&gt; (1 samples, 0.51%)</title><rect x="3.0457%" y="997" width="0.5076%" height="15" fill="rgb(208,69,12)" fg:x="6" fg:w="1"/><text x="3.2957%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.51%)</title><rect x="3.0457%" y="981" width="0.5076%" height="15" fill="rgb(235,93,37)" fg:x="6" fg:w="1"/><text x="3.2957%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.51%)</title><rect x="3.0457%" y="965" width="0.5076%" height="15" fill="rgb(213,116,39)" fg:x="6" fg:w="1"/><text x="3.2957%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.51%)</title><rect x="3.0457%" y="949" width="0.5076%" height="15" fill="rgb(222,207,29)" fg:x="6" fg:w="1"/><text x="3.2957%" y="959.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.51%)</title><rect x="3.0457%" y="933" width="0.5076%" height="15" fill="rgb(206,96,30)" fg:x="6" fg:w="1"/><text x="3.2957%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.51%)</title><rect x="3.0457%" y="917" width="0.5076%" height="15" fill="rgb(218,138,4)" fg:x="6" fg:w="1"/><text x="3.2957%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::BytesVariant&gt; (2 samples, 1.02%)</title><rect x="3.5533%" y="1125" width="1.0152%" height="15" fill="rgb(250,191,14)" fg:x="7" fg:w="2"/><text x="3.8033%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap::Mmap&gt; (2 samples, 1.02%)</title><rect x="3.5533%" y="1109" width="1.0152%" height="15" fill="rgb(239,60,40)" fg:x="7" fg:w="2"/><text x="3.8033%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap::unix::MmapInner&gt; (2 samples, 1.02%)</title><rect x="3.5533%" y="1093" width="1.0152%" height="15" fill="rgb(206,27,48)" fg:x="7" fg:w="2"/><text x="3.8033%" y="1103.50"></text></g><g><title>&lt;memmap::unix::MmapInner as core::ops::drop::Drop&gt;::drop (2 samples, 1.02%)</title><rect x="3.5533%" y="1077" width="1.0152%" height="15" fill="rgb(225,35,8)" fg:x="7" fg:w="2"/><text x="3.8033%" y="1087.50"></text></g><g><title>__GI___munmap (2 samples, 1.02%)</title><rect x="3.5533%" y="1061" width="1.0152%" height="15" fill="rgb(250,213,24)" fg:x="7" fg:w="2"/><text x="3.8033%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="3.5533%" y="1045" width="1.0152%" height="15" fill="rgb(247,123,22)" fg:x="7" fg:w="2"/><text x="3.8033%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="3.5533%" y="1029" width="1.0152%" height="15" fill="rgb(231,138,38)" fg:x="7" fg:w="2"/><text x="3.8033%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="3.5533%" y="1013" width="1.0152%" height="15" fill="rgb(231,145,46)" fg:x="7" fg:w="2"/><text x="3.8033%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="3.5533%" y="997" width="1.0152%" height="15" fill="rgb(251,118,11)" fg:x="7" fg:w="2"/><text x="3.8033%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="3.5533%" y="981" width="1.0152%" height="15" fill="rgb(217,147,25)" fg:x="7" fg:w="2"/><text x="3.8033%" y="991.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="3.5533%" y="965" width="1.0152%" height="15" fill="rgb(247,81,37)" fg:x="7" fg:w="2"/><text x="3.8033%" y="975.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="3.5533%" y="949" width="1.0152%" height="15" fill="rgb(209,12,38)" fg:x="7" fg:w="2"/><text x="3.8033%" y="959.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="3.5533%" y="933" width="1.0152%" height="15" fill="rgb(227,1,9)" fg:x="7" fg:w="2"/><text x="3.8033%" y="943.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="3.5533%" y="917" width="1.0152%" height="15" fill="rgb(248,47,43)" fg:x="7" fg:w="2"/><text x="3.8033%" y="927.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="3.5533%" y="901" width="1.0152%" height="15" fill="rgb(221,10,30)" fg:x="7" fg:w="2"/><text x="3.8033%" y="911.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="3.5533%" y="885" width="1.0152%" height="15" fill="rgb(210,229,1)" fg:x="7" fg:w="2"/><text x="3.8033%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::Demo&gt; (5 samples, 2.54%)</title><rect x="2.5381%" y="1141" width="2.5381%" height="15" fill="rgb(222,148,37)" fg:x="5" fg:w="5"/><text x="2.7881%" y="1151.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.51%)</title><rect x="4.5685%" y="1125" width="0.5076%" height="15" fill="rgb(234,67,33)" fg:x="9" fg:w="1"/><text x="4.8185%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,demoparser::parsing::data_table::ServerClass,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.51%)</title><rect x="4.5685%" y="1109" width="0.5076%" height="15" fill="rgb(247,98,35)" fg:x="9" fg:w="1"/><text x="4.8185%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,demoparser::parsing::data_table::ServerClass)&gt;&gt; (1 samples, 0.51%)</title><rect x="4.5685%" y="1093" width="0.5076%" height="15" fill="rgb(247,138,52)" fg:x="9" fg:w="1"/><text x="4.8185%" y="1103.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.51%)</title><rect x="4.5685%" y="1077" width="0.5076%" height="15" fill="rgb(213,79,30)" fg:x="9" fg:w="1"/><text x="4.8185%" y="1087.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.51%)</title><rect x="4.5685%" y="1061" width="0.5076%" height="15" fill="rgb(246,177,23)" fg:x="9" fg:w="1"/><text x="4.8185%" y="1071.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.51%)</title><rect x="4.5685%" y="1045" width="0.5076%" height="15" fill="rgb(230,62,27)" fg:x="9" fg:w="1"/><text x="4.8185%" y="1055.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.51%)</title><rect x="4.5685%" y="1029" width="0.5076%" height="15" fill="rgb(216,154,8)" fg:x="9" fg:w="1"/><text x="4.8185%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u16,demoparser::parsing::data_table::ServerClass)&gt; (1 samples, 0.51%)</title><rect x="4.5685%" y="1013" width="0.5076%" height="15" fill="rgb(244,35,45)" fg:x="9" fg:w="1"/><text x="4.8185%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::data_table::ServerClass&gt; (1 samples, 0.51%)</title><rect x="4.5685%" y="997" width="0.5076%" height="15" fill="rgb(251,115,12)" fg:x="9" fg:w="1"/><text x="4.8185%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::entities::Prop&gt;&gt; (1 samples, 0.51%)</title><rect x="4.5685%" y="981" width="0.5076%" height="15" fill="rgb(240,54,50)" fg:x="9" fg:w="1"/><text x="4.8185%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.51%)</title><rect x="4.5685%" y="965" width="0.5076%" height="15" fill="rgb(233,84,52)" fg:x="9" fg:w="1"/><text x="4.8185%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::entities::Prop]&gt; (1 samples, 0.51%)</title><rect x="4.5685%" y="949" width="0.5076%" height="15" fill="rgb(207,117,47)" fg:x="9" fg:w="1"/><text x="4.8185%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::entities::Prop&gt; (1 samples, 0.51%)</title><rect x="4.5685%" y="933" width="0.5076%" height="15" fill="rgb(249,43,39)" fg:x="9" fg:w="1"/><text x="4.8185%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.51%)</title><rect x="4.5685%" y="917" width="0.5076%" height="15" fill="rgb(209,38,44)" fg:x="9" fg:w="1"/><text x="4.8185%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.51%)</title><rect x="4.5685%" y="901" width="0.5076%" height="15" fill="rgb(236,212,23)" fg:x="9" fg:w="1"/><text x="4.8185%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.51%)</title><rect x="4.5685%" y="885" width="0.5076%" height="15" fill="rgb(242,79,21)" fg:x="9" fg:w="1"/><text x="4.8185%" y="895.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.51%)</title><rect x="4.5685%" y="869" width="0.5076%" height="15" fill="rgb(211,96,35)" fg:x="9" fg:w="1"/><text x="4.8185%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.51%)</title><rect x="4.5685%" y="853" width="0.5076%" height="15" fill="rgb(253,215,40)" fg:x="9" fg:w="1"/><text x="4.8185%" y="863.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.51%)</title><rect x="5.0761%" y="1045" width="0.5076%" height="15" fill="rgb(211,81,21)" fg:x="10" fg:w="1"/><text x="5.3261%" y="1055.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.51%)</title><rect x="5.0761%" y="1029" width="0.5076%" height="15" fill="rgb(208,190,38)" fg:x="10" fg:w="1"/><text x="5.3261%" y="1039.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.51%)</title><rect x="5.0761%" y="1013" width="0.5076%" height="15" fill="rgb(235,213,38)" fg:x="10" fg:w="1"/><text x="5.3261%" y="1023.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.51%)</title><rect x="5.0761%" y="997" width="0.5076%" height="15" fill="rgb(237,122,38)" fg:x="10" fg:w="1"/><text x="5.3261%" y="1007.50"></text></g><g><title>demoparser::parsing::collect_data::&lt;impl demoparser::parsing::parser::Demo&gt;::collect_player_data (2 samples, 1.02%)</title><rect x="5.0761%" y="1125" width="1.0152%" height="15" fill="rgb(244,218,35)" fg:x="10" fg:w="2"/><text x="5.3261%" y="1135.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (2 samples, 1.02%)</title><rect x="5.0761%" y="1109" width="1.0152%" height="15" fill="rgb(240,68,47)" fg:x="10" fg:w="2"/><text x="5.3261%" y="1119.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (2 samples, 1.02%)</title><rect x="5.0761%" y="1093" width="1.0152%" height="15" fill="rgb(210,16,53)" fg:x="10" fg:w="2"/><text x="5.3261%" y="1103.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2 samples, 1.02%)</title><rect x="5.0761%" y="1077" width="1.0152%" height="15" fill="rgb(235,124,12)" fg:x="10" fg:w="2"/><text x="5.3261%" y="1087.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 1.02%)</title><rect x="5.0761%" y="1061" width="1.0152%" height="15" fill="rgb(224,169,11)" fg:x="10" fg:w="2"/><text x="5.3261%" y="1071.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.51%)</title><rect x="5.5838%" y="1045" width="0.5076%" height="15" fill="rgb(250,166,2)" fg:x="11" fg:w="1"/><text x="5.8338%" y="1055.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.51%)</title><rect x="5.5838%" y="1029" width="0.5076%" height="15" fill="rgb(242,216,29)" fg:x="11" fg:w="1"/><text x="5.8338%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.51%)</title><rect x="5.5838%" y="1013" width="0.5076%" height="15" fill="rgb(230,116,27)" fg:x="11" fg:w="1"/><text x="5.8338%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.51%)</title><rect x="5.5838%" y="997" width="0.5076%" height="15" fill="rgb(228,99,48)" fg:x="11" fg:w="1"/><text x="5.8338%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.51%)</title><rect x="6.0914%" y="1045" width="0.5076%" height="15" fill="rgb(253,11,6)" fg:x="12" fg:w="1"/><text x="6.3414%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.51%)</title><rect x="6.0914%" y="1029" width="0.5076%" height="15" fill="rgb(247,143,39)" fg:x="12" fg:w="1"/><text x="6.3414%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.51%)</title><rect x="6.0914%" y="1013" width="0.5076%" height="15" fill="rgb(236,97,10)" fg:x="12" fg:w="1"/><text x="6.3414%" y="1023.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.51%)</title><rect x="6.0914%" y="997" width="0.5076%" height="15" fill="rgb(233,208,19)" fg:x="12" fg:w="1"/><text x="6.3414%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.51%)</title><rect x="6.0914%" y="981" width="0.5076%" height="15" fill="rgb(216,164,2)" fg:x="12" fg:w="1"/><text x="6.3414%" y="991.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.51%)</title><rect x="6.0914%" y="965" width="0.5076%" height="15" fill="rgb(220,129,5)" fg:x="12" fg:w="1"/><text x="6.3414%" y="975.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.51%)</title><rect x="6.0914%" y="949" width="0.5076%" height="15" fill="rgb(242,17,10)" fg:x="12" fg:w="1"/><text x="6.3414%" y="959.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.51%)</title><rect x="6.0914%" y="933" width="0.5076%" height="15" fill="rgb(242,107,0)" fg:x="12" fg:w="1"/><text x="6.3414%" y="943.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.51%)</title><rect x="6.0914%" y="917" width="0.5076%" height="15" fill="rgb(251,28,31)" fg:x="12" fg:w="1"/><text x="6.3414%" y="927.50"></text></g><g><title>_mi_memcpy (1 samples, 0.51%)</title><rect x="6.0914%" y="901" width="0.5076%" height="15" fill="rgb(233,223,10)" fg:x="12" fg:w="1"/><text x="6.3414%" y="911.50"></text></g><g><title>memcpy (1 samples, 0.51%)</title><rect x="6.0914%" y="885" width="0.5076%" height="15" fill="rgb(215,21,27)" fg:x="12" fg:w="1"/><text x="6.3414%" y="895.50"></text></g><g><title>[libc.so.6] (1 samples, 0.51%)</title><rect x="6.0914%" y="869" width="0.5076%" height="15" fill="rgb(232,23,21)" fg:x="12" fg:w="1"/><text x="6.3414%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="6.0914%" y="853" width="0.5076%" height="15" fill="rgb(244,5,23)" fg:x="12" fg:w="1"/><text x="6.3414%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="6.0914%" y="837" width="0.5076%" height="15" fill="rgb(226,81,46)" fg:x="12" fg:w="1"/><text x="6.3414%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="6.0914%" y="821" width="0.5076%" height="15" fill="rgb(247,70,30)" fg:x="12" fg:w="1"/><text x="6.3414%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="6.0914%" y="805" width="0.5076%" height="15" fill="rgb(212,68,19)" fg:x="12" fg:w="1"/><text x="6.3414%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="6.0914%" y="789" width="0.5076%" height="15" fill="rgb(240,187,13)" fg:x="12" fg:w="1"/><text x="6.3414%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="6.0914%" y="773" width="0.5076%" height="15" fill="rgb(223,113,26)" fg:x="12" fg:w="1"/><text x="6.3414%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="6.0914%" y="757" width="0.5076%" height="15" fill="rgb(206,192,2)" fg:x="12" fg:w="1"/><text x="6.3414%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="6.0914%" y="741" width="0.5076%" height="15" fill="rgb(241,108,4)" fg:x="12" fg:w="1"/><text x="6.3414%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="6.0914%" y="725" width="0.5076%" height="15" fill="rgb(247,173,49)" fg:x="12" fg:w="1"/><text x="6.3414%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="6.0914%" y="709" width="0.5076%" height="15" fill="rgb(224,114,35)" fg:x="12" fg:w="1"/><text x="6.3414%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="6.0914%" y="693" width="0.5076%" height="15" fill="rgb(245,159,27)" fg:x="12" fg:w="1"/><text x="6.3414%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.51%)</title><rect x="6.5990%" y="1029" width="0.5076%" height="15" fill="rgb(245,172,44)" fg:x="13" fg:w="1"/><text x="6.8490%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.51%)</title><rect x="6.5990%" y="1013" width="0.5076%" height="15" fill="rgb(236,23,11)" fg:x="13" fg:w="1"/><text x="6.8490%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.51%)</title><rect x="6.5990%" y="997" width="0.5076%" height="15" fill="rgb(205,117,38)" fg:x="13" fg:w="1"/><text x="6.8490%" y="1007.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.51%)</title><rect x="6.5990%" y="981" width="0.5076%" height="15" fill="rgb(237,72,25)" fg:x="13" fg:w="1"/><text x="6.8490%" y="991.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.51%)</title><rect x="6.5990%" y="965" width="0.5076%" height="15" fill="rgb(244,70,9)" fg:x="13" fg:w="1"/><text x="6.8490%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.51%)</title><rect x="6.5990%" y="949" width="0.5076%" height="15" fill="rgb(217,125,39)" fg:x="13" fg:w="1"/><text x="6.8490%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.51%)</title><rect x="6.5990%" y="933" width="0.5076%" height="15" fill="rgb(235,36,10)" fg:x="13" fg:w="1"/><text x="6.8490%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.51%)</title><rect x="6.5990%" y="917" width="0.5076%" height="15" fill="rgb(251,123,47)" fg:x="13" fg:w="1"/><text x="6.8490%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.51%)</title><rect x="6.5990%" y="901" width="0.5076%" height="15" fill="rgb(221,13,13)" fg:x="13" fg:w="1"/><text x="6.8490%" y="911.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.51%)</title><rect x="6.5990%" y="885" width="0.5076%" height="15" fill="rgb(238,131,9)" fg:x="13" fg:w="1"/><text x="6.8490%" y="895.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.51%)</title><rect x="6.5990%" y="869" width="0.5076%" height="15" fill="rgb(211,50,8)" fg:x="13" fg:w="1"/><text x="6.8490%" y="879.50"></text></g><g><title>__rg_alloc (1 samples, 0.51%)</title><rect x="6.5990%" y="853" width="0.5076%" height="15" fill="rgb(245,182,24)" fg:x="13" fg:w="1"/><text x="6.8490%" y="863.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.51%)</title><rect x="6.5990%" y="837" width="0.5076%" height="15" fill="rgb(242,14,37)" fg:x="13" fg:w="1"/><text x="6.8490%" y="847.50"></text></g><g><title>mimalloc::may_use_unaligned_api (1 samples, 0.51%)</title><rect x="6.5990%" y="821" width="0.5076%" height="15" fill="rgb(246,228,12)" fg:x="13" fg:w="1"/><text x="6.8490%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.51%)</title><rect x="7.1066%" y="1029" width="0.5076%" height="15" fill="rgb(213,55,15)" fg:x="14" fg:w="1"/><text x="7.3566%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.51%)</title><rect x="7.1066%" y="1013" width="0.5076%" height="15" fill="rgb(209,9,3)" fg:x="14" fg:w="1"/><text x="7.3566%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.51%)</title><rect x="7.1066%" y="997" width="0.5076%" height="15" fill="rgb(230,59,30)" fg:x="14" fg:w="1"/><text x="7.3566%" y="1007.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.51%)</title><rect x="7.1066%" y="981" width="0.5076%" height="15" fill="rgb(209,121,21)" fg:x="14" fg:w="1"/><text x="7.3566%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.51%)</title><rect x="7.1066%" y="965" width="0.5076%" height="15" fill="rgb(220,109,13)" fg:x="14" fg:w="1"/><text x="7.3566%" y="975.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.51%)</title><rect x="7.1066%" y="949" width="0.5076%" height="15" fill="rgb(232,18,1)" fg:x="14" fg:w="1"/><text x="7.3566%" y="959.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.51%)</title><rect x="7.1066%" y="933" width="0.5076%" height="15" fill="rgb(215,41,42)" fg:x="14" fg:w="1"/><text x="7.3566%" y="943.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.51%)</title><rect x="7.1066%" y="917" width="0.5076%" height="15" fill="rgb(224,123,36)" fg:x="14" fg:w="1"/><text x="7.3566%" y="927.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.51%)</title><rect x="7.1066%" y="901" width="0.5076%" height="15" fill="rgb(240,125,3)" fg:x="14" fg:w="1"/><text x="7.3566%" y="911.50"></text></g><g><title>_mi_memcpy (1 samples, 0.51%)</title><rect x="7.1066%" y="885" width="0.5076%" height="15" fill="rgb(205,98,50)" fg:x="14" fg:w="1"/><text x="7.3566%" y="895.50"></text></g><g><title>memcpy (1 samples, 0.51%)</title><rect x="7.1066%" y="869" width="0.5076%" height="15" fill="rgb(205,185,37)" fg:x="14" fg:w="1"/><text x="7.3566%" y="879.50"></text></g><g><title>[libc.so.6] (1 samples, 0.51%)</title><rect x="7.1066%" y="853" width="0.5076%" height="15" fill="rgb(238,207,15)" fg:x="14" fg:w="1"/><text x="7.3566%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.51%)</title><rect x="7.6142%" y="1013" width="0.5076%" height="15" fill="rgb(213,199,42)" fg:x="15" fg:w="1"/><text x="7.8642%" y="1023.50"></text></g><g><title>core::ptr::write (1 samples, 0.51%)</title><rect x="7.6142%" y="997" width="0.5076%" height="15" fill="rgb(235,201,11)" fg:x="15" fg:w="1"/><text x="7.8642%" y="1007.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_datatable (5 samples, 2.54%)</title><rect x="6.0914%" y="1109" width="2.5381%" height="15" fill="rgb(207,46,11)" fg:x="12" fg:w="5"/><text x="6.3414%" y="1119.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::flatten_dt (5 samples, 2.54%)</title><rect x="6.0914%" y="1093" width="2.5381%" height="15" fill="rgb(241,35,35)" fg:x="12" fg:w="5"/><text x="6.3414%" y="1103.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (5 samples, 2.54%)</title><rect x="6.0914%" y="1077" width="2.5381%" height="15" fill="rgb(243,32,47)" fg:x="12" fg:w="5"/><text x="6.3414%" y="1087.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (5 samples, 2.54%)</title><rect x="6.0914%" y="1061" width="2.5381%" height="15" fill="rgb(247,202,23)" fg:x="12" fg:w="5"/><text x="6.3414%" y="1071.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (4 samples, 2.03%)</title><rect x="6.5990%" y="1045" width="2.0305%" height="15" fill="rgb(219,102,11)" fg:x="13" fg:w="4"/><text x="6.8490%" y="1055.50">d..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (2 samples, 1.02%)</title><rect x="7.6142%" y="1029" width="1.0152%" height="15" fill="rgb(243,110,44)" fg:x="15" fg:w="2"/><text x="7.8642%" y="1039.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (1 samples, 0.51%)</title><rect x="8.1218%" y="1013" width="0.5076%" height="15" fill="rgb(222,74,54)" fg:x="16" fg:w="1"/><text x="8.3718%" y="1023.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (1 samples, 0.51%)</title><rect x="8.1218%" y="997" width="0.5076%" height="15" fill="rgb(216,99,12)" fg:x="16" fg:w="1"/><text x="8.3718%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.51%)</title><rect x="8.1218%" y="981" width="0.5076%" height="15" fill="rgb(226,22,26)" fg:x="16" fg:w="1"/><text x="8.3718%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.51%)</title><rect x="8.1218%" y="965" width="0.5076%" height="15" fill="rgb(217,163,10)" fg:x="16" fg:w="1"/><text x="8.3718%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.51%)</title><rect x="8.1218%" y="949" width="0.5076%" height="15" fill="rgb(213,25,53)" fg:x="16" fg:w="1"/><text x="8.3718%" y="959.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.51%)</title><rect x="8.1218%" y="933" width="0.5076%" height="15" fill="rgb(252,105,26)" fg:x="16" fg:w="1"/><text x="8.3718%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.51%)</title><rect x="8.1218%" y="917" width="0.5076%" height="15" fill="rgb(220,39,43)" fg:x="16" fg:w="1"/><text x="8.3718%" y="927.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.51%)</title><rect x="8.1218%" y="901" width="0.5076%" height="15" fill="rgb(229,68,48)" fg:x="16" fg:w="1"/><text x="8.3718%" y="911.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.51%)</title><rect x="8.1218%" y="885" width="0.5076%" height="15" fill="rgb(252,8,32)" fg:x="16" fg:w="1"/><text x="8.3718%" y="895.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.51%)</title><rect x="8.1218%" y="869" width="0.5076%" height="15" fill="rgb(223,20,43)" fg:x="16" fg:w="1"/><text x="8.3718%" y="879.50"></text></g><g><title>_mi_usable_size (1 samples, 0.51%)</title><rect x="8.1218%" y="853" width="0.5076%" height="15" fill="rgb(229,81,49)" fg:x="16" fg:w="1"/><text x="8.3718%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 1.02%)</title><rect x="10.6599%" y="1077" width="1.0152%" height="15" fill="rgb(236,28,36)" fg:x="21" fg:w="2"/><text x="10.9099%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 1.02%)</title><rect x="10.6599%" y="1061" width="1.0152%" height="15" fill="rgb(249,185,26)" fg:x="21" fg:w="2"/><text x="10.9099%" y="1071.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.51%)</title><rect x="11.6751%" y="1061" width="0.5076%" height="15" fill="rgb(249,174,33)" fg:x="23" fg:w="1"/><text x="11.9251%" y="1071.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::TryFrom&lt;u32&gt; for u16&gt;::try_from (1 samples, 0.51%)</title><rect x="11.6751%" y="1045" width="0.5076%" height="15" fill="rgb(233,201,37)" fg:x="23" fg:w="1"/><text x="11.9251%" y="1055.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 1.02%)</title><rect x="12.1827%" y="997" width="1.0152%" height="15" fill="rgb(221,78,26)" fg:x="24" fg:w="2"/><text x="12.4327%" y="1007.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 1.02%)</title><rect x="12.1827%" y="981" width="1.0152%" height="15" fill="rgb(250,127,30)" fg:x="24" fg:w="2"/><text x="12.4327%" y="991.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (2 samples, 1.02%)</title><rect x="12.1827%" y="965" width="1.0152%" height="15" fill="rgb(230,49,44)" fg:x="24" fg:w="2"/><text x="12.4327%" y="975.50"></text></g><g><title>ahash::operations::folded_multiply (2 samples, 1.02%)</title><rect x="12.1827%" y="949" width="1.0152%" height="15" fill="rgb(229,67,23)" fg:x="24" fg:w="2"/><text x="12.4327%" y="959.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.51%)</title><rect x="12.6904%" y="933" width="0.5076%" height="15" fill="rgb(249,83,47)" fg:x="25" fg:w="1"/><text x="12.9404%" y="943.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.51%)</title><rect x="13.7056%" y="949" width="0.5076%" height="15" fill="rgb(215,43,3)" fg:x="27" fg:w="1"/><text x="13.9556%" y="959.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.51%)</title><rect x="13.7056%" y="933" width="0.5076%" height="15" fill="rgb(238,154,13)" fg:x="27" fg:w="1"/><text x="13.9556%" y="943.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.51%)</title><rect x="14.2132%" y="949" width="0.5076%" height="15" fill="rgb(219,56,2)" fg:x="28" fg:w="1"/><text x="14.4632%" y="959.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.51%)</title><rect x="14.2132%" y="933" width="0.5076%" height="15" fill="rgb(233,0,4)" fg:x="28" fg:w="1"/><text x="14.4632%" y="943.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (3 samples, 1.52%)</title><rect x="14.7208%" y="949" width="1.5228%" height="15" fill="rgb(235,30,7)" fg:x="29" fg:w="3"/><text x="14.9708%" y="959.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (9 samples, 4.57%)</title><rect x="12.1827%" y="1061" width="4.5685%" height="15" fill="rgb(250,79,13)" fg:x="24" fg:w="9"/><text x="12.4327%" y="1071.50">&lt;std:..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (9 samples, 4.57%)</title><rect x="12.1827%" y="1045" width="4.5685%" height="15" fill="rgb(211,146,34)" fg:x="24" fg:w="9"/><text x="12.4327%" y="1055.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (9 samples, 4.57%)</title><rect x="12.1827%" y="1029" width="4.5685%" height="15" fill="rgb(228,22,38)" fg:x="24" fg:w="9"/><text x="12.4327%" y="1039.50">hashb..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (9 samples, 4.57%)</title><rect x="12.1827%" y="1013" width="4.5685%" height="15" fill="rgb(235,168,5)" fg:x="24" fg:w="9"/><text x="12.4327%" y="1023.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (7 samples, 3.55%)</title><rect x="13.1980%" y="997" width="3.5533%" height="15" fill="rgb(221,155,16)" fg:x="26" fg:w="7"/><text x="13.4480%" y="1007.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7 samples, 3.55%)</title><rect x="13.1980%" y="981" width="3.5533%" height="15" fill="rgb(215,215,53)" fg:x="26" fg:w="7"/><text x="13.4480%" y="991.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (7 samples, 3.55%)</title><rect x="13.1980%" y="965" width="3.5533%" height="15" fill="rgb(223,4,10)" fg:x="26" fg:w="7"/><text x="13.4480%" y="975.50">hash..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.51%)</title><rect x="16.2437%" y="949" width="0.5076%" height="15" fill="rgb(234,103,6)" fg:x="32" fg:w="1"/><text x="16.4937%" y="959.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.51%)</title><rect x="16.2437%" y="933" width="0.5076%" height="15" fill="rgb(227,97,0)" fg:x="32" fg:w="1"/><text x="16.4937%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.51%)</title><rect x="19.7970%" y="1029" width="0.5076%" height="15" fill="rgb(234,150,53)" fg:x="39" fg:w="1"/><text x="20.0470%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 2.03%)</title><rect x="19.7970%" y="1045" width="2.0305%" height="15" fill="rgb(228,201,54)" fg:x="39" fg:w="4"/><text x="20.0470%" y="1055.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 1.52%)</title><rect x="20.3046%" y="1029" width="1.5228%" height="15" fill="rgb(222,22,37)" fg:x="40" fg:w="3"/><text x="20.5546%" y="1039.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 1.52%)</title><rect x="20.3046%" y="1013" width="1.5228%" height="15" fill="rgb(237,53,32)" fg:x="40" fg:w="3"/><text x="20.5546%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 1.52%)</title><rect x="21.8274%" y="1045" width="1.5228%" height="15" fill="rgb(233,25,53)" fg:x="43" fg:w="3"/><text x="22.0774%" y="1055.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 1.52%)</title><rect x="21.8274%" y="1029" width="1.5228%" height="15" fill="rgb(210,40,34)" fg:x="43" fg:w="3"/><text x="22.0774%" y="1039.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 1.52%)</title><rect x="21.8274%" y="1013" width="1.5228%" height="15" fill="rgb(241,220,44)" fg:x="43" fg:w="3"/><text x="22.0774%" y="1023.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.51%)</title><rect x="23.3503%" y="1045" width="0.5076%" height="15" fill="rgb(235,28,35)" fg:x="46" fg:w="1"/><text x="23.6003%" y="1055.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.51%)</title><rect x="23.3503%" y="1029" width="0.5076%" height="15" fill="rgb(210,56,17)" fg:x="46" fg:w="1"/><text x="23.6003%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::PropData&gt; (2 samples, 1.02%)</title><rect x="23.8579%" y="1045" width="1.0152%" height="15" fill="rgb(224,130,29)" fg:x="47" fg:w="2"/><text x="24.1079%" y="1055.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (1 samples, 0.51%)</title><rect x="24.8731%" y="1045" width="0.5076%" height="15" fill="rgb(235,212,8)" fg:x="49" fg:w="1"/><text x="25.1231%" y="1055.50"></text></g><g><title>core::str::pattern::Pattern::is_contained_in (1 samples, 0.51%)</title><rect x="24.8731%" y="1029" width="0.5076%" height="15" fill="rgb(223,33,50)" fg:x="49" fg:w="1"/><text x="25.1231%" y="1039.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (1 samples, 0.51%)</title><rect x="24.8731%" y="1013" width="0.5076%" height="15" fill="rgb(219,149,13)" fg:x="49" fg:w="1"/><text x="25.1231%" y="1023.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.51%)</title><rect x="24.8731%" y="997" width="0.5076%" height="15" fill="rgb(250,156,29)" fg:x="49" fg:w="1"/><text x="25.1231%" y="1007.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.51%)</title><rect x="24.8731%" y="981" width="0.5076%" height="15" fill="rgb(216,193,19)" fg:x="49" fg:w="1"/><text x="25.1231%" y="991.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.51%)</title><rect x="24.8731%" y="965" width="0.5076%" height="15" fill="rgb(216,135,14)" fg:x="49" fg:w="1"/><text x="25.1231%" y="975.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.51%)</title><rect x="24.8731%" y="949" width="0.5076%" height="15" fill="rgb(241,47,5)" fg:x="49" fg:w="1"/><text x="25.1231%" y="959.50"></text></g><g><title>[libc.so.6] (1 samples, 0.51%)</title><rect x="24.8731%" y="933" width="0.5076%" height="15" fill="rgb(233,42,35)" fg:x="49" fg:w="1"/><text x="25.1231%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.51%)</title><rect x="25.3807%" y="1013" width="0.5076%" height="15" fill="rgb(231,13,6)" fg:x="50" fg:w="1"/><text x="25.6307%" y="1023.50"></text></g><g><title>demoparser::parsing::entities::is_wanted_prop_name (2 samples, 1.02%)</title><rect x="25.3807%" y="1045" width="1.0152%" height="15" fill="rgb(207,181,40)" fg:x="50" fg:w="2"/><text x="25.6307%" y="1055.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 1.02%)</title><rect x="25.3807%" y="1029" width="1.0152%" height="15" fill="rgb(254,173,49)" fg:x="50" fg:w="2"/><text x="25.6307%" y="1039.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.51%)</title><rect x="25.8883%" y="1013" width="0.5076%" height="15" fill="rgb(221,1,38)" fg:x="51" fg:w="1"/><text x="26.1383%" y="1023.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.51%)</title><rect x="25.8883%" y="997" width="0.5076%" height="15" fill="rgb(206,124,46)" fg:x="51" fg:w="1"/><text x="26.1383%" y="1007.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.51%)</title><rect x="25.8883%" y="981" width="0.5076%" height="15" fill="rgb(249,21,11)" fg:x="51" fg:w="1"/><text x="26.1383%" y="991.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.51%)</title><rect x="25.8883%" y="965" width="0.5076%" height="15" fill="rgb(222,201,40)" fg:x="51" fg:w="1"/><text x="26.1383%" y="975.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_array (1 samples, 0.51%)</title><rect x="42.1320%" y="1029" width="0.5076%" height="15" fill="rgb(235,61,29)" fg:x="83" fg:w="1"/><text x="42.3820%" y="1039.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.51%)</title><rect x="42.1320%" y="1013" width="0.5076%" height="15" fill="rgb(219,207,3)" fg:x="83" fg:w="1"/><text x="42.3820%" y="1023.50"></text></g><g><title>protobuf::text_format::print::fmt (1 samples, 0.51%)</title><rect x="42.1320%" y="997" width="0.5076%" height="15" fill="rgb(222,56,46)" fg:x="83" fg:w="1"/><text x="42.3820%" y="1007.50"></text></g><g><title>protobuf::text_format::print::print_to_string_internal (1 samples, 0.51%)</title><rect x="42.1320%" y="981" width="0.5076%" height="15" fill="rgb(239,76,54)" fg:x="83" fg:w="1"/><text x="42.3820%" y="991.50"></text></g><g><title>protobuf::text_format::print::print_to_internal (1 samples, 0.51%)</title><rect x="42.1320%" y="965" width="0.5076%" height="15" fill="rgb(231,124,27)" fg:x="83" fg:w="1"/><text x="42.3820%" y="975.50"></text></g><g><title>&lt;M as protobuf::message_dyn::MessageDyn&gt;::descriptor_dyn (1 samples, 0.51%)</title><rect x="42.1320%" y="949" width="0.5076%" height="15" fill="rgb(249,195,6)" fg:x="83" fg:w="1"/><text x="42.3820%" y="959.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as protobuf::message_full::MessageFull&gt;::descriptor (1 samples, 0.51%)</title><rect x="42.1320%" y="933" width="0.5076%" height="15" fill="rgb(237,174,47)" fg:x="83" fg:w="1"/><text x="42.3820%" y="943.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.51%)</title><rect x="42.1320%" y="917" width="0.5076%" height="15" fill="rgb(206,201,31)" fg:x="83" fg:w="1"/><text x="42.3820%" y="927.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.51%)</title><rect x="42.1320%" y="901" width="0.5076%" height="15" fill="rgb(231,57,52)" fg:x="83" fg:w="1"/><text x="42.3820%" y="911.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.51%)</title><rect x="42.1320%" y="885" width="0.5076%" height="15" fill="rgb(248,177,22)" fg:x="83" fg:w="1"/><text x="42.3820%" y="895.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.51%)</title><rect x="42.1320%" y="869" width="0.5076%" height="15" fill="rgb(215,211,37)" fg:x="83" fg:w="1"/><text x="42.3820%" y="879.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.51%)</title><rect x="42.1320%" y="853" width="0.5076%" height="15" fill="rgb(241,128,51)" fg:x="83" fg:w="1"/><text x="42.3820%" y="863.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.51%)</title><rect x="42.1320%" y="837" width="0.5076%" height="15" fill="rgb(227,165,31)" fg:x="83" fg:w="1"/><text x="42.3820%" y="847.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.51%)</title><rect x="42.1320%" y="821" width="0.5076%" height="15" fill="rgb(228,167,24)" fg:x="83" fg:w="1"/><text x="42.3820%" y="831.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.51%)</title><rect x="42.1320%" y="805" width="0.5076%" height="15" fill="rgb(228,143,12)" fg:x="83" fg:w="1"/><text x="42.3820%" y="815.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as protobuf::message_full::MessageFull&gt;::descriptor::{{closure}} (1 samples, 0.51%)</title><rect x="42.1320%" y="789" width="0.5076%" height="15" fill="rgb(249,149,8)" fg:x="83" fg:w="1"/><text x="42.3820%" y="799.50"></text></g><g><title>csgoproto::netmessages::file_descriptor (1 samples, 0.51%)</title><rect x="42.1320%" y="773" width="0.5076%" height="15" fill="rgb(243,35,44)" fg:x="83" fg:w="1"/><text x="42.3820%" y="783.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.51%)</title><rect x="42.1320%" y="757" width="0.5076%" height="15" fill="rgb(246,89,9)" fg:x="83" fg:w="1"/><text x="42.3820%" y="767.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.51%)</title><rect x="42.1320%" y="741" width="0.5076%" height="15" fill="rgb(233,213,13)" fg:x="83" fg:w="1"/><text x="42.3820%" y="751.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.51%)</title><rect x="42.1320%" y="725" width="0.5076%" height="15" fill="rgb(233,141,41)" fg:x="83" fg:w="1"/><text x="42.3820%" y="735.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.51%)</title><rect x="42.1320%" y="709" width="0.5076%" height="15" fill="rgb(239,167,4)" fg:x="83" fg:w="1"/><text x="42.3820%" y="719.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.51%)</title><rect x="42.1320%" y="693" width="0.5076%" height="15" fill="rgb(209,217,16)" fg:x="83" fg:w="1"/><text x="42.3820%" y="703.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.51%)</title><rect x="42.1320%" y="677" width="0.5076%" height="15" fill="rgb(219,88,35)" fg:x="83" fg:w="1"/><text x="42.3820%" y="687.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.51%)</title><rect x="42.1320%" y="661" width="0.5076%" height="15" fill="rgb(220,193,23)" fg:x="83" fg:w="1"/><text x="42.3820%" y="671.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.51%)</title><rect x="42.1320%" y="645" width="0.5076%" height="15" fill="rgb(230,90,52)" fg:x="83" fg:w="1"/><text x="42.3820%" y="655.50"></text></g><g><title>csgoproto::netmessages::file_descriptor::{{closure}} (1 samples, 0.51%)</title><rect x="42.1320%" y="629" width="0.5076%" height="15" fill="rgb(252,106,19)" fg:x="83" fg:w="1"/><text x="42.3820%" y="639.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.51%)</title><rect x="42.1320%" y="613" width="0.5076%" height="15" fill="rgb(206,74,20)" fg:x="83" fg:w="1"/><text x="42.3820%" y="623.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.51%)</title><rect x="42.1320%" y="597" width="0.5076%" height="15" fill="rgb(230,138,44)" fg:x="83" fg:w="1"/><text x="42.3820%" y="607.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.51%)</title><rect x="42.1320%" y="581" width="0.5076%" height="15" fill="rgb(235,182,43)" fg:x="83" fg:w="1"/><text x="42.3820%" y="591.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.51%)</title><rect x="42.1320%" y="565" width="0.5076%" height="15" fill="rgb(242,16,51)" fg:x="83" fg:w="1"/><text x="42.3820%" y="575.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.51%)</title><rect x="42.1320%" y="549" width="0.5076%" height="15" fill="rgb(248,9,4)" fg:x="83" fg:w="1"/><text x="42.3820%" y="559.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.51%)</title><rect x="42.1320%" y="533" width="0.5076%" height="15" fill="rgb(210,31,22)" fg:x="83" fg:w="1"/><text x="42.3820%" y="543.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.51%)</title><rect x="42.1320%" y="517" width="0.5076%" height="15" fill="rgb(239,54,39)" fg:x="83" fg:w="1"/><text x="42.3820%" y="527.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.51%)</title><rect x="42.1320%" y="501" width="0.5076%" height="15" fill="rgb(230,99,41)" fg:x="83" fg:w="1"/><text x="42.3820%" y="511.50"></text></g><g><title>csgoproto::netmessages::file_descriptor::{{closure}}::{{closure}} (1 samples, 0.51%)</title><rect x="42.1320%" y="485" width="0.5076%" height="15" fill="rgb(253,106,12)" fg:x="83" fg:w="1"/><text x="42.3820%" y="495.50"></text></g><g><title>csgoproto::netmessages::file_descriptor_proto (1 samples, 0.51%)</title><rect x="42.1320%" y="469" width="0.5076%" height="15" fill="rgb(213,46,41)" fg:x="83" fg:w="1"/><text x="42.3820%" y="479.50"></text></g><g><title>protobuf::lazy::Lazy&lt;T&gt;::get (1 samples, 0.51%)</title><rect x="42.1320%" y="453" width="0.5076%" height="15" fill="rgb(215,133,35)" fg:x="83" fg:w="1"/><text x="42.3820%" y="463.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.51%)</title><rect x="42.1320%" y="437" width="0.5076%" height="15" fill="rgb(213,28,5)" fg:x="83" fg:w="1"/><text x="42.3820%" y="447.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.51%)</title><rect x="42.1320%" y="421" width="0.5076%" height="15" fill="rgb(215,77,49)" fg:x="83" fg:w="1"/><text x="42.3820%" y="431.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.51%)</title><rect x="42.1320%" y="405" width="0.5076%" height="15" fill="rgb(248,100,22)" fg:x="83" fg:w="1"/><text x="42.3820%" y="415.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.51%)</title><rect x="42.1320%" y="389" width="0.5076%" height="15" fill="rgb(208,67,9)" fg:x="83" fg:w="1"/><text x="42.3820%" y="399.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.51%)</title><rect x="42.1320%" y="373" width="0.5076%" height="15" fill="rgb(219,133,21)" fg:x="83" fg:w="1"/><text x="42.3820%" y="383.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.51%)</title><rect x="42.1320%" y="357" width="0.5076%" height="15" fill="rgb(246,46,29)" fg:x="83" fg:w="1"/><text x="42.3820%" y="367.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.51%)</title><rect x="42.1320%" y="341" width="0.5076%" height="15" fill="rgb(246,185,52)" fg:x="83" fg:w="1"/><text x="42.3820%" y="351.50"></text></g><g><title>csgoproto::netmessages::file_descriptor_proto::{{closure}} (1 samples, 0.51%)</title><rect x="42.1320%" y="325" width="0.5076%" height="15" fill="rgb(252,136,11)" fg:x="83" fg:w="1"/><text x="42.3820%" y="335.50"></text></g><g><title>protobuf::message::Message::parse_from_bytes (1 samples, 0.51%)</title><rect x="42.1320%" y="309" width="0.5076%" height="15" fill="rgb(219,138,53)" fg:x="83" fg:w="1"/><text x="42.3820%" y="319.50"></text></g><g><title>protobuf::message::Message::parse_from (1 samples, 0.51%)</title><rect x="42.1320%" y="293" width="0.5076%" height="15" fill="rgb(211,51,23)" fg:x="83" fg:w="1"/><text x="42.3820%" y="303.50"></text></g><g><title>&lt;protobuf::descriptor::FileDescriptorProto as protobuf::message::Message&gt;::merge_from (1 samples, 0.51%)</title><rect x="42.1320%" y="277" width="0.5076%" height="15" fill="rgb(247,221,28)" fg:x="83" fg:w="1"/><text x="42.3820%" y="287.50"></text></g><g><title>protobuf::rt::message::read_singular_message_into_field (1 samples, 0.51%)</title><rect x="42.1320%" y="261" width="0.5076%" height="15" fill="rgb(251,222,45)" fg:x="83" fg:w="1"/><text x="42.3820%" y="271.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (1 samples, 0.51%)</title><rect x="42.1320%" y="245" width="0.5076%" height="15" fill="rgb(217,162,53)" fg:x="83" fg:w="1"/><text x="42.3820%" y="255.50"></text></g><g><title>&lt;protobuf::descriptor::SourceCodeInfo as protobuf::message::Message&gt;::merge_from (1 samples, 0.51%)</title><rect x="42.1320%" y="229" width="0.5076%" height="15" fill="rgb(229,93,14)" fg:x="83" fg:w="1"/><text x="42.3820%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.51%)</title><rect x="42.1320%" y="213" width="0.5076%" height="15" fill="rgb(209,67,49)" fg:x="83" fg:w="1"/><text x="42.3820%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.51%)</title><rect x="42.1320%" y="197" width="0.5076%" height="15" fill="rgb(213,87,29)" fg:x="83" fg:w="1"/><text x="42.3820%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.51%)</title><rect x="42.1320%" y="181" width="0.5076%" height="15" fill="rgb(205,151,52)" fg:x="83" fg:w="1"/><text x="42.3820%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.51%)</title><rect x="42.1320%" y="165" width="0.5076%" height="15" fill="rgb(253,215,39)" fg:x="83" fg:w="1"/><text x="42.3820%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.51%)</title><rect x="42.1320%" y="149" width="0.5076%" height="15" fill="rgb(221,220,41)" fg:x="83" fg:w="1"/><text x="42.3820%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.51%)</title><rect x="42.1320%" y="133" width="0.5076%" height="15" fill="rgb(218,133,21)" fg:x="83" fg:w="1"/><text x="42.3820%" y="143.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.51%)</title><rect x="42.1320%" y="117" width="0.5076%" height="15" fill="rgb(221,193,43)" fg:x="83" fg:w="1"/><text x="42.3820%" y="127.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.51%)</title><rect x="42.1320%" y="101" width="0.5076%" height="15" fill="rgb(240,128,52)" fg:x="83" fg:w="1"/><text x="42.3820%" y="111.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.51%)</title><rect x="42.1320%" y="85" width="0.5076%" height="15" fill="rgb(253,114,12)" fg:x="83" fg:w="1"/><text x="42.3820%" y="95.50"></text></g><g><title>_mi_memcpy (1 samples, 0.51%)</title><rect x="42.1320%" y="69" width="0.5076%" height="15" fill="rgb(215,223,47)" fg:x="83" fg:w="1"/><text x="42.3820%" y="79.50"></text></g><g><title>memcpy (1 samples, 0.51%)</title><rect x="42.1320%" y="53" width="0.5076%" height="15" fill="rgb(248,225,23)" fg:x="83" fg:w="1"/><text x="42.3820%" y="63.50"></text></g><g><title>[libc.so.6] (1 samples, 0.51%)</title><rect x="42.1320%" y="37" width="0.5076%" height="15" fill="rgb(250,108,0)" fg:x="83" fg:w="1"/><text x="42.3820%" y="47.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_special_float (7 samples, 3.55%)</title><rect x="46.1929%" y="1013" width="3.5533%" height="15" fill="rgb(228,208,7)" fg:x="91" fg:w="7"/><text x="46.4429%" y="1023.50">demo..</text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_f32 (4 samples, 2.03%)</title><rect x="47.7157%" y="997" width="2.0305%" height="15" fill="rgb(244,45,10)" fg:x="94" fg:w="4"/><text x="47.9657%" y="1007.50">&lt;..</text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_u32 (4 samples, 2.03%)</title><rect x="47.7157%" y="981" width="2.0305%" height="15" fill="rgb(207,125,25)" fg:x="94" fg:w="4"/><text x="47.9657%" y="991.50">&lt;..</text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (4 samples, 2.03%)</title><rect x="47.7157%" y="965" width="2.0305%" height="15" fill="rgb(210,195,18)" fg:x="94" fg:w="4"/><text x="47.9657%" y="975.50">&lt;..</text></g><g><title>bitter::LittleEndianReader::read_bits_eof (1 samples, 0.51%)</title><rect x="49.2386%" y="949" width="0.5076%" height="15" fill="rgb(249,80,12)" fg:x="97" fg:w="1"/><text x="49.4886%" y="959.50"></text></g><g><title>bitter::LittleEndianReader::refill_eof (1 samples, 0.51%)</title><rect x="49.2386%" y="933" width="0.5076%" height="15" fill="rgb(221,65,9)" fg:x="97" fg:w="1"/><text x="49.4886%" y="943.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_float (16 samples, 8.12%)</title><rect x="42.6396%" y="1029" width="8.1218%" height="15" fill="rgb(235,49,36)" fg:x="84" fg:w="16"/><text x="42.8896%" y="1039.50">demoparser:..</text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_nbits (2 samples, 1.02%)</title><rect x="49.7462%" y="1013" width="1.0152%" height="15" fill="rgb(225,32,20)" fg:x="98" fg:w="2"/><text x="49.9962%" y="1023.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (2 samples, 1.02%)</title><rect x="49.7462%" y="997" width="1.0152%" height="15" fill="rgb(215,141,46)" fg:x="98" fg:w="2"/><text x="49.9962%" y="1007.50"></text></g><g><title>bitter::LittleEndianReader::refill (1 samples, 0.51%)</title><rect x="50.2538%" y="981" width="0.5076%" height="15" fill="rgb(250,160,47)" fg:x="99" fg:w="1"/><text x="50.5038%" y="991.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_int (4 samples, 2.03%)</title><rect x="50.7614%" y="1029" width="2.0305%" height="15" fill="rgb(216,222,40)" fg:x="100" fg:w="4"/><text x="51.0114%" y="1039.50">d..</text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_nbits (3 samples, 1.52%)</title><rect x="51.2690%" y="1013" width="1.5228%" height="15" fill="rgb(234,217,39)" fg:x="101" fg:w="3"/><text x="51.5190%" y="1023.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (2 samples, 1.02%)</title><rect x="51.7766%" y="997" width="1.0152%" height="15" fill="rgb(207,178,40)" fg:x="102" fg:w="2"/><text x="52.0266%" y="1007.50"></text></g><g><title>bitter::LittleEndianReader::has_data_for_unaligned_loads (1 samples, 0.51%)</title><rect x="52.2843%" y="981" width="0.5076%" height="15" fill="rgb(221,136,13)" fg:x="103" fg:w="1"/><text x="52.5343%" y="991.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_bit_cell_coord (1 samples, 0.51%)</title><rect x="54.3147%" y="981" width="0.5076%" height="15" fill="rgb(249,199,10)" fg:x="107" fg:w="1"/><text x="54.5647%" y="991.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_nbits (1 samples, 0.51%)</title><rect x="54.3147%" y="965" width="0.5076%" height="15" fill="rgb(249,222,13)" fg:x="107" fg:w="1"/><text x="54.5647%" y="975.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.51%)</title><rect x="54.3147%" y="949" width="0.5076%" height="15" fill="rgb(244,185,38)" fg:x="107" fg:w="1"/><text x="54.5647%" y="959.50"></text></g><g><title>bitter::LittleEndianReader::has_data_for_unaligned_loads (1 samples, 0.51%)</title><rect x="54.3147%" y="933" width="0.5076%" height="15" fill="rgb(236,202,9)" fg:x="107" fg:w="1"/><text x="54.5647%" y="943.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_special_float (2 samples, 1.02%)</title><rect x="54.3147%" y="997" width="1.0152%" height="15" fill="rgb(250,229,37)" fg:x="107" fg:w="2"/><text x="54.5647%" y="1007.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_bit_coord (1 samples, 0.51%)</title><rect x="54.8223%" y="981" width="0.5076%" height="15" fill="rgb(206,174,23)" fg:x="108" fg:w="1"/><text x="55.0723%" y="991.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_vec (7 samples, 3.55%)</title><rect x="52.7919%" y="1029" width="3.5533%" height="15" fill="rgb(211,33,43)" fg:x="104" fg:w="7"/><text x="53.0419%" y="1039.50">demo..</text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_float (7 samples, 3.55%)</title><rect x="52.7919%" y="1013" width="3.5533%" height="15" fill="rgb(245,58,50)" fg:x="104" fg:w="7"/><text x="53.0419%" y="1023.50">demo..</text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_nbits (2 samples, 1.02%)</title><rect x="55.3299%" y="997" width="1.0152%" height="15" fill="rgb(244,68,36)" fg:x="109" fg:w="2"/><text x="55.5799%" y="1007.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (2 samples, 1.02%)</title><rect x="55.3299%" y="981" width="1.0152%" height="15" fill="rgb(232,229,15)" fg:x="109" fg:w="2"/><text x="55.5799%" y="991.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode (65 samples, 32.99%)</title><rect x="26.3959%" y="1045" width="32.9949%" height="15" fill="rgb(254,30,23)" fg:x="52" fg:w="65"/><text x="26.6459%" y="1055.50">demoparser::parsing::read_bits_skip::MyBitreader::dec..</text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_vec_xy (6 samples, 3.05%)</title><rect x="56.3452%" y="1029" width="3.0457%" height="15" fill="rgb(235,160,14)" fg:x="111" fg:w="6"/><text x="56.5952%" y="1039.50">dem..</text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_float (6 samples, 3.05%)</title><rect x="56.3452%" y="1013" width="3.0457%" height="15" fill="rgb(212,155,44)" fg:x="111" fg:w="6"/><text x="56.5952%" y="1023.50">dem..</text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_special_float (4 samples, 2.03%)</title><rect x="57.3604%" y="997" width="2.0305%" height="15" fill="rgb(226,2,50)" fg:x="113" fg:w="4"/><text x="57.6104%" y="1007.50">d..</text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_f32 (3 samples, 1.52%)</title><rect x="57.8680%" y="981" width="1.5228%" height="15" fill="rgb(234,177,6)" fg:x="114" fg:w="3"/><text x="58.1180%" y="991.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_u32 (3 samples, 1.52%)</title><rect x="57.8680%" y="965" width="1.5228%" height="15" fill="rgb(217,24,9)" fg:x="114" fg:w="3"/><text x="58.1180%" y="975.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (3 samples, 1.52%)</title><rect x="57.8680%" y="949" width="1.5228%" height="15" fill="rgb(220,13,46)" fg:x="114" fg:w="3"/><text x="58.1180%" y="959.50"></text></g><g><title>bitter::LittleEndianReader::refill (3 samples, 1.52%)</title><rect x="57.8680%" y="933" width="1.5228%" height="15" fill="rgb(239,221,27)" fg:x="114" fg:w="3"/><text x="58.1180%" y="943.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub (1 samples, 0.51%)</title><rect x="58.8832%" y="917" width="0.5076%" height="15" fill="rgb(222,198,25)" fg:x="116" fg:w="1"/><text x="59.1332%" y="927.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.51%)</title><rect x="58.8832%" y="901" width="0.5076%" height="15" fill="rgb(211,99,13)" fg:x="116" fg:w="1"/><text x="59.1332%" y="911.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bit (1 samples, 0.51%)</title><rect x="59.3909%" y="1029" width="0.5076%" height="15" fill="rgb(232,111,31)" fg:x="117" fg:w="1"/><text x="59.6409%" y="1039.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.51%)</title><rect x="59.3909%" y="1013" width="0.5076%" height="15" fill="rgb(245,82,37)" fg:x="117" fg:w="1"/><text x="59.6409%" y="1023.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_boolie (2 samples, 1.02%)</title><rect x="59.3909%" y="1045" width="1.0152%" height="15" fill="rgb(227,149,46)" fg:x="117" fg:w="2"/><text x="59.6409%" y="1055.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.51%)</title><rect x="59.8985%" y="1029" width="0.5076%" height="15" fill="rgb(218,36,50)" fg:x="118" fg:w="1"/><text x="60.1485%" y="1039.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bit (3 samples, 1.52%)</title><rect x="60.4061%" y="1013" width="1.5228%" height="15" fill="rgb(226,80,48)" fg:x="119" fg:w="3"/><text x="60.6561%" y="1023.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (3 samples, 1.52%)</title><rect x="60.4061%" y="997" width="1.5228%" height="15" fill="rgb(238,224,15)" fg:x="119" fg:w="3"/><text x="60.6561%" y="1007.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_boolie (9 samples, 4.57%)</title><rect x="60.4061%" y="1029" width="4.5685%" height="15" fill="rgb(241,136,10)" fg:x="119" fg:w="9"/><text x="60.6561%" y="1039.50">demop..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (6 samples, 3.05%)</title><rect x="61.9289%" y="1013" width="3.0457%" height="15" fill="rgb(208,32,45)" fg:x="122" fg:w="6"/><text x="62.1789%" y="1023.50">cor..</text></g><g><title>[unknown] (6 samples, 3.05%)</title><rect x="61.9289%" y="997" width="3.0457%" height="15" fill="rgb(207,135,9)" fg:x="122" fg:w="6"/><text x="62.1789%" y="1007.50">[un..</text></g><g><title>[unknown] (6 samples, 3.05%)</title><rect x="61.9289%" y="981" width="3.0457%" height="15" fill="rgb(206,86,44)" fg:x="122" fg:w="6"/><text x="62.1789%" y="991.50">[un..</text></g><g><title>[unknown] (6 samples, 3.05%)</title><rect x="61.9289%" y="965" width="3.0457%" height="15" fill="rgb(245,177,15)" fg:x="122" fg:w="6"/><text x="62.1789%" y="975.50">[un..</text></g><g><title>[unknown] (6 samples, 3.05%)</title><rect x="61.9289%" y="949" width="3.0457%" height="15" fill="rgb(206,64,50)" fg:x="122" fg:w="6"/><text x="62.1789%" y="959.50">[un..</text></g><g><title>[unknown] (6 samples, 3.05%)</title><rect x="61.9289%" y="933" width="3.0457%" height="15" fill="rgb(234,36,40)" fg:x="122" fg:w="6"/><text x="62.1789%" y="943.50">[un..</text></g><g><title>[unknown] (6 samples, 3.05%)</title><rect x="61.9289%" y="917" width="3.0457%" height="15" fill="rgb(213,64,8)" fg:x="122" fg:w="6"/><text x="62.1789%" y="927.50">[un..</text></g><g><title>[unknown] (6 samples, 3.05%)</title><rect x="61.9289%" y="901" width="3.0457%" height="15" fill="rgb(210,75,36)" fg:x="122" fg:w="6"/><text x="62.1789%" y="911.50">[un..</text></g><g><title>[unknown] (6 samples, 3.05%)</title><rect x="61.9289%" y="885" width="3.0457%" height="15" fill="rgb(229,88,21)" fg:x="122" fg:w="6"/><text x="62.1789%" y="895.50">[un..</text></g><g><title>[unknown] (6 samples, 3.05%)</title><rect x="61.9289%" y="869" width="3.0457%" height="15" fill="rgb(252,204,47)" fg:x="122" fg:w="6"/><text x="62.1789%" y="879.50">[un..</text></g><g><title>demoparser::parsing::entities::update_entity (119 samples, 60.41%)</title><rect x="11.6751%" y="1077" width="60.4061%" height="15" fill="rgb(208,77,27)" fg:x="23" fg:w="119"/><text x="11.9251%" y="1087.50">demoparser::parsing::entities::update_entity</text></g><g><title>demoparser::parsing::entities::parse_ent_props (109 samples, 55.33%)</title><rect x="16.7513%" y="1061" width="55.3299%" height="15" fill="rgb(221,76,26)" fg:x="33" fg:w="109"/><text x="17.0013%" y="1071.50">demoparser::parsing::entities::parse_ent_props</text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_inx (23 samples, 11.68%)</title><rect x="60.4061%" y="1045" width="11.6751%" height="15" fill="rgb(225,139,18)" fg:x="119" fg:w="23"/><text x="60.6561%" y="1055.50">demoparser::parsi..</text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_nbits (14 samples, 7.11%)</title><rect x="64.9746%" y="1029" width="7.1066%" height="15" fill="rgb(230,137,11)" fg:x="128" fg:w="14"/><text x="65.2246%" y="1039.50">demoparser..</text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (14 samples, 7.11%)</title><rect x="64.9746%" y="1013" width="7.1066%" height="15" fill="rgb(212,28,1)" fg:x="128" fg:w="14"/><text x="65.2246%" y="1023.50">&lt;bitter::L..</text></g><g><title>bitter::LittleEndianReader::refill (3 samples, 1.52%)</title><rect x="70.5584%" y="997" width="1.5228%" height="15" fill="rgb(248,164,17)" fg:x="139" fg:w="3"/><text x="70.8084%" y="1007.50"></text></g><g><title>demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_packet_entities (124 samples, 62.94%)</title><rect x="9.6447%" y="1093" width="62.9442%" height="15" fill="rgb(222,171,42)" fg:x="19" fg:w="124"/><text x="9.8947%" y="1103.50">demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_packet_entities</text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_u_bit_var (1 samples, 0.51%)</title><rect x="72.0812%" y="1077" width="0.5076%" height="15" fill="rgb(243,84,45)" fg:x="142" fg:w="1"/><text x="72.3312%" y="1087.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_nbits (1 samples, 0.51%)</title><rect x="72.0812%" y="1061" width="0.5076%" height="15" fill="rgb(252,49,23)" fg:x="142" fg:w="1"/><text x="72.3312%" y="1071.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.51%)</title><rect x="72.0812%" y="1045" width="0.5076%" height="15" fill="rgb(215,19,7)" fg:x="142" fg:w="1"/><text x="72.3312%" y="1055.50"></text></g><g><title>bitter::LittleEndianReader::refill (1 samples, 0.51%)</title><rect x="72.0812%" y="1029" width="0.5076%" height="15" fill="rgb(238,81,41)" fg:x="142" fg:w="1"/><text x="72.3312%" y="1039.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1 samples, 0.51%)</title><rect x="72.5888%" y="1077" width="0.5076%" height="15" fill="rgb(210,199,37)" fg:x="143" fg:w="1"/><text x="72.8388%" y="1087.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.51%)</title><rect x="72.5888%" y="1061" width="0.5076%" height="15" fill="rgb(244,192,49)" fg:x="143" fg:w="1"/><text x="72.8388%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.51%)</title><rect x="72.5888%" y="1045" width="0.5076%" height="15" fill="rgb(226,211,11)" fg:x="143" fg:w="1"/><text x="72.8388%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.51%)</title><rect x="72.5888%" y="1029" width="0.5076%" height="15" fill="rgb(236,162,54)" fg:x="143" fg:w="1"/><text x="72.8388%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.51%)</title><rect x="72.5888%" y="1013" width="0.5076%" height="15" fill="rgb(220,229,9)" fg:x="143" fg:w="1"/><text x="72.8388%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.51%)</title><rect x="72.5888%" y="997" width="0.5076%" height="15" fill="rgb(250,87,22)" fg:x="143" fg:w="1"/><text x="72.8388%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.51%)</title><rect x="72.5888%" y="981" width="0.5076%" height="15" fill="rgb(239,43,17)" fg:x="143" fg:w="1"/><text x="72.8388%" y="991.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.51%)</title><rect x="72.5888%" y="965" width="0.5076%" height="15" fill="rgb(231,177,25)" fg:x="143" fg:w="1"/><text x="72.8388%" y="975.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.51%)</title><rect x="72.5888%" y="949" width="0.5076%" height="15" fill="rgb(219,179,1)" fg:x="143" fg:w="1"/><text x="72.8388%" y="959.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.51%)</title><rect x="73.0964%" y="837" width="0.5076%" height="15" fill="rgb(238,219,53)" fg:x="144" fg:w="1"/><text x="73.3464%" y="847.50"></text></g><g><title>mi_find_page (1 samples, 0.51%)</title><rect x="73.0964%" y="821" width="0.5076%" height="15" fill="rgb(232,167,36)" fg:x="144" fg:w="1"/><text x="73.3464%" y="831.50"></text></g><g><title>mi_find_free_page (1 samples, 0.51%)</title><rect x="73.0964%" y="805" width="0.5076%" height="15" fill="rgb(244,19,51)" fg:x="144" fg:w="1"/><text x="73.3464%" y="815.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 0.51%)</title><rect x="73.0964%" y="789" width="0.5076%" height="15" fill="rgb(224,6,22)" fg:x="144" fg:w="1"/><text x="73.3464%" y="799.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.51%)</title><rect x="73.0964%" y="773" width="0.5076%" height="15" fill="rgb(224,145,5)" fg:x="144" fg:w="1"/><text x="73.3464%" y="783.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.51%)</title><rect x="73.0964%" y="757" width="0.5076%" height="15" fill="rgb(234,130,49)" fg:x="144" fg:w="1"/><text x="73.3464%" y="767.50"></text></g><g><title>mi_page_free_list_extend (1 samples, 0.51%)</title><rect x="73.0964%" y="741" width="0.5076%" height="15" fill="rgb(254,6,2)" fg:x="144" fg:w="1"/><text x="73.3464%" y="751.50"></text></g><g><title>mi_block_set_next (1 samples, 0.51%)</title><rect x="73.0964%" y="725" width="0.5076%" height="15" fill="rgb(208,96,46)" fg:x="144" fg:w="1"/><text x="73.3464%" y="735.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.51%)</title><rect x="73.0964%" y="709" width="0.5076%" height="15" fill="rgb(239,3,39)" fg:x="144" fg:w="1"/><text x="73.3464%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="73.0964%" y="693" width="0.5076%" height="15" fill="rgb(233,210,1)" fg:x="144" fg:w="1"/><text x="73.3464%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="73.0964%" y="677" width="0.5076%" height="15" fill="rgb(244,137,37)" fg:x="144" fg:w="1"/><text x="73.3464%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="73.0964%" y="661" width="0.5076%" height="15" fill="rgb(240,136,2)" fg:x="144" fg:w="1"/><text x="73.3464%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="73.0964%" y="645" width="0.5076%" height="15" fill="rgb(239,18,37)" fg:x="144" fg:w="1"/><text x="73.3464%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="73.0964%" y="629" width="0.5076%" height="15" fill="rgb(218,185,22)" fg:x="144" fg:w="1"/><text x="73.3464%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="73.0964%" y="613" width="0.5076%" height="15" fill="rgb(225,218,4)" fg:x="144" fg:w="1"/><text x="73.3464%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="73.0964%" y="597" width="0.5076%" height="15" fill="rgb(230,182,32)" fg:x="144" fg:w="1"/><text x="73.3464%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="73.0964%" y="581" width="0.5076%" height="15" fill="rgb(242,56,43)" fg:x="144" fg:w="1"/><text x="73.3464%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="73.0964%" y="565" width="0.5076%" height="15" fill="rgb(233,99,24)" fg:x="144" fg:w="1"/><text x="73.3464%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="73.0964%" y="549" width="0.5076%" height="15" fill="rgb(234,209,42)" fg:x="144" fg:w="1"/><text x="73.3464%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="73.0964%" y="533" width="0.5076%" height="15" fill="rgb(227,7,12)" fg:x="144" fg:w="1"/><text x="73.3464%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="73.0964%" y="517" width="0.5076%" height="15" fill="rgb(245,203,43)" fg:x="144" fg:w="1"/><text x="73.3464%" y="527.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (2 samples, 1.02%)</title><rect x="73.0964%" y="1061" width="1.0152%" height="15" fill="rgb(238,205,33)" fg:x="144" fg:w="2"/><text x="73.3464%" y="1071.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (2 samples, 1.02%)</title><rect x="73.0964%" y="1045" width="1.0152%" height="15" fill="rgb(231,56,7)" fg:x="144" fg:w="2"/><text x="73.3464%" y="1055.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 1.02%)</title><rect x="73.0964%" y="1029" width="1.0152%" height="15" fill="rgb(244,186,29)" fg:x="144" fg:w="2"/><text x="73.3464%" y="1039.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 1.02%)</title><rect x="73.0964%" y="1013" width="1.0152%" height="15" fill="rgb(234,111,31)" fg:x="144" fg:w="2"/><text x="73.3464%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 1.02%)</title><rect x="73.0964%" y="997" width="1.0152%" height="15" fill="rgb(241,149,10)" fg:x="144" fg:w="2"/><text x="73.3464%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 1.02%)</title><rect x="73.0964%" y="981" width="1.0152%" height="15" fill="rgb(249,206,44)" fg:x="144" fg:w="2"/><text x="73.3464%" y="991.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 1.02%)</title><rect x="73.0964%" y="965" width="1.0152%" height="15" fill="rgb(251,153,30)" fg:x="144" fg:w="2"/><text x="73.3464%" y="975.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 1.02%)</title><rect x="73.0964%" y="949" width="1.0152%" height="15" fill="rgb(239,152,38)" fg:x="144" fg:w="2"/><text x="73.3464%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 1.02%)</title><rect x="73.0964%" y="933" width="1.0152%" height="15" fill="rgb(249,139,47)" fg:x="144" fg:w="2"/><text x="73.3464%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 1.02%)</title><rect x="73.0964%" y="917" width="1.0152%" height="15" fill="rgb(244,64,35)" fg:x="144" fg:w="2"/><text x="73.3464%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 1.02%)</title><rect x="73.0964%" y="901" width="1.0152%" height="15" fill="rgb(216,46,15)" fg:x="144" fg:w="2"/><text x="73.3464%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 1.02%)</title><rect x="73.0964%" y="885" width="1.0152%" height="15" fill="rgb(250,74,19)" fg:x="144" fg:w="2"/><text x="73.3464%" y="895.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 1.02%)</title><rect x="73.0964%" y="869" width="1.0152%" height="15" fill="rgb(249,42,33)" fg:x="144" fg:w="2"/><text x="73.3464%" y="879.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 1.02%)</title><rect x="73.0964%" y="853" width="1.0152%" height="15" fill="rgb(242,149,17)" fg:x="144" fg:w="2"/><text x="73.3464%" y="863.50"></text></g><g><title>mi_malloc (1 samples, 0.51%)</title><rect x="73.6041%" y="837" width="0.5076%" height="15" fill="rgb(244,29,21)" fg:x="145" fg:w="1"/><text x="73.8541%" y="847.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.51%)</title><rect x="73.6041%" y="821" width="0.5076%" height="15" fill="rgb(220,130,37)" fg:x="145" fg:w="1"/><text x="73.8541%" y="831.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.51%)</title><rect x="73.6041%" y="805" width="0.5076%" height="15" fill="rgb(211,67,2)" fg:x="145" fg:w="1"/><text x="73.8541%" y="815.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.51%)</title><rect x="73.6041%" y="789" width="0.5076%" height="15" fill="rgb(235,68,52)" fg:x="145" fg:w="1"/><text x="73.8541%" y="799.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.51%)</title><rect x="74.1117%" y="869" width="0.5076%" height="15" fill="rgb(246,142,3)" fg:x="146" fg:w="1"/><text x="74.3617%" y="879.50"></text></g><g><title>mi_find_page (1 samples, 0.51%)</title><rect x="74.1117%" y="853" width="0.5076%" height="15" fill="rgb(241,25,7)" fg:x="146" fg:w="1"/><text x="74.3617%" y="863.50"></text></g><g><title>mi_find_free_page (1 samples, 0.51%)</title><rect x="74.1117%" y="837" width="0.5076%" height="15" fill="rgb(242,119,39)" fg:x="146" fg:w="1"/><text x="74.3617%" y="847.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 0.51%)</title><rect x="74.1117%" y="821" width="0.5076%" height="15" fill="rgb(241,98,45)" fg:x="146" fg:w="1"/><text x="74.3617%" y="831.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.51%)</title><rect x="74.1117%" y="805" width="0.5076%" height="15" fill="rgb(254,28,30)" fg:x="146" fg:w="1"/><text x="74.3617%" y="815.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.51%)</title><rect x="74.1117%" y="789" width="0.5076%" height="15" fill="rgb(241,142,54)" fg:x="146" fg:w="1"/><text x="74.3617%" y="799.50"></text></g><g><title>mi_page_free_list_extend (1 samples, 0.51%)</title><rect x="74.1117%" y="773" width="0.5076%" height="15" fill="rgb(222,85,15)" fg:x="146" fg:w="1"/><text x="74.3617%" y="783.50"></text></g><g><title>mi_block_set_next (1 samples, 0.51%)</title><rect x="74.1117%" y="757" width="0.5076%" height="15" fill="rgb(210,85,47)" fg:x="146" fg:w="1"/><text x="74.3617%" y="767.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.51%)</title><rect x="74.1117%" y="741" width="0.5076%" height="15" fill="rgb(224,206,25)" fg:x="146" fg:w="1"/><text x="74.3617%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="74.1117%" y="725" width="0.5076%" height="15" fill="rgb(243,201,19)" fg:x="146" fg:w="1"/><text x="74.3617%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="74.1117%" y="709" width="0.5076%" height="15" fill="rgb(236,59,4)" fg:x="146" fg:w="1"/><text x="74.3617%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="74.1117%" y="693" width="0.5076%" height="15" fill="rgb(254,179,45)" fg:x="146" fg:w="1"/><text x="74.3617%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="74.1117%" y="677" width="0.5076%" height="15" fill="rgb(226,14,10)" fg:x="146" fg:w="1"/><text x="74.3617%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="74.1117%" y="661" width="0.5076%" height="15" fill="rgb(244,27,41)" fg:x="146" fg:w="1"/><text x="74.3617%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="74.1117%" y="645" width="0.5076%" height="15" fill="rgb(235,35,32)" fg:x="146" fg:w="1"/><text x="74.3617%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="74.1117%" y="629" width="0.5076%" height="15" fill="rgb(218,68,31)" fg:x="146" fg:w="1"/><text x="74.3617%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="74.1117%" y="613" width="0.5076%" height="15" fill="rgb(207,120,37)" fg:x="146" fg:w="1"/><text x="74.3617%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="74.1117%" y="597" width="0.5076%" height="15" fill="rgb(227,98,0)" fg:x="146" fg:w="1"/><text x="74.3617%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="74.1117%" y="581" width="0.5076%" height="15" fill="rgb(207,7,3)" fg:x="146" fg:w="1"/><text x="74.3617%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="74.1117%" y="565" width="0.5076%" height="15" fill="rgb(206,98,19)" fg:x="146" fg:w="1"/><text x="74.3617%" y="575.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 1.02%)</title><rect x="74.1117%" y="1061" width="1.0152%" height="15" fill="rgb(217,5,26)" fg:x="146" fg:w="2"/><text x="74.3617%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 1.02%)</title><rect x="74.1117%" y="1045" width="1.0152%" height="15" fill="rgb(235,190,38)" fg:x="146" fg:w="2"/><text x="74.3617%" y="1055.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 1.02%)</title><rect x="74.1117%" y="1029" width="1.0152%" height="15" fill="rgb(247,86,24)" fg:x="146" fg:w="2"/><text x="74.3617%" y="1039.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 1.02%)</title><rect x="74.1117%" y="1013" width="1.0152%" height="15" fill="rgb(205,101,16)" fg:x="146" fg:w="2"/><text x="74.3617%" y="1023.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 1.02%)</title><rect x="74.1117%" y="997" width="1.0152%" height="15" fill="rgb(246,168,33)" fg:x="146" fg:w="2"/><text x="74.3617%" y="1007.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 1.02%)</title><rect x="74.1117%" y="981" width="1.0152%" height="15" fill="rgb(231,114,1)" fg:x="146" fg:w="2"/><text x="74.3617%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 1.02%)</title><rect x="74.1117%" y="965" width="1.0152%" height="15" fill="rgb(207,184,53)" fg:x="146" fg:w="2"/><text x="74.3617%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 1.02%)</title><rect x="74.1117%" y="949" width="1.0152%" height="15" fill="rgb(224,95,51)" fg:x="146" fg:w="2"/><text x="74.3617%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 1.02%)</title><rect x="74.1117%" y="933" width="1.0152%" height="15" fill="rgb(212,188,45)" fg:x="146" fg:w="2"/><text x="74.3617%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 1.02%)</title><rect x="74.1117%" y="917" width="1.0152%" height="15" fill="rgb(223,154,38)" fg:x="146" fg:w="2"/><text x="74.3617%" y="927.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 1.02%)</title><rect x="74.1117%" y="901" width="1.0152%" height="15" fill="rgb(251,22,52)" fg:x="146" fg:w="2"/><text x="74.3617%" y="911.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 1.02%)</title><rect x="74.1117%" y="885" width="1.0152%" height="15" fill="rgb(229,209,22)" fg:x="146" fg:w="2"/><text x="74.3617%" y="895.50"></text></g><g><title>mi_malloc (1 samples, 0.51%)</title><rect x="74.6193%" y="869" width="0.5076%" height="15" fill="rgb(234,138,34)" fg:x="147" fg:w="1"/><text x="74.8693%" y="879.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.51%)</title><rect x="74.6193%" y="853" width="0.5076%" height="15" fill="rgb(212,95,11)" fg:x="147" fg:w="1"/><text x="74.8693%" y="863.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.51%)</title><rect x="74.6193%" y="837" width="0.5076%" height="15" fill="rgb(240,179,47)" fg:x="147" fg:w="1"/><text x="74.8693%" y="847.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.51%)</title><rect x="74.6193%" y="821" width="0.5076%" height="15" fill="rgb(240,163,11)" fg:x="147" fg:w="1"/><text x="74.8693%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 1.02%)</title><rect x="75.1269%" y="1061" width="1.0152%" height="15" fill="rgb(236,37,12)" fg:x="148" fg:w="2"/><text x="75.3769%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 1.02%)</title><rect x="75.1269%" y="1045" width="1.0152%" height="15" fill="rgb(232,164,16)" fg:x="148" fg:w="2"/><text x="75.3769%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 1.02%)</title><rect x="75.1269%" y="1029" width="1.0152%" height="15" fill="rgb(244,205,15)" fg:x="148" fg:w="2"/><text x="75.3769%" y="1039.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 1.02%)</title><rect x="75.1269%" y="1013" width="1.0152%" height="15" fill="rgb(223,117,47)" fg:x="148" fg:w="2"/><text x="75.3769%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 1.02%)</title><rect x="75.1269%" y="997" width="1.0152%" height="15" fill="rgb(244,107,35)" fg:x="148" fg:w="2"/><text x="75.3769%" y="1007.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 1.02%)</title><rect x="75.1269%" y="981" width="1.0152%" height="15" fill="rgb(205,140,8)" fg:x="148" fg:w="2"/><text x="75.3769%" y="991.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 1.02%)</title><rect x="75.1269%" y="965" width="1.0152%" height="15" fill="rgb(228,84,46)" fg:x="148" fg:w="2"/><text x="75.3769%" y="975.50"></text></g><g><title>_mi_heap_realloc_zero (2 samples, 1.02%)</title><rect x="75.1269%" y="949" width="1.0152%" height="15" fill="rgb(254,188,9)" fg:x="148" fg:w="2"/><text x="75.3769%" y="959.50"></text></g><g><title>mi_heap_malloc (2 samples, 1.02%)</title><rect x="75.1269%" y="933" width="1.0152%" height="15" fill="rgb(206,112,54)" fg:x="148" fg:w="2"/><text x="75.3769%" y="943.50"></text></g><g><title>_mi_malloc_generic (2 samples, 1.02%)</title><rect x="75.1269%" y="917" width="1.0152%" height="15" fill="rgb(216,84,49)" fg:x="148" fg:w="2"/><text x="75.3769%" y="927.50"></text></g><g><title>mi_find_page (2 samples, 1.02%)</title><rect x="75.1269%" y="901" width="1.0152%" height="15" fill="rgb(214,194,35)" fg:x="148" fg:w="2"/><text x="75.3769%" y="911.50"></text></g><g><title>mi_find_free_page (2 samples, 1.02%)</title><rect x="75.1269%" y="885" width="1.0152%" height="15" fill="rgb(249,28,3)" fg:x="148" fg:w="2"/><text x="75.3769%" y="895.50"></text></g><g><title>mi_page_queue_find_free_ex (2 samples, 1.02%)</title><rect x="75.1269%" y="869" width="1.0152%" height="15" fill="rgb(222,56,52)" fg:x="148" fg:w="2"/><text x="75.3769%" y="879.50"></text></g><g><title>mi_page_extend_free (2 samples, 1.02%)</title><rect x="75.1269%" y="853" width="1.0152%" height="15" fill="rgb(245,217,50)" fg:x="148" fg:w="2"/><text x="75.3769%" y="863.50"></text></g><g><title>mi_page_extend_free (2 samples, 1.02%)</title><rect x="75.1269%" y="837" width="1.0152%" height="15" fill="rgb(213,201,24)" fg:x="148" fg:w="2"/><text x="75.3769%" y="847.50"></text></g><g><title>mi_page_free_list_extend (2 samples, 1.02%)</title><rect x="75.1269%" y="821" width="1.0152%" height="15" fill="rgb(248,116,28)" fg:x="148" fg:w="2"/><text x="75.3769%" y="831.50"></text></g><g><title>mi_block_set_next (2 samples, 1.02%)</title><rect x="75.1269%" y="805" width="1.0152%" height="15" fill="rgb(219,72,43)" fg:x="148" fg:w="2"/><text x="75.3769%" y="815.50"></text></g><g><title>mi_block_set_nextx (2 samples, 1.02%)</title><rect x="75.1269%" y="789" width="1.0152%" height="15" fill="rgb(209,138,14)" fg:x="148" fg:w="2"/><text x="75.3769%" y="799.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="75.1269%" y="773" width="1.0152%" height="15" fill="rgb(222,18,33)" fg:x="148" fg:w="2"/><text x="75.3769%" y="783.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="75.1269%" y="757" width="1.0152%" height="15" fill="rgb(213,199,7)" fg:x="148" fg:w="2"/><text x="75.3769%" y="767.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="75.1269%" y="741" width="1.0152%" height="15" fill="rgb(250,110,10)" fg:x="148" fg:w="2"/><text x="75.3769%" y="751.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="75.1269%" y="725" width="1.0152%" height="15" fill="rgb(248,123,6)" fg:x="148" fg:w="2"/><text x="75.3769%" y="735.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="75.1269%" y="709" width="1.0152%" height="15" fill="rgb(206,91,31)" fg:x="148" fg:w="2"/><text x="75.3769%" y="719.50"></text></g><g><title>csgoproto::netmessages::csvcmsg_game_event_list::Key_t::name (2 samples, 1.02%)</title><rect x="76.1421%" y="1061" width="1.0152%" height="15" fill="rgb(211,154,13)" fg:x="150" fg:w="2"/><text x="76.3921%" y="1071.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 1.02%)</title><rect x="76.1421%" y="1045" width="1.0152%" height="15" fill="rgb(225,148,7)" fg:x="150" fg:w="2"/><text x="76.3921%" y="1055.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (1 samples, 0.51%)</title><rect x="77.1574%" y="1045" width="0.5076%" height="15" fill="rgb(220,160,43)" fg:x="152" fg:w="1"/><text x="77.4074%" y="1055.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (1 samples, 0.51%)</title><rect x="77.1574%" y="1029" width="0.5076%" height="15" fill="rgb(213,52,39)" fg:x="152" fg:w="1"/><text x="77.4074%" y="1039.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.51%)</title><rect x="77.1574%" y="1013" width="0.5076%" height="15" fill="rgb(243,137,7)" fg:x="152" fg:w="1"/><text x="77.4074%" y="1023.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.51%)</title><rect x="77.6650%" y="1045" width="0.5076%" height="15" fill="rgb(230,79,13)" fg:x="153" fg:w="1"/><text x="77.9150%" y="1055.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (1 samples, 0.51%)</title><rect x="77.6650%" y="1029" width="0.5076%" height="15" fill="rgb(247,105,23)" fg:x="153" fg:w="1"/><text x="77.9150%" y="1039.50"></text></g><g><title>demoparser::parsing::game_events::gen_name_val_pairs (12 samples, 6.09%)</title><rect x="73.0964%" y="1077" width="6.0914%" height="15" fill="rgb(223,179,41)" fg:x="144" fg:w="12"/><text x="73.3464%" y="1087.50">demopars..</text></g><g><title>demoparser::parsing::game_events::parse_key_steam_name (4 samples, 2.03%)</title><rect x="77.1574%" y="1061" width="2.0305%" height="15" fill="rgb(218,9,34)" fg:x="152" fg:w="4"/><text x="77.4074%" y="1071.50">d..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 1.02%)</title><rect x="78.1726%" y="1045" width="1.0152%" height="15" fill="rgb(222,106,8)" fg:x="154" fg:w="2"/><text x="78.4226%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 1.02%)</title><rect x="78.1726%" y="1029" width="1.0152%" height="15" fill="rgb(211,220,0)" fg:x="154" fg:w="2"/><text x="78.4226%" y="1039.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 1.02%)</title><rect x="78.1726%" y="1013" width="1.0152%" height="15" fill="rgb(229,52,16)" fg:x="154" fg:w="2"/><text x="78.4226%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 1.02%)</title><rect x="78.1726%" y="997" width="1.0152%" height="15" fill="rgb(212,155,18)" fg:x="154" fg:w="2"/><text x="78.4226%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 1.02%)</title><rect x="78.1726%" y="981" width="1.0152%" height="15" fill="rgb(242,21,14)" fg:x="154" fg:w="2"/><text x="78.4226%" y="991.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 1.02%)</title><rect x="78.1726%" y="965" width="1.0152%" height="15" fill="rgb(222,19,48)" fg:x="154" fg:w="2"/><text x="78.4226%" y="975.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.51%)</title><rect x="78.6802%" y="949" width="0.5076%" height="15" fill="rgb(232,45,27)" fg:x="155" fg:w="1"/><text x="78.9302%" y="959.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.51%)</title><rect x="78.6802%" y="933" width="0.5076%" height="15" fill="rgb(249,103,42)" fg:x="155" fg:w="1"/><text x="78.9302%" y="943.50"></text></g><g><title>demoparser::parsing::game_events::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_game_events (14 samples, 7.11%)</title><rect x="72.5888%" y="1093" width="7.1066%" height="15" fill="rgb(246,81,33)" fg:x="143" fg:w="14"/><text x="72.8388%" y="1103.50">demoparser..</text></g><g><title>mi_malloc (1 samples, 0.51%)</title><rect x="79.1878%" y="1077" width="0.5076%" height="15" fill="rgb(252,33,42)" fg:x="156" fg:w="1"/><text x="79.4378%" y="1087.50"></text></g><g><title>mi_get_default_heap (1 samples, 0.51%)</title><rect x="79.1878%" y="1061" width="0.5076%" height="15" fill="rgb(209,212,41)" fg:x="156" fg:w="1"/><text x="79.4378%" y="1071.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_varint (2 samples, 1.02%)</title><rect x="79.6954%" y="1093" width="1.0152%" height="15" fill="rgb(207,154,6)" fg:x="157" fg:w="2"/><text x="79.9454%" y="1103.50"></text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Demo&gt;::create_string_table (2 samples, 1.02%)</title><rect x="80.7107%" y="1093" width="1.0152%" height="15" fill="rgb(223,64,47)" fg:x="159" fg:w="2"/><text x="80.9607%" y="1103.50"></text></g><g><title>&lt;demoparser::parsing::stringtables::StringTable as core::clone::Clone&gt;::clone (2 samples, 1.02%)</title><rect x="80.7107%" y="1077" width="1.0152%" height="15" fill="rgb(211,161,38)" fg:x="159" fg:w="2"/><text x="80.9607%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 1.02%)</title><rect x="80.7107%" y="1061" width="1.0152%" height="15" fill="rgb(219,138,40)" fg:x="159" fg:w="2"/><text x="80.9607%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 1.02%)</title><rect x="80.7107%" y="1045" width="1.0152%" height="15" fill="rgb(241,228,46)" fg:x="159" fg:w="2"/><text x="80.9607%" y="1055.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 1.02%)</title><rect x="80.7107%" y="1029" width="1.0152%" height="15" fill="rgb(223,209,38)" fg:x="159" fg:w="2"/><text x="80.9607%" y="1039.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 1.02%)</title><rect x="80.7107%" y="1013" width="1.0152%" height="15" fill="rgb(236,164,45)" fg:x="159" fg:w="2"/><text x="80.9607%" y="1023.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (2 samples, 1.02%)</title><rect x="80.7107%" y="997" width="1.0152%" height="15" fill="rgb(231,15,5)" fg:x="159" fg:w="2"/><text x="80.9607%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="80.7107%" y="981" width="1.0152%" height="15" fill="rgb(252,35,15)" fg:x="159" fg:w="2"/><text x="80.9607%" y="991.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="80.7107%" y="965" width="1.0152%" height="15" fill="rgb(248,181,18)" fg:x="159" fg:w="2"/><text x="80.9607%" y="975.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="80.7107%" y="949" width="1.0152%" height="15" fill="rgb(233,39,42)" fg:x="159" fg:w="2"/><text x="80.9607%" y="959.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="80.7107%" y="933" width="1.0152%" height="15" fill="rgb(238,110,33)" fg:x="159" fg:w="2"/><text x="80.9607%" y="943.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="80.7107%" y="917" width="1.0152%" height="15" fill="rgb(233,195,10)" fg:x="159" fg:w="2"/><text x="80.9607%" y="927.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="80.7107%" y="901" width="1.0152%" height="15" fill="rgb(254,105,3)" fg:x="159" fg:w="2"/><text x="80.9607%" y="911.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="80.7107%" y="885" width="1.0152%" height="15" fill="rgb(221,225,9)" fg:x="159" fg:w="2"/><text x="80.9607%" y="895.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="80.7107%" y="869" width="1.0152%" height="15" fill="rgb(224,227,45)" fg:x="159" fg:w="2"/><text x="80.9607%" y="879.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="80.7107%" y="853" width="1.0152%" height="15" fill="rgb(229,198,43)" fg:x="159" fg:w="2"/><text x="80.9607%" y="863.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="80.7107%" y="837" width="1.0152%" height="15" fill="rgb(206,209,35)" fg:x="159" fg:w="2"/><text x="80.9607%" y="847.50"></text></g><g><title>[unknown] (2 samples, 1.02%)</title><rect x="80.7107%" y="821" width="1.0152%" height="15" fill="rgb(245,195,53)" fg:x="159" fg:w="2"/><text x="80.9607%" y="831.50"></text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Demo&gt;::update_string_table_msg (1 samples, 0.51%)</title><rect x="81.7259%" y="1093" width="0.5076%" height="15" fill="rgb(240,92,26)" fg:x="161" fg:w="1"/><text x="81.9759%" y="1103.50"></text></g><g><title>mi_free (1 samples, 0.51%)</title><rect x="81.7259%" y="1077" width="0.5076%" height="15" fill="rgb(207,40,23)" fg:x="161" fg:w="1"/><text x="81.9759%" y="1087.50"></text></g><g><title>&lt;protobuf::coded_input_stream::buf_read_iter::BufReadIter as core::ops::drop::Drop&gt;::drop (1 samples, 0.51%)</title><rect x="82.2335%" y="1077" width="0.5076%" height="15" fill="rgb(223,111,35)" fg:x="162" fg:w="1"/><text x="82.4835%" y="1087.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::check_eof (2 samples, 1.02%)</title><rect x="82.7411%" y="1077" width="1.0152%" height="15" fill="rgb(229,147,28)" fg:x="163" fg:w="2"/><text x="82.9911%" y="1087.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::eof (2 samples, 1.02%)</title><rect x="82.7411%" y="1061" width="1.0152%" height="15" fill="rgb(211,29,28)" fg:x="163" fg:w="2"/><text x="82.9911%" y="1071.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::eof (2 samples, 1.02%)</title><rect x="82.7411%" y="1045" width="1.0152%" height="15" fill="rgb(228,72,33)" fg:x="163" fg:w="2"/><text x="82.9911%" y="1055.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::fill_buf (2 samples, 1.02%)</title><rect x="82.7411%" y="1029" width="1.0152%" height="15" fill="rgb(205,214,31)" fg:x="163" fg:w="2"/><text x="82.9911%" y="1039.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::fill_buf_slow (2 samples, 1.02%)</title><rect x="82.7411%" y="1013" width="1.0152%" height="15" fill="rgb(224,111,15)" fg:x="163" fg:w="2"/><text x="82.9911%" y="1023.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::from_bytes (1 samples, 0.51%)</title><rect x="83.7563%" y="1077" width="0.5076%" height="15" fill="rgb(253,21,26)" fg:x="165" fg:w="1"/><text x="84.0063%" y="1087.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::from_byte_slice (1 samples, 0.51%)</title><rect x="83.7563%" y="1061" width="0.5076%" height="15" fill="rgb(245,139,43)" fg:x="165" fg:w="1"/><text x="84.0063%" y="1071.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::from_bytes (1 samples, 0.51%)</title><rect x="83.7563%" y="1045" width="0.5076%" height="15" fill="rgb(252,170,7)" fg:x="165" fg:w="1"/><text x="84.0063%" y="1055.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 1.02%)</title><rect x="84.2640%" y="1045" width="1.0152%" height="15" fill="rgb(231,118,14)" fg:x="166" fg:w="2"/><text x="84.5140%" y="1055.50"></text></g><g><title>__rg_alloc (1 samples, 0.51%)</title><rect x="85.7868%" y="901" width="0.5076%" height="15" fill="rgb(238,83,0)" fg:x="169" fg:w="1"/><text x="86.0368%" y="911.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.51%)</title><rect x="85.7868%" y="885" width="0.5076%" height="15" fill="rgb(221,39,39)" fg:x="169" fg:w="1"/><text x="86.0368%" y="895.50"></text></g><g><title>mimalloc::may_use_unaligned_api (1 samples, 0.51%)</title><rect x="85.7868%" y="869" width="0.5076%" height="15" fill="rgb(222,119,46)" fg:x="169" fg:w="1"/><text x="86.0368%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (3 samples, 1.52%)</title><rect x="85.7868%" y="981" width="1.5228%" height="15" fill="rgb(222,165,49)" fg:x="169" fg:w="3"/><text x="86.0368%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (3 samples, 1.52%)</title><rect x="85.7868%" y="965" width="1.5228%" height="15" fill="rgb(219,113,52)" fg:x="169" fg:w="3"/><text x="86.0368%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (3 samples, 1.52%)</title><rect x="85.7868%" y="949" width="1.5228%" height="15" fill="rgb(214,7,15)" fg:x="169" fg:w="3"/><text x="86.0368%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (3 samples, 1.52%)</title><rect x="85.7868%" y="933" width="1.5228%" height="15" fill="rgb(235,32,4)" fg:x="169" fg:w="3"/><text x="86.0368%" y="943.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 1.52%)</title><rect x="85.7868%" y="917" width="1.5228%" height="15" fill="rgb(238,90,54)" fg:x="169" fg:w="3"/><text x="86.0368%" y="927.50"></text></g><g><title>mi_malloc (2 samples, 1.02%)</title><rect x="86.2944%" y="901" width="1.0152%" height="15" fill="rgb(213,208,19)" fg:x="170" fg:w="2"/><text x="86.5444%" y="911.50"></text></g><g><title>mi_heap_malloc (2 samples, 1.02%)</title><rect x="86.2944%" y="885" width="1.0152%" height="15" fill="rgb(233,156,4)" fg:x="170" fg:w="2"/><text x="86.5444%" y="895.50"></text></g><g><title>mi_heap_malloc_small (2 samples, 1.02%)</title><rect x="86.2944%" y="869" width="1.0152%" height="15" fill="rgb(207,194,5)" fg:x="170" fg:w="2"/><text x="86.5444%" y="879.50"></text></g><g><title>_mi_page_malloc (2 samples, 1.02%)</title><rect x="86.2944%" y="853" width="1.0152%" height="15" fill="rgb(206,111,30)" fg:x="170" fg:w="2"/><text x="86.5444%" y="863.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (5 samples, 2.54%)</title><rect x="85.7868%" y="1013" width="2.5381%" height="15" fill="rgb(243,70,54)" fg:x="169" fg:w="5"/><text x="86.0368%" y="1023.50">pr..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (5 samples, 2.54%)</title><rect x="85.7868%" y="997" width="2.5381%" height="15" fill="rgb(242,28,8)" fg:x="169" fg:w="5"/><text x="86.0368%" y="1007.50">pr..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (2 samples, 1.02%)</title><rect x="87.3096%" y="981" width="1.0152%" height="15" fill="rgb(219,106,18)" fg:x="172" fg:w="2"/><text x="87.5596%" y="991.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (2 samples, 1.02%)</title><rect x="87.3096%" y="965" width="1.0152%" height="15" fill="rgb(244,222,10)" fg:x="172" fg:w="2"/><text x="87.5596%" y="975.50"></text></g><g><title>protobuf::misc::maybe_uninit_write_slice (2 samples, 1.02%)</title><rect x="87.3096%" y="949" width="1.0152%" height="15" fill="rgb(236,179,52)" fg:x="172" fg:w="2"/><text x="87.5596%" y="959.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 1.02%)</title><rect x="87.3096%" y="933" width="1.0152%" height="15" fill="rgb(213,23,39)" fg:x="172" fg:w="2"/><text x="87.5596%" y="943.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 1.02%)</title><rect x="87.3096%" y="917" width="1.0152%" height="15" fill="rgb(238,48,10)" fg:x="172" fg:w="2"/><text x="87.5596%" y="927.50"></text></g><g><title>[libc.so.6] (2 samples, 1.02%)</title><rect x="87.3096%" y="901" width="1.0152%" height="15" fill="rgb(251,196,23)" fg:x="172" fg:w="2"/><text x="87.5596%" y="911.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (7 samples, 3.55%)</title><rect x="85.2792%" y="1045" width="3.5533%" height="15" fill="rgb(250,152,24)" fg:x="168" fg:w="7"/><text x="85.5292%" y="1055.50">prot..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (6 samples, 3.05%)</title><rect x="85.7868%" y="1029" width="3.0457%" height="15" fill="rgb(209,150,17)" fg:x="169" fg:w="6"/><text x="86.0368%" y="1039.50">pro..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32 (1 samples, 0.51%)</title><rect x="88.3249%" y="1013" width="0.5076%" height="15" fill="rgb(234,202,34)" fg:x="174" fg:w="1"/><text x="88.5749%" y="1023.50"></text></g><g><title>protobuf::varint::decode::decode_varint32 (1 samples, 0.51%)</title><rect x="88.3249%" y="997" width="0.5076%" height="15" fill="rgb(253,148,53)" fg:x="174" fg:w="1"/><text x="88.5749%" y="1007.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (1 samples, 0.51%)</title><rect x="88.3249%" y="981" width="0.5076%" height="15" fill="rgb(218,129,16)" fg:x="174" fg:w="1"/><text x="88.5749%" y="991.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int32 (1 samples, 0.51%)</title><rect x="88.8325%" y="1045" width="0.5076%" height="15" fill="rgb(216,85,19)" fg:x="175" fg:w="1"/><text x="89.0825%" y="1055.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int64 (1 samples, 0.51%)</title><rect x="88.8325%" y="1029" width="0.5076%" height="15" fill="rgb(235,228,7)" fg:x="175" fg:w="1"/><text x="89.0825%" y="1039.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (1 samples, 0.51%)</title><rect x="88.8325%" y="1013" width="0.5076%" height="15" fill="rgb(245,175,0)" fg:x="175" fg:w="1"/><text x="89.0825%" y="1023.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_EntityMsg as protobuf::message::Message&gt;::merge_from (11 samples, 5.58%)</title><rect x="84.2640%" y="1061" width="5.5838%" height="15" fill="rgb(208,168,36)" fg:x="166" fg:w="11"/><text x="84.5140%" y="1071.50">&lt;csgopr..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (1 samples, 0.51%)</title><rect x="89.3401%" y="1045" width="0.5076%" height="15" fill="rgb(246,171,24)" fg:x="176" fg:w="1"/><text x="89.5901%" y="1055.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (1 samples, 0.51%)</title><rect x="89.3401%" y="1029" width="0.5076%" height="15" fill="rgb(215,142,24)" fg:x="176" fg:w="1"/><text x="89.5901%" y="1039.50"></text></g><g><title>protobuf::varint::decode::decode_varint32 (1 samples, 0.51%)</title><rect x="89.3401%" y="1013" width="0.5076%" height="15" fill="rgb(250,187,7)" fg:x="176" fg:w="1"/><text x="89.5901%" y="1023.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (1 samples, 0.51%)</title><rect x="89.3401%" y="997" width="0.5076%" height="15" fill="rgb(228,66,33)" fg:x="176" fg:w="1"/><text x="89.5901%" y="1007.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_game_event::Key_t as protobuf::message::Message&gt;::merge_from (3 samples, 1.52%)</title><rect x="90.3553%" y="1013" width="1.5228%" height="15" fill="rgb(234,215,21)" fg:x="178" fg:w="3"/><text x="90.6053%" y="1023.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (1 samples, 0.51%)</title><rect x="91.3706%" y="997" width="0.5076%" height="15" fill="rgb(222,191,20)" fg:x="180" fg:w="1"/><text x="91.6206%" y="1007.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (1 samples, 0.51%)</title><rect x="91.3706%" y="981" width="0.5076%" height="15" fill="rgb(245,79,54)" fg:x="180" fg:w="1"/><text x="91.6206%" y="991.50"></text></g><g><title>protobuf::varint::decode::decode_varint32 (1 samples, 0.51%)</title><rect x="91.3706%" y="965" width="0.5076%" height="15" fill="rgb(240,10,37)" fg:x="180" fg:w="1"/><text x="91.6206%" y="975.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (1 samples, 0.51%)</title><rect x="91.3706%" y="949" width="0.5076%" height="15" fill="rgb(214,192,32)" fg:x="180" fg:w="1"/><text x="91.6206%" y="959.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_GameEvent as protobuf::message::Message&gt;::merge_from (5 samples, 2.54%)</title><rect x="89.8477%" y="1061" width="2.5381%" height="15" fill="rgb(209,36,54)" fg:x="177" fg:w="5"/><text x="90.0977%" y="1071.50">&lt;c..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (5 samples, 2.54%)</title><rect x="89.8477%" y="1045" width="2.5381%" height="15" fill="rgb(220,10,11)" fg:x="177" fg:w="5"/><text x="90.0977%" y="1055.50">pr..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (4 samples, 2.03%)</title><rect x="90.3553%" y="1029" width="2.0305%" height="15" fill="rgb(221,106,17)" fg:x="178" fg:w="4"/><text x="90.6053%" y="1039.50">p..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (1 samples, 0.51%)</title><rect x="91.8782%" y="1013" width="0.5076%" height="15" fill="rgb(251,142,44)" fg:x="181" fg:w="1"/><text x="92.1282%" y="1023.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.51%)</title><rect x="92.3858%" y="1045" width="0.5076%" height="15" fill="rgb(238,13,15)" fg:x="182" fg:w="1"/><text x="92.6358%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.51%)</title><rect x="92.8934%" y="981" width="0.5076%" height="15" fill="rgb(208,107,27)" fg:x="183" fg:w="1"/><text x="93.1434%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.51%)</title><rect x="92.8934%" y="965" width="0.5076%" height="15" fill="rgb(205,136,37)" fg:x="183" fg:w="1"/><text x="93.1434%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (1 samples, 0.51%)</title><rect x="92.8934%" y="949" width="0.5076%" height="15" fill="rgb(250,205,27)" fg:x="183" fg:w="1"/><text x="93.1434%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (1 samples, 0.51%)</title><rect x="92.8934%" y="933" width="0.5076%" height="15" fill="rgb(210,80,43)" fg:x="183" fg:w="1"/><text x="93.1434%" y="943.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.51%)</title><rect x="92.8934%" y="917" width="0.5076%" height="15" fill="rgb(247,160,36)" fg:x="183" fg:w="1"/><text x="93.1434%" y="927.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.51%)</title><rect x="92.8934%" y="901" width="0.5076%" height="15" fill="rgb(234,13,49)" fg:x="183" fg:w="1"/><text x="93.1434%" y="911.50"></text></g><g><title>mi_find_page (1 samples, 0.51%)</title><rect x="92.8934%" y="885" width="0.5076%" height="15" fill="rgb(234,122,0)" fg:x="183" fg:w="1"/><text x="93.1434%" y="895.50"></text></g><g><title>mi_find_free_page (1 samples, 0.51%)</title><rect x="92.8934%" y="869" width="0.5076%" height="15" fill="rgb(207,146,38)" fg:x="183" fg:w="1"/><text x="93.1434%" y="879.50"></text></g><g><title>mi_page_queue_find_free_ex (1 samples, 0.51%)</title><rect x="92.8934%" y="853" width="0.5076%" height="15" fill="rgb(207,177,25)" fg:x="183" fg:w="1"/><text x="93.1434%" y="863.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.51%)</title><rect x="92.8934%" y="837" width="0.5076%" height="15" fill="rgb(211,178,42)" fg:x="183" fg:w="1"/><text x="93.1434%" y="847.50"></text></g><g><title>mi_page_extend_free (1 samples, 0.51%)</title><rect x="92.8934%" y="821" width="0.5076%" height="15" fill="rgb(230,69,54)" fg:x="183" fg:w="1"/><text x="93.1434%" y="831.50"></text></g><g><title>mi_page_free_list_extend (1 samples, 0.51%)</title><rect x="92.8934%" y="805" width="0.5076%" height="15" fill="rgb(214,135,41)" fg:x="183" fg:w="1"/><text x="93.1434%" y="815.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (5 samples, 2.54%)</title><rect x="92.8934%" y="1045" width="2.5381%" height="15" fill="rgb(237,67,25)" fg:x="183" fg:w="5"/><text x="93.1434%" y="1055.50">pr..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (5 samples, 2.54%)</title><rect x="92.8934%" y="1029" width="2.5381%" height="15" fill="rgb(222,189,50)" fg:x="183" fg:w="5"/><text x="93.1434%" y="1039.50">pr..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (5 samples, 2.54%)</title><rect x="92.8934%" y="1013" width="2.5381%" height="15" fill="rgb(245,148,34)" fg:x="183" fg:w="5"/><text x="93.1434%" y="1023.50">pr..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (5 samples, 2.54%)</title><rect x="92.8934%" y="997" width="2.5381%" height="15" fill="rgb(222,29,6)" fg:x="183" fg:w="5"/><text x="93.1434%" y="1007.50">pr..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (4 samples, 2.03%)</title><rect x="93.4010%" y="981" width="2.0305%" height="15" fill="rgb(221,189,43)" fg:x="184" fg:w="4"/><text x="93.6510%" y="991.50">p..</text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (4 samples, 2.03%)</title><rect x="93.4010%" y="965" width="2.0305%" height="15" fill="rgb(207,36,27)" fg:x="184" fg:w="4"/><text x="93.6510%" y="975.50">p..</text></g><g><title>protobuf::misc::maybe_uninit_write_slice (4 samples, 2.03%)</title><rect x="93.4010%" y="949" width="2.0305%" height="15" fill="rgb(217,90,24)" fg:x="184" fg:w="4"/><text x="93.6510%" y="959.50">p..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 2.03%)</title><rect x="93.4010%" y="933" width="2.0305%" height="15" fill="rgb(224,66,35)" fg:x="184" fg:w="4"/><text x="93.6510%" y="943.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 2.03%)</title><rect x="93.4010%" y="917" width="2.0305%" height="15" fill="rgb(221,13,50)" fg:x="184" fg:w="4"/><text x="93.6510%" y="927.50">c..</text></g><g><title>[libc.so.6] (4 samples, 2.03%)</title><rect x="93.4010%" y="901" width="2.0305%" height="15" fill="rgb(236,68,49)" fg:x="184" fg:w="4"/><text x="93.6510%" y="911.50">[..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int32 (1 samples, 0.51%)</title><rect x="95.4315%" y="1045" width="0.5076%" height="15" fill="rgb(229,146,28)" fg:x="188" fg:w="1"/><text x="95.6815%" y="1055.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int64 (1 samples, 0.51%)</title><rect x="95.4315%" y="1029" width="0.5076%" height="15" fill="rgb(225,31,38)" fg:x="188" fg:w="1"/><text x="95.6815%" y="1039.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (1 samples, 0.51%)</title><rect x="95.4315%" y="1013" width="0.5076%" height="15" fill="rgb(250,208,3)" fg:x="188" fg:w="1"/><text x="95.6815%" y="1023.50"></text></g><g><title>protobuf::varint::decode::decode_varint64 (1 samples, 0.51%)</title><rect x="95.4315%" y="997" width="0.5076%" height="15" fill="rgb(246,54,23)" fg:x="188" fg:w="1"/><text x="95.6815%" y="1007.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (1 samples, 0.51%)</title><rect x="95.4315%" y="981" width="0.5076%" height="15" fill="rgb(243,76,11)" fg:x="188" fg:w="1"/><text x="95.6815%" y="991.50"></text></g><g><title>demoparser::parsing::parser::Demo::parse_cmd (178 samples, 90.36%)</title><rect x="6.0914%" y="1125" width="90.3553%" height="15" fill="rgb(245,21,50)" fg:x="12" fg:w="178"/><text x="6.3414%" y="1135.50">demoparser::parsing::parser::Demo::parse_cmd</text></g><g><title>demoparser::parsing::parser::Demo::parse_packet (173 samples, 87.82%)</title><rect x="8.6294%" y="1109" width="87.8173%" height="15" fill="rgb(228,9,43)" fg:x="17" fg:w="173"/><text x="8.8794%" y="1119.50">demoparser::parsing::parser::Demo::parse_packet</text></g><g><title>protobuf::message::Message::parse_from_bytes (28 samples, 14.21%)</title><rect x="82.2335%" y="1093" width="14.2132%" height="15" fill="rgb(208,100,47)" fg:x="162" fg:w="28"/><text x="82.4835%" y="1103.50">protobuf::message::Mes..</text></g><g><title>protobuf::message::Message::parse_from (24 samples, 12.18%)</title><rect x="84.2640%" y="1077" width="12.1827%" height="15" fill="rgb(232,26,8)" fg:x="166" fg:w="24"/><text x="84.5140%" y="1087.50">protobuf::message:..</text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_PacketEntities as protobuf::message::Message&gt;::merge_from (8 samples, 4.06%)</title><rect x="92.3858%" y="1061" width="4.0609%" height="15" fill="rgb(216,166,38)" fg:x="182" fg:w="8"/><text x="92.6358%" y="1071.50">&lt;csg..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (1 samples, 0.51%)</title><rect x="95.9391%" y="1045" width="0.5076%" height="15" fill="rgb(251,202,51)" fg:x="189" fg:w="1"/><text x="96.1891%" y="1055.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (1 samples, 0.51%)</title><rect x="95.9391%" y="1029" width="0.5076%" height="15" fill="rgb(254,216,34)" fg:x="189" fg:w="1"/><text x="96.1891%" y="1039.50"></text></g><g><title>demoparser::parsing::parser::Demo::start_parsing (181 samples, 91.88%)</title><rect x="5.0761%" y="1141" width="91.8782%" height="15" fill="rgb(251,32,27)" fg:x="10" fg:w="181"/><text x="5.3261%" y="1151.50">demoparser::parsing::parser::Demo::start_parsing</text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_frame (1 samples, 0.51%)</title><rect x="96.4467%" y="1125" width="0.5076%" height="15" fill="rgb(208,127,28)" fg:x="190" fg:w="1"/><text x="96.6967%" y="1135.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_byte (1 samples, 0.51%)</title><rect x="96.4467%" y="1109" width="0.5076%" height="15" fill="rgb(224,137,22)" fg:x="190" fg:w="1"/><text x="96.6967%" y="1119.50"></text></g><g><title>demoparser (192 samples, 97.46%)</title><rect x="0.0000%" y="1429" width="97.4619%" height="15" fill="rgb(254,70,32)" fg:x="0" fg:w="192"/><text x="0.2500%" y="1439.50">demoparser</text></g><g><title>_start (187 samples, 94.92%)</title><rect x="2.5381%" y="1413" width="94.9239%" height="15" fill="rgb(229,75,37)" fg:x="5" fg:w="187"/><text x="2.7881%" y="1423.50">_start</text></g><g><title>__libc_start_main_impl (187 samples, 94.92%)</title><rect x="2.5381%" y="1397" width="94.9239%" height="15" fill="rgb(252,64,23)" fg:x="5" fg:w="187"/><text x="2.7881%" y="1407.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (187 samples, 94.92%)</title><rect x="2.5381%" y="1381" width="94.9239%" height="15" fill="rgb(232,162,48)" fg:x="5" fg:w="187"/><text x="2.7881%" y="1391.50">__libc_start_call_main</text></g><g><title>main (187 samples, 94.92%)</title><rect x="2.5381%" y="1365" width="94.9239%" height="15" fill="rgb(246,160,12)" fg:x="5" fg:w="187"/><text x="2.7881%" y="1375.50">main</text></g><g><title>std::rt::lang_start_internal (187 samples, 94.92%)</title><rect x="2.5381%" y="1349" width="94.9239%" height="15" fill="rgb(247,166,0)" fg:x="5" fg:w="187"/><text x="2.7881%" y="1359.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (187 samples, 94.92%)</title><rect x="2.5381%" y="1333" width="94.9239%" height="15" fill="rgb(249,219,21)" fg:x="5" fg:w="187"/><text x="2.7881%" y="1343.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (187 samples, 94.92%)</title><rect x="2.5381%" y="1317" width="94.9239%" height="15" fill="rgb(205,209,3)" fg:x="5" fg:w="187"/><text x="2.7881%" y="1327.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (187 samples, 94.92%)</title><rect x="2.5381%" y="1301" width="94.9239%" height="15" fill="rgb(243,44,1)" fg:x="5" fg:w="187"/><text x="2.7881%" y="1311.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (187 samples, 94.92%)</title><rect x="2.5381%" y="1285" width="94.9239%" height="15" fill="rgb(206,159,16)" fg:x="5" fg:w="187"/><text x="2.7881%" y="1295.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (187 samples, 94.92%)</title><rect x="2.5381%" y="1269" width="94.9239%" height="15" fill="rgb(244,77,30)" fg:x="5" fg:w="187"/><text x="2.7881%" y="1279.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (187 samples, 94.92%)</title><rect x="2.5381%" y="1253" width="94.9239%" height="15" fill="rgb(218,69,12)" fg:x="5" fg:w="187"/><text x="2.7881%" y="1263.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (187 samples, 94.92%)</title><rect x="2.5381%" y="1237" width="94.9239%" height="15" fill="rgb(212,87,7)" fg:x="5" fg:w="187"/><text x="2.7881%" y="1247.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (187 samples, 94.92%)</title><rect x="2.5381%" y="1221" width="94.9239%" height="15" fill="rgb(245,114,25)" fg:x="5" fg:w="187"/><text x="2.7881%" y="1231.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (187 samples, 94.92%)</title><rect x="2.5381%" y="1205" width="94.9239%" height="15" fill="rgb(210,61,42)" fg:x="5" fg:w="187"/><text x="2.7881%" y="1215.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (187 samples, 94.92%)</title><rect x="2.5381%" y="1189" width="94.9239%" height="15" fill="rgb(211,52,33)" fg:x="5" fg:w="187"/><text x="2.7881%" y="1199.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (187 samples, 94.92%)</title><rect x="2.5381%" y="1173" width="94.9239%" height="15" fill="rgb(234,58,33)" fg:x="5" fg:w="187"/><text x="2.7881%" y="1183.50">core::ops::function::FnOnce::call_once</text></g><g><title>demoparser::main (187 samples, 94.92%)</title><rect x="2.5381%" y="1157" width="94.9239%" height="15" fill="rgb(220,115,36)" fg:x="5" fg:w="187"/><text x="2.7881%" y="1167.50">demoparser::main</text></g><g><title>std::fs::read_dir (1 samples, 0.51%)</title><rect x="96.9543%" y="1141" width="0.5076%" height="15" fill="rgb(243,153,54)" fg:x="191" fg:w="1"/><text x="97.2043%" y="1151.50"></text></g><g><title>std::sys::unix::fs::readdir (1 samples, 0.51%)</title><rect x="96.9543%" y="1125" width="0.5076%" height="15" fill="rgb(251,47,18)" fg:x="191" fg:w="1"/><text x="97.2043%" y="1135.50"></text></g><g><title>__opendir (1 samples, 0.51%)</title><rect x="96.9543%" y="1109" width="0.5076%" height="15" fill="rgb(242,102,42)" fg:x="191" fg:w="1"/><text x="97.2043%" y="1119.50"></text></g><g><title>opendir_tail (1 samples, 0.51%)</title><rect x="96.9543%" y="1093" width="0.5076%" height="15" fill="rgb(234,31,38)" fg:x="191" fg:w="1"/><text x="97.2043%" y="1103.50"></text></g><g><title>__alloc_dir (1 samples, 0.51%)</title><rect x="96.9543%" y="1077" width="0.5076%" height="15" fill="rgb(221,117,51)" fg:x="191" fg:w="1"/><text x="97.2043%" y="1087.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.51%)</title><rect x="96.9543%" y="1061" width="0.5076%" height="15" fill="rgb(212,20,18)" fg:x="191" fg:w="1"/><text x="97.2043%" y="1071.50"></text></g><g><title>_int_malloc (1 samples, 0.51%)</title><rect x="96.9543%" y="1045" width="0.5076%" height="15" fill="rgb(245,133,36)" fg:x="191" fg:w="1"/><text x="97.2043%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="96.9543%" y="1029" width="0.5076%" height="15" fill="rgb(212,6,19)" fg:x="191" fg:w="1"/><text x="97.2043%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="96.9543%" y="1013" width="0.5076%" height="15" fill="rgb(218,1,36)" fg:x="191" fg:w="1"/><text x="97.2043%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="96.9543%" y="997" width="0.5076%" height="15" fill="rgb(246,84,54)" fg:x="191" fg:w="1"/><text x="97.2043%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.51%)</title><rect x="96.9543%" y="981" width="0.5076%" height="15" fill="rgb(242,110,6)" fg:x="191" fg:w="1"/><text x="97.2043%" y="991.50"></text></g><g><title>all (197 samples, 100%)</title><rect x="0.0000%" y="1445" width="100.0000%" height="15" fill="rgb(214,47,5)" fg:x="0" fg:w="197"/><text x="0.2500%" y="1455.50"></text></g><g><title>perf-exec (5 samples, 2.54%)</title><rect x="97.4619%" y="1429" width="2.5381%" height="15" fill="rgb(218,159,25)" fg:x="192" fg:w="5"/><text x="97.7119%" y="1439.50">pe..</text></g><g><title>[unknown] (5 samples, 2.54%)</title><rect x="97.4619%" y="1413" width="2.5381%" height="15" fill="rgb(215,211,28)" fg:x="192" fg:w="5"/><text x="97.7119%" y="1423.50">[u..</text></g><g><title>[unknown] (5 samples, 2.54%)</title><rect x="97.4619%" y="1397" width="2.5381%" height="15" fill="rgb(238,59,32)" fg:x="192" fg:w="5"/><text x="97.7119%" y="1407.50">[u..</text></g><g><title>[unknown] (5 samples, 2.54%)</title><rect x="97.4619%" y="1381" width="2.5381%" height="15" fill="rgb(226,82,3)" fg:x="192" fg:w="5"/><text x="97.7119%" y="1391.50">[u..</text></g><g><title>[unknown] (5 samples, 2.54%)</title><rect x="97.4619%" y="1365" width="2.5381%" height="15" fill="rgb(240,164,32)" fg:x="192" fg:w="5"/><text x="97.7119%" y="1375.50">[u..</text></g><g><title>[unknown] (5 samples, 2.54%)</title><rect x="97.4619%" y="1349" width="2.5381%" height="15" fill="rgb(232,46,7)" fg:x="192" fg:w="5"/><text x="97.7119%" y="1359.50">[u..</text></g><g><title>[unknown] (5 samples, 2.54%)</title><rect x="97.4619%" y="1333" width="2.5381%" height="15" fill="rgb(229,129,53)" fg:x="192" fg:w="5"/><text x="97.7119%" y="1343.50">[u..</text></g><g><title>[unknown] (5 samples, 2.54%)</title><rect x="97.4619%" y="1317" width="2.5381%" height="15" fill="rgb(234,188,29)" fg:x="192" fg:w="5"/><text x="97.7119%" y="1327.50">[u..</text></g><g><title>[unknown] (5 samples, 2.54%)</title><rect x="97.4619%" y="1301" width="2.5381%" height="15" fill="rgb(246,141,4)" fg:x="192" fg:w="5"/><text x="97.7119%" y="1311.50">[u..</text></g><g><title>[unknown] (5 samples, 2.54%)</title><rect x="97.4619%" y="1285" width="2.5381%" height="15" fill="rgb(229,23,39)" fg:x="192" fg:w="5"/><text x="97.7119%" y="1295.50">[u..</text></g><g><title>[unknown] (5 samples, 2.54%)</title><rect x="97.4619%" y="1269" width="2.5381%" height="15" fill="rgb(206,12,3)" fg:x="192" fg:w="5"/><text x="97.7119%" y="1279.50">[u..</text></g></svg></svg>