<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="934" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="917.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="917.00"> </text><svg id="frames" x="10" width="1180" total_samples="83"><g><title>[unknown] (3 samples, 3.61%)</title><rect x="0.0000%" y="853" width="3.6145%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="863.50">[unk..</text></g><g><title>[unknown] (3 samples, 3.61%)</title><rect x="0.0000%" y="837" width="3.6145%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.2500%" y="847.50">[unk..</text></g><g><title>[unknown] (3 samples, 3.61%)</title><rect x="0.0000%" y="821" width="3.6145%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="831.50">[unk..</text></g><g><title>[unknown] (3 samples, 3.61%)</title><rect x="0.0000%" y="805" width="3.6145%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="815.50">[unk..</text></g><g><title>[unknown] (3 samples, 3.61%)</title><rect x="0.0000%" y="789" width="3.6145%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="3"/><text x="0.2500%" y="799.50">[unk..</text></g><g><title>[unknown] (3 samples, 3.61%)</title><rect x="0.0000%" y="773" width="3.6145%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="3"/><text x="0.2500%" y="783.50">[unk..</text></g><g><title>[unknown] (3 samples, 3.61%)</title><rect x="0.0000%" y="757" width="3.6145%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="3"/><text x="0.2500%" y="767.50">[unk..</text></g><g><title>[unknown] (3 samples, 3.61%)</title><rect x="0.0000%" y="741" width="3.6145%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="3"/><text x="0.2500%" y="751.50">[unk..</text></g><g><title>[unknown] (3 samples, 3.61%)</title><rect x="0.0000%" y="725" width="3.6145%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="3"/><text x="0.2500%" y="735.50">[unk..</text></g><g><title>[unknown] (3 samples, 3.61%)</title><rect x="0.0000%" y="709" width="3.6145%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="3"/><text x="0.2500%" y="719.50">[unk..</text></g><g><title>[unknown] (3 samples, 3.61%)</title><rect x="0.0000%" y="693" width="3.6145%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="3"/><text x="0.2500%" y="703.50">[unk..</text></g><g><title>[unknown] (3 samples, 3.61%)</title><rect x="0.0000%" y="677" width="3.6145%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="3"/><text x="0.2500%" y="687.50">[unk..</text></g><g><title>[unknown] (3 samples, 3.61%)</title><rect x="0.0000%" y="661" width="3.6145%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="3"/><text x="0.2500%" y="671.50">[unk..</text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="2.4096%" y="645" width="1.2048%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="2.6596%" y="655.50"></text></g><g><title>__GI_exit (1 samples, 1.20%)</title><rect x="3.6145%" y="805" width="1.2048%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="3.8645%" y="815.50"></text></g><g><title>__run_exit_handlers (1 samples, 1.20%)</title><rect x="3.6145%" y="789" width="1.2048%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="3.8645%" y="799.50"></text></g><g><title>mi_process_done (1 samples, 1.20%)</title><rect x="3.6145%" y="773" width="1.2048%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="3.8645%" y="783.50"></text></g><g><title>mi_process_done (1 samples, 1.20%)</title><rect x="3.6145%" y="757" width="1.2048%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="3.8645%" y="767.50"></text></g><g><title>mi_heap_collect_ex (1 samples, 1.20%)</title><rect x="3.6145%" y="741" width="1.2048%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="3.8645%" y="751.50"></text></g><g><title>mi_segment_cache_purge (1 samples, 1.20%)</title><rect x="3.6145%" y="725" width="1.2048%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="3.8645%" y="735.50"></text></g><g><title>mi_commit_mask_decommit (1 samples, 1.20%)</title><rect x="3.6145%" y="709" width="1.2048%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="3.8645%" y="719.50"></text></g><g><title>_mi_os_decommit (1 samples, 1.20%)</title><rect x="3.6145%" y="693" width="1.2048%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="3.8645%" y="703.50"></text></g><g><title>mi_os_commitx (1 samples, 1.20%)</title><rect x="3.6145%" y="677" width="1.2048%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="3.8645%" y="687.50"></text></g><g><title>__GI_madvise (1 samples, 1.20%)</title><rect x="3.6145%" y="661" width="1.2048%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="3.8645%" y="671.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="3.6145%" y="645" width="1.2048%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="1"/><text x="3.8645%" y="655.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="3.6145%" y="629" width="1.2048%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="1"/><text x="3.8645%" y="639.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="3.6145%" y="613" width="1.2048%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="1"/><text x="3.8645%" y="623.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="3.6145%" y="597" width="1.2048%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="1"/><text x="3.8645%" y="607.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="3.6145%" y="581" width="1.2048%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="1"/><text x="3.8645%" y="591.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="3.6145%" y="565" width="1.2048%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="1"/><text x="3.8645%" y="575.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="3.6145%" y="549" width="1.2048%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="1"/><text x="3.8645%" y="559.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="3.6145%" y="533" width="1.2048%" height="15" fill="rgb(229,88,8)" fg:x="3" fg:w="1"/><text x="3.8645%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 1.20%)</title><rect x="4.8193%" y="389" width="1.2048%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="1"/><text x="5.0693%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 1.20%)</title><rect x="4.8193%" y="373" width="1.2048%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="1"/><text x="5.0693%" y="383.50"></text></g><g><title>mi_free (1 samples, 1.20%)</title><rect x="4.8193%" y="357" width="1.2048%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="1"/><text x="5.0693%" y="367.50"></text></g><g><title>mi_block_set_next (1 samples, 1.20%)</title><rect x="4.8193%" y="341" width="1.2048%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="1"/><text x="5.0693%" y="351.50"></text></g><g><title>mi_block_set_nextx (1 samples, 1.20%)</title><rect x="4.8193%" y="325" width="1.2048%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="1"/><text x="5.0693%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::game_events::GameEvent&gt;&gt; (2 samples, 2.41%)</title><rect x="4.8193%" y="581" width="2.4096%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="2"/><text x="5.0693%" y="591.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 2.41%)</title><rect x="4.8193%" y="565" width="2.4096%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="2"/><text x="5.0693%" y="575.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::game_events::GameEvent]&gt; (2 samples, 2.41%)</title><rect x="4.8193%" y="549" width="2.4096%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="2"/><text x="5.0693%" y="559.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::game_events::GameEvent&gt; (2 samples, 2.41%)</title><rect x="4.8193%" y="533" width="2.4096%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="2"/><text x="5.0693%" y="543.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::game_events::NameDataPair&gt;&gt; (2 samples, 2.41%)</title><rect x="4.8193%" y="517" width="2.4096%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="2"/><text x="5.0693%" y="527.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 2.41%)</title><rect x="4.8193%" y="501" width="2.4096%" height="15" fill="rgb(235,93,37)" fg:x="4" fg:w="2"/><text x="5.0693%" y="511.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::game_events::NameDataPair]&gt; (2 samples, 2.41%)</title><rect x="4.8193%" y="485" width="2.4096%" height="15" fill="rgb(213,116,39)" fg:x="4" fg:w="2"/><text x="5.0693%" y="495.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::game_events::NameDataPair&gt; (2 samples, 2.41%)</title><rect x="4.8193%" y="469" width="2.4096%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="2"/><text x="5.0693%" y="479.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 2.41%)</title><rect x="4.8193%" y="453" width="2.4096%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="2"/><text x="5.0693%" y="463.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 2.41%)</title><rect x="4.8193%" y="437" width="2.4096%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="2"/><text x="5.0693%" y="447.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 2.41%)</title><rect x="4.8193%" y="421" width="2.4096%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="2"/><text x="5.0693%" y="431.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 2.41%)</title><rect x="4.8193%" y="405" width="2.4096%" height="15" fill="rgb(239,60,40)" fg:x="4" fg:w="2"/><text x="5.0693%" y="415.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 1.20%)</title><rect x="6.0241%" y="389" width="1.2048%" height="15" fill="rgb(206,27,48)" fg:x="5" fg:w="1"/><text x="6.2741%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::stringtables::StringTable&gt;&gt; (1 samples, 1.20%)</title><rect x="7.2289%" y="581" width="1.2048%" height="15" fill="rgb(225,35,8)" fg:x="6" fg:w="1"/><text x="7.4789%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.20%)</title><rect x="7.2289%" y="565" width="1.2048%" height="15" fill="rgb(250,213,24)" fg:x="6" fg:w="1"/><text x="7.4789%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::stringtables::StringTable]&gt; (1 samples, 1.20%)</title><rect x="7.2289%" y="549" width="1.2048%" height="15" fill="rgb(247,123,22)" fg:x="6" fg:w="1"/><text x="7.4789%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::stringtables::StringTable&gt; (1 samples, 1.20%)</title><rect x="7.2289%" y="533" width="1.2048%" height="15" fill="rgb(231,138,38)" fg:x="6" fg:w="1"/><text x="7.4789%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;demoparser::parsing::stringtables::StField&gt;&gt; (1 samples, 1.20%)</title><rect x="7.2289%" y="517" width="1.2048%" height="15" fill="rgb(231,145,46)" fg:x="6" fg:w="1"/><text x="7.4789%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.20%)</title><rect x="7.2289%" y="501" width="1.2048%" height="15" fill="rgb(251,118,11)" fg:x="6" fg:w="1"/><text x="7.4789%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[demoparser::parsing::stringtables::StField]&gt; (1 samples, 1.20%)</title><rect x="7.2289%" y="485" width="1.2048%" height="15" fill="rgb(217,147,25)" fg:x="6" fg:w="1"/><text x="7.4789%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::stringtables::StField&gt; (1 samples, 1.20%)</title><rect x="7.2289%" y="469" width="1.2048%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="1"/><text x="7.4789%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 1.20%)</title><rect x="7.2289%" y="453" width="1.2048%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="1"/><text x="7.4789%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 1.20%)</title><rect x="7.2289%" y="437" width="1.2048%" height="15" fill="rgb(227,1,9)" fg:x="6" fg:w="1"/><text x="7.4789%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 1.20%)</title><rect x="7.2289%" y="421" width="1.2048%" height="15" fill="rgb(248,47,43)" fg:x="6" fg:w="1"/><text x="7.4789%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.20%)</title><rect x="7.2289%" y="405" width="1.2048%" height="15" fill="rgb(221,10,30)" fg:x="6" fg:w="1"/><text x="7.4789%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 1.20%)</title><rect x="7.2289%" y="389" width="1.2048%" height="15" fill="rgb(210,229,1)" fg:x="6" fg:w="1"/><text x="7.4789%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt;&gt; (1 samples, 1.20%)</title><rect x="8.4337%" y="581" width="1.2048%" height="15" fill="rgb(222,148,37)" fg:x="7" fg:w="1"/><text x="8.6837%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt; (1 samples, 1.20%)</title><rect x="8.4337%" y="565" width="1.2048%" height="15" fill="rgb(234,67,33)" fg:x="7" fg:w="1"/><text x="8.6837%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable,ahash::random_state::RandomState&gt;&gt; (1 samples, 1.20%)</title><rect x="8.4337%" y="549" width="1.2048%" height="15" fill="rgb(247,98,35)" fg:x="7" fg:w="1"/><text x="8.6837%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable)&gt;&gt; (1 samples, 1.20%)</title><rect x="8.4337%" y="533" width="1.2048%" height="15" fill="rgb(247,138,52)" fg:x="7" fg:w="1"/><text x="8.6837%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.20%)</title><rect x="8.4337%" y="517" width="1.2048%" height="15" fill="rgb(213,79,30)" fg:x="7" fg:w="1"/><text x="8.6837%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 1.20%)</title><rect x="8.4337%" y="501" width="1.2048%" height="15" fill="rgb(246,177,23)" fg:x="7" fg:w="1"/><text x="8.6837%" y="511.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 1.20%)</title><rect x="8.4337%" y="485" width="1.2048%" height="15" fill="rgb(230,62,27)" fg:x="7" fg:w="1"/><text x="8.6837%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 1.20%)</title><rect x="8.4337%" y="469" width="1.2048%" height="15" fill="rgb(216,154,8)" fg:x="7" fg:w="1"/><text x="8.6837%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,csgoproto::netmessages::CSVCMsg_SendTable)&gt; (1 samples, 1.20%)</title><rect x="8.4337%" y="453" width="1.2048%" height="15" fill="rgb(244,35,45)" fg:x="7" fg:w="1"/><text x="8.6837%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::CSVCMsg_SendTable&gt; (1 samples, 1.20%)</title><rect x="8.4337%" y="437" width="1.2048%" height="15" fill="rgb(251,115,12)" fg:x="7" fg:w="1"/><text x="8.6837%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt;&gt; (1 samples, 1.20%)</title><rect x="8.4337%" y="421" width="1.2048%" height="15" fill="rgb(240,54,50)" fg:x="7" fg:w="1"/><text x="8.6837%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.20%)</title><rect x="8.4337%" y="405" width="1.2048%" height="15" fill="rgb(233,84,52)" fg:x="7" fg:w="1"/><text x="8.6837%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[csgoproto::netmessages::csvcmsg_send_table::Sendprop_t]&gt; (1 samples, 1.20%)</title><rect x="8.4337%" y="389" width="1.2048%" height="15" fill="rgb(207,117,47)" fg:x="7" fg:w="1"/><text x="8.6837%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t&gt; (1 samples, 1.20%)</title><rect x="8.4337%" y="373" width="1.2048%" height="15" fill="rgb(249,43,39)" fg:x="7" fg:w="1"/><text x="8.6837%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;protobuf::special::SpecialFields&gt; (1 samples, 1.20%)</title><rect x="8.4337%" y="357" width="1.2048%" height="15" fill="rgb(209,38,44)" fg:x="7" fg:w="1"/><text x="8.6837%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;protobuf::unknown::UnknownFields&gt; (1 samples, 1.20%)</title><rect x="8.4337%" y="341" width="1.2048%" height="15" fill="rgb(236,212,23)" fg:x="7" fg:w="1"/><text x="8.6837%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;u32,protobuf::unknown::UnknownValues,core::hash::BuildHasherDefault&lt;std::collections::hash::map::DefaultHasher&gt;&gt;&gt;&gt;&gt; (1 samples, 1.20%)</title><rect x="8.4337%" y="325" width="1.2048%" height="15" fill="rgb(242,79,21)" fg:x="7" fg:w="1"/><text x="8.6837%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::BytesVariant&gt; (1 samples, 1.20%)</title><rect x="9.6386%" y="581" width="1.2048%" height="15" fill="rgb(211,96,35)" fg:x="8" fg:w="1"/><text x="9.8886%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap::Mmap&gt; (1 samples, 1.20%)</title><rect x="9.6386%" y="565" width="1.2048%" height="15" fill="rgb(253,215,40)" fg:x="8" fg:w="1"/><text x="9.8886%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap::unix::MmapInner&gt; (1 samples, 1.20%)</title><rect x="9.6386%" y="549" width="1.2048%" height="15" fill="rgb(211,81,21)" fg:x="8" fg:w="1"/><text x="9.8886%" y="559.50"></text></g><g><title>&lt;memmap::unix::MmapInner as core::ops::drop::Drop&gt;::drop (1 samples, 1.20%)</title><rect x="9.6386%" y="533" width="1.2048%" height="15" fill="rgb(208,190,38)" fg:x="8" fg:w="1"/><text x="9.8886%" y="543.50"></text></g><g><title>__GI___munmap (1 samples, 1.20%)</title><rect x="9.6386%" y="517" width="1.2048%" height="15" fill="rgb(235,213,38)" fg:x="8" fg:w="1"/><text x="9.8886%" y="527.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="9.6386%" y="501" width="1.2048%" height="15" fill="rgb(237,122,38)" fg:x="8" fg:w="1"/><text x="9.8886%" y="511.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="9.6386%" y="485" width="1.2048%" height="15" fill="rgb(244,218,35)" fg:x="8" fg:w="1"/><text x="9.8886%" y="495.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="9.6386%" y="469" width="1.2048%" height="15" fill="rgb(240,68,47)" fg:x="8" fg:w="1"/><text x="9.8886%" y="479.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="9.6386%" y="453" width="1.2048%" height="15" fill="rgb(210,16,53)" fg:x="8" fg:w="1"/><text x="9.8886%" y="463.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="9.6386%" y="437" width="1.2048%" height="15" fill="rgb(235,124,12)" fg:x="8" fg:w="1"/><text x="9.8886%" y="447.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="9.6386%" y="421" width="1.2048%" height="15" fill="rgb(224,169,11)" fg:x="8" fg:w="1"/><text x="9.8886%" y="431.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="9.6386%" y="405" width="1.2048%" height="15" fill="rgb(250,166,2)" fg:x="8" fg:w="1"/><text x="9.8886%" y="415.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="9.6386%" y="389" width="1.2048%" height="15" fill="rgb(242,216,29)" fg:x="8" fg:w="1"/><text x="9.8886%" y="399.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="9.6386%" y="373" width="1.2048%" height="15" fill="rgb(230,116,27)" fg:x="8" fg:w="1"/><text x="9.8886%" y="383.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="9.6386%" y="357" width="1.2048%" height="15" fill="rgb(228,99,48)" fg:x="8" fg:w="1"/><text x="9.8886%" y="367.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="9.6386%" y="341" width="1.2048%" height="15" fill="rgb(253,11,6)" fg:x="8" fg:w="1"/><text x="9.8886%" y="351.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="9.6386%" y="325" width="1.2048%" height="15" fill="rgb(247,143,39)" fg:x="8" fg:w="1"/><text x="9.8886%" y="335.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="9.6386%" y="309" width="1.2048%" height="15" fill="rgb(236,97,10)" fg:x="8" fg:w="1"/><text x="9.8886%" y="319.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="9.6386%" y="293" width="1.2048%" height="15" fill="rgb(233,208,19)" fg:x="8" fg:w="1"/><text x="9.8886%" y="303.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1 samples, 1.20%)</title><rect x="12.0482%" y="405" width="1.2048%" height="15" fill="rgb(216,164,2)" fg:x="10" fg:w="1"/><text x="12.2982%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 1.20%)</title><rect x="12.0482%" y="389" width="1.2048%" height="15" fill="rgb(220,129,5)" fg:x="10" fg:w="1"/><text x="12.2982%" y="399.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 1.20%)</title><rect x="12.0482%" y="373" width="1.2048%" height="15" fill="rgb(242,17,10)" fg:x="10" fg:w="1"/><text x="12.2982%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 1.20%)</title><rect x="12.0482%" y="357" width="1.2048%" height="15" fill="rgb(242,107,0)" fg:x="10" fg:w="1"/><text x="12.2982%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 1.20%)</title><rect x="12.0482%" y="341" width="1.2048%" height="15" fill="rgb(251,28,31)" fg:x="10" fg:w="1"/><text x="12.2982%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 1.20%)</title><rect x="12.0482%" y="325" width="1.2048%" height="15" fill="rgb(233,223,10)" fg:x="10" fg:w="1"/><text x="12.2982%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 1.20%)</title><rect x="12.0482%" y="309" width="1.2048%" height="15" fill="rgb(215,21,27)" fg:x="10" fg:w="1"/><text x="12.2982%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 1.20%)</title><rect x="12.0482%" y="293" width="1.2048%" height="15" fill="rgb(232,23,21)" fg:x="10" fg:w="1"/><text x="12.2982%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 1.20%)</title><rect x="12.0482%" y="277" width="1.2048%" height="15" fill="rgb(244,5,23)" fg:x="10" fg:w="1"/><text x="12.2982%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 1.20%)</title><rect x="12.0482%" y="261" width="1.2048%" height="15" fill="rgb(226,81,46)" fg:x="10" fg:w="1"/><text x="12.2982%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 1.20%)</title><rect x="12.0482%" y="245" width="1.2048%" height="15" fill="rgb(247,70,30)" fg:x="10" fg:w="1"/><text x="12.2982%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 1.20%)</title><rect x="12.0482%" y="229" width="1.2048%" height="15" fill="rgb(212,68,19)" fg:x="10" fg:w="1"/><text x="12.2982%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 1.20%)</title><rect x="12.0482%" y="213" width="1.2048%" height="15" fill="rgb(240,187,13)" fg:x="10" fg:w="1"/><text x="12.2982%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by_key (1 samples, 1.20%)</title><rect x="13.2530%" y="405" width="1.2048%" height="15" fill="rgb(223,113,26)" fg:x="11" fg:w="1"/><text x="13.5030%" y="415.50"></text></g><g><title>alloc::slice::merge_sort (1 samples, 1.20%)</title><rect x="13.2530%" y="389" width="1.2048%" height="15" fill="rgb(206,192,2)" fg:x="11" fg:w="1"/><text x="13.5030%" y="399.50"></text></g><g><title>alloc::slice::merge (1 samples, 1.20%)</title><rect x="13.2530%" y="373" width="1.2048%" height="15" fill="rgb(241,108,4)" fg:x="11" fg:w="1"/><text x="13.5030%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::slice::merge::MergeHole&lt;demoparser::parsing::entities::Prop&gt;&gt; (1 samples, 1.20%)</title><rect x="13.2530%" y="357" width="1.2048%" height="15" fill="rgb(247,173,49)" fg:x="11" fg:w="1"/><text x="13.5030%" y="367.50"></text></g><g><title>&lt;alloc::slice::merge::MergeHole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.20%)</title><rect x="13.2530%" y="341" width="1.2048%" height="15" fill="rgb(224,114,35)" fg:x="11" fg:w="1"/><text x="13.5030%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 1.20%)</title><rect x="13.2530%" y="325" width="1.2048%" height="15" fill="rgb(245,159,27)" fg:x="11" fg:w="1"/><text x="13.5030%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 1.20%)</title><rect x="13.2530%" y="309" width="1.2048%" height="15" fill="rgb(245,172,44)" fg:x="11" fg:w="1"/><text x="13.5030%" y="319.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1 samples, 1.20%)</title><rect x="14.4578%" y="373" width="1.2048%" height="15" fill="rgb(236,23,11)" fg:x="12" fg:w="1"/><text x="14.7078%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 1.20%)</title><rect x="14.4578%" y="357" width="1.2048%" height="15" fill="rgb(205,117,38)" fg:x="12" fg:w="1"/><text x="14.7078%" y="367.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 1.20%)</title><rect x="14.4578%" y="341" width="1.2048%" height="15" fill="rgb(237,72,25)" fg:x="12" fg:w="1"/><text x="14.7078%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 1.20%)</title><rect x="14.4578%" y="325" width="1.2048%" height="15" fill="rgb(244,70,9)" fg:x="12" fg:w="1"/><text x="14.7078%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 1.20%)</title><rect x="14.4578%" y="309" width="1.2048%" height="15" fill="rgb(217,125,39)" fg:x="12" fg:w="1"/><text x="14.7078%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 1.20%)</title><rect x="14.4578%" y="293" width="1.2048%" height="15" fill="rgb(235,36,10)" fg:x="12" fg:w="1"/><text x="14.7078%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 1.20%)</title><rect x="14.4578%" y="277" width="1.2048%" height="15" fill="rgb(251,123,47)" fg:x="12" fg:w="1"/><text x="14.7078%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 1.20%)</title><rect x="14.4578%" y="261" width="1.2048%" height="15" fill="rgb(221,13,13)" fg:x="12" fg:w="1"/><text x="14.7078%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 1.20%)</title><rect x="14.4578%" y="245" width="1.2048%" height="15" fill="rgb(238,131,9)" fg:x="12" fg:w="1"/><text x="14.7078%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 1.20%)</title><rect x="14.4578%" y="229" width="1.2048%" height="15" fill="rgb(211,50,8)" fg:x="12" fg:w="1"/><text x="14.7078%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 1.20%)</title><rect x="14.4578%" y="213" width="1.2048%" height="15" fill="rgb(245,182,24)" fg:x="12" fg:w="1"/><text x="14.7078%" y="223.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::flatten_dt (5 samples, 6.02%)</title><rect x="10.8434%" y="533" width="6.0241%" height="15" fill="rgb(242,14,37)" fg:x="9" fg:w="5"/><text x="11.0934%" y="543.50">demopars..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (5 samples, 6.02%)</title><rect x="10.8434%" y="517" width="6.0241%" height="15" fill="rgb(246,228,12)" fg:x="9" fg:w="5"/><text x="11.0934%" y="527.50">demopars..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (5 samples, 6.02%)</title><rect x="10.8434%" y="501" width="6.0241%" height="15" fill="rgb(213,55,15)" fg:x="9" fg:w="5"/><text x="11.0934%" y="511.50">demopars..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (5 samples, 6.02%)</title><rect x="10.8434%" y="485" width="6.0241%" height="15" fill="rgb(209,9,3)" fg:x="9" fg:w="5"/><text x="11.0934%" y="495.50">demopars..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (5 samples, 6.02%)</title><rect x="10.8434%" y="469" width="6.0241%" height="15" fill="rgb(230,59,30)" fg:x="9" fg:w="5"/><text x="11.0934%" y="479.50">demopars..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (5 samples, 6.02%)</title><rect x="10.8434%" y="453" width="6.0241%" height="15" fill="rgb(209,121,21)" fg:x="9" fg:w="5"/><text x="11.0934%" y="463.50">demopars..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (5 samples, 6.02%)</title><rect x="10.8434%" y="437" width="6.0241%" height="15" fill="rgb(220,109,13)" fg:x="9" fg:w="5"/><text x="11.0934%" y="447.50">demopars..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (4 samples, 4.82%)</title><rect x="12.0482%" y="421" width="4.8193%" height="15" fill="rgb(232,18,1)" fg:x="10" fg:w="4"/><text x="12.2982%" y="431.50">demopa..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (2 samples, 2.41%)</title><rect x="14.4578%" y="405" width="2.4096%" height="15" fill="rgb(215,41,42)" fg:x="12" fg:w="2"/><text x="14.7078%" y="415.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (2 samples, 2.41%)</title><rect x="14.4578%" y="389" width="2.4096%" height="15" fill="rgb(224,123,36)" fg:x="12" fg:w="2"/><text x="14.7078%" y="399.50">de..</text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (1 samples, 1.20%)</title><rect x="15.6627%" y="373" width="1.2048%" height="15" fill="rgb(240,125,3)" fg:x="13" fg:w="1"/><text x="15.9127%" y="383.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_datatable (6 samples, 7.23%)</title><rect x="10.8434%" y="549" width="7.2289%" height="15" fill="rgb(205,98,50)" fg:x="9" fg:w="6"/><text x="11.0934%" y="559.50">demoparser..</text></g><g><title>protobuf::message::Message::parse_from_bytes (1 samples, 1.20%)</title><rect x="16.8675%" y="533" width="1.2048%" height="15" fill="rgb(205,185,37)" fg:x="14" fg:w="1"/><text x="17.1175%" y="543.50"></text></g><g><title>protobuf::message::Message::parse_from (1 samples, 1.20%)</title><rect x="16.8675%" y="517" width="1.2048%" height="15" fill="rgb(238,207,15)" fg:x="14" fg:w="1"/><text x="17.1175%" y="527.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as protobuf::message::Message&gt;::merge_from (1 samples, 1.20%)</title><rect x="16.8675%" y="501" width="1.2048%" height="15" fill="rgb(213,199,42)" fg:x="14" fg:w="1"/><text x="17.1175%" y="511.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (1 samples, 1.20%)</title><rect x="16.8675%" y="485" width="1.2048%" height="15" fill="rgb(235,201,11)" fg:x="14" fg:w="1"/><text x="17.1175%" y="495.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (1 samples, 1.20%)</title><rect x="16.8675%" y="469" width="1.2048%" height="15" fill="rgb(207,46,11)" fg:x="14" fg:w="1"/><text x="17.1175%" y="479.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_send_table::Sendprop_t as protobuf::message::Message&gt;::merge_from (1 samples, 1.20%)</title><rect x="16.8675%" y="453" width="1.2048%" height="15" fill="rgb(241,35,35)" fg:x="14" fg:w="1"/><text x="17.1175%" y="463.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_string (1 samples, 1.20%)</title><rect x="16.8675%" y="437" width="1.2048%" height="15" fill="rgb(243,32,47)" fg:x="14" fg:w="1"/><text x="17.1175%" y="447.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_string_into (1 samples, 1.20%)</title><rect x="16.8675%" y="421" width="1.2048%" height="15" fill="rgb(247,202,23)" fg:x="14" fg:w="1"/><text x="17.1175%" y="431.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (1 samples, 1.20%)</title><rect x="16.8675%" y="405" width="1.2048%" height="15" fill="rgb(219,102,11)" fg:x="14" fg:w="1"/><text x="17.1175%" y="415.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (1 samples, 1.20%)</title><rect x="16.8675%" y="389" width="1.2048%" height="15" fill="rgb(243,110,44)" fg:x="14" fg:w="1"/><text x="17.1175%" y="399.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (1 samples, 1.20%)</title><rect x="16.8675%" y="373" width="1.2048%" height="15" fill="rgb(222,74,54)" fg:x="14" fg:w="1"/><text x="17.1175%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 1.20%)</title><rect x="16.8675%" y="357" width="1.2048%" height="15" fill="rgb(216,99,12)" fg:x="14" fg:w="1"/><text x="17.1175%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 1.20%)</title><rect x="16.8675%" y="341" width="1.2048%" height="15" fill="rgb(226,22,26)" fg:x="14" fg:w="1"/><text x="17.1175%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (1 samples, 1.20%)</title><rect x="16.8675%" y="325" width="1.2048%" height="15" fill="rgb(217,163,10)" fg:x="14" fg:w="1"/><text x="17.1175%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (1 samples, 1.20%)</title><rect x="16.8675%" y="309" width="1.2048%" height="15" fill="rgb(213,25,53)" fg:x="14" fg:w="1"/><text x="17.1175%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 1.20%)</title><rect x="16.8675%" y="293" width="1.2048%" height="15" fill="rgb(252,105,26)" fg:x="14" fg:w="1"/><text x="17.1175%" y="303.50"></text></g><g><title>__rust_alloc (1 samples, 1.20%)</title><rect x="16.8675%" y="277" width="1.2048%" height="15" fill="rgb(220,39,43)" fg:x="14" fg:w="1"/><text x="17.1175%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 1.20%)</title><rect x="18.0723%" y="485" width="1.2048%" height="15" fill="rgb(229,68,48)" fg:x="15" fg:w="1"/><text x="18.3223%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 1.20%)</title><rect x="18.0723%" y="469" width="1.2048%" height="15" fill="rgb(252,8,32)" fg:x="15" fg:w="1"/><text x="18.3223%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 1.20%)</title><rect x="18.0723%" y="453" width="1.2048%" height="15" fill="rgb(223,20,43)" fg:x="15" fg:w="1"/><text x="18.3223%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 1.20%)</title><rect x="18.0723%" y="437" width="1.2048%" height="15" fill="rgb(229,81,49)" fg:x="15" fg:w="1"/><text x="18.3223%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 1.20%)</title><rect x="18.0723%" y="421" width="1.2048%" height="15" fill="rgb(236,28,36)" fg:x="15" fg:w="1"/><text x="18.3223%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 1.20%)</title><rect x="18.0723%" y="405" width="1.2048%" height="15" fill="rgb(249,185,26)" fg:x="15" fg:w="1"/><text x="18.3223%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 1.20%)</title><rect x="18.0723%" y="389" width="1.2048%" height="15" fill="rgb(249,174,33)" fg:x="15" fg:w="1"/><text x="18.3223%" y="399.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 1.20%)</title><rect x="18.0723%" y="373" width="1.2048%" height="15" fill="rgb(233,201,37)" fg:x="15" fg:w="1"/><text x="18.3223%" y="383.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 1.20%)</title><rect x="18.0723%" y="357" width="1.2048%" height="15" fill="rgb(221,78,26)" fg:x="15" fg:w="1"/><text x="18.3223%" y="367.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 1.20%)</title><rect x="18.0723%" y="341" width="1.2048%" height="15" fill="rgb(250,127,30)" fg:x="15" fg:w="1"/><text x="18.3223%" y="351.50"></text></g><g><title>_mi_memcpy (1 samples, 1.20%)</title><rect x="18.0723%" y="325" width="1.2048%" height="15" fill="rgb(230,49,44)" fg:x="15" fg:w="1"/><text x="18.3223%" y="335.50"></text></g><g><title>memcpy (1 samples, 1.20%)</title><rect x="18.0723%" y="309" width="1.2048%" height="15" fill="rgb(229,67,23)" fg:x="15" fg:w="1"/><text x="18.3223%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 1.20%)</title><rect x="18.0723%" y="293" width="1.2048%" height="15" fill="rgb(249,83,47)" fg:x="15" fg:w="1"/><text x="18.3223%" y="303.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="18.0723%" y="277" width="1.2048%" height="15" fill="rgb(215,43,3)" fg:x="15" fg:w="1"/><text x="18.3223%" y="287.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="18.0723%" y="261" width="1.2048%" height="15" fill="rgb(238,154,13)" fg:x="15" fg:w="1"/><text x="18.3223%" y="271.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="18.0723%" y="245" width="1.2048%" height="15" fill="rgb(219,56,2)" fg:x="15" fg:w="1"/><text x="18.3223%" y="255.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="18.0723%" y="229" width="1.2048%" height="15" fill="rgb(233,0,4)" fg:x="15" fg:w="1"/><text x="18.3223%" y="239.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="18.0723%" y="213" width="1.2048%" height="15" fill="rgb(235,30,7)" fg:x="15" fg:w="1"/><text x="18.3223%" y="223.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="18.0723%" y="197" width="1.2048%" height="15" fill="rgb(250,79,13)" fg:x="15" fg:w="1"/><text x="18.3223%" y="207.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="18.0723%" y="181" width="1.2048%" height="15" fill="rgb(211,146,34)" fg:x="15" fg:w="1"/><text x="18.3223%" y="191.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="18.0723%" y="165" width="1.2048%" height="15" fill="rgb(228,22,38)" fg:x="15" fg:w="1"/><text x="18.3223%" y="175.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="18.0723%" y="149" width="1.2048%" height="15" fill="rgb(235,168,5)" fg:x="15" fg:w="1"/><text x="18.3223%" y="159.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="18.0723%" y="133" width="1.2048%" height="15" fill="rgb(221,155,16)" fg:x="15" fg:w="1"/><text x="18.3223%" y="143.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="18.0723%" y="117" width="1.2048%" height="15" fill="rgb(215,215,53)" fg:x="15" fg:w="1"/><text x="18.3223%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 2.41%)</title><rect x="18.0723%" y="533" width="2.4096%" height="15" fill="rgb(223,4,10)" fg:x="15" fg:w="2"/><text x="18.3223%" y="543.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 2.41%)</title><rect x="18.0723%" y="517" width="2.4096%" height="15" fill="rgb(234,103,6)" fg:x="15" fg:w="2"/><text x="18.3223%" y="527.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 2.41%)</title><rect x="18.0723%" y="501" width="2.4096%" height="15" fill="rgb(227,97,0)" fg:x="15" fg:w="2"/><text x="18.3223%" y="511.50">al..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 1.20%)</title><rect x="19.2771%" y="485" width="1.2048%" height="15" fill="rgb(234,150,53)" fg:x="16" fg:w="1"/><text x="19.5271%" y="495.50"></text></g><g><title>[libc.so.6] (1 samples, 1.20%)</title><rect x="19.2771%" y="469" width="1.2048%" height="15" fill="rgb(228,201,54)" fg:x="16" fg:w="1"/><text x="19.5271%" y="479.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="19.2771%" y="453" width="1.2048%" height="15" fill="rgb(222,22,37)" fg:x="16" fg:w="1"/><text x="19.5271%" y="463.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="19.2771%" y="437" width="1.2048%" height="15" fill="rgb(237,53,32)" fg:x="16" fg:w="1"/><text x="19.5271%" y="447.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="19.2771%" y="421" width="1.2048%" height="15" fill="rgb(233,25,53)" fg:x="16" fg:w="1"/><text x="19.5271%" y="431.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="19.2771%" y="405" width="1.2048%" height="15" fill="rgb(210,40,34)" fg:x="16" fg:w="1"/><text x="19.5271%" y="415.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="19.2771%" y="389" width="1.2048%" height="15" fill="rgb(241,220,44)" fg:x="16" fg:w="1"/><text x="19.5271%" y="399.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="19.2771%" y="373" width="1.2048%" height="15" fill="rgb(235,28,35)" fg:x="16" fg:w="1"/><text x="19.5271%" y="383.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="19.2771%" y="357" width="1.2048%" height="15" fill="rgb(210,56,17)" fg:x="16" fg:w="1"/><text x="19.5271%" y="367.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="19.2771%" y="341" width="1.2048%" height="15" fill="rgb(224,130,29)" fg:x="16" fg:w="1"/><text x="19.5271%" y="351.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="19.2771%" y="325" width="1.2048%" height="15" fill="rgb(235,212,8)" fg:x="16" fg:w="1"/><text x="19.5271%" y="335.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="19.2771%" y="309" width="1.2048%" height="15" fill="rgb(223,33,50)" fg:x="16" fg:w="1"/><text x="19.5271%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (1 samples, 1.20%)</title><rect x="20.4819%" y="485" width="1.2048%" height="15" fill="rgb(219,149,13)" fg:x="17" fg:w="1"/><text x="20.7319%" y="495.50"></text></g><g><title>core::str::pattern::Pattern::is_contained_in (1 samples, 1.20%)</title><rect x="20.4819%" y="469" width="1.2048%" height="15" fill="rgb(250,156,29)" fg:x="17" fg:w="1"/><text x="20.7319%" y="479.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (1 samples, 1.20%)</title><rect x="20.4819%" y="453" width="1.2048%" height="15" fill="rgb(216,193,19)" fg:x="17" fg:w="1"/><text x="20.7319%" y="463.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 1.20%)</title><rect x="20.4819%" y="437" width="1.2048%" height="15" fill="rgb(216,135,14)" fg:x="17" fg:w="1"/><text x="20.7319%" y="447.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 1.20%)</title><rect x="20.4819%" y="421" width="1.2048%" height="15" fill="rgb(241,47,5)" fg:x="17" fg:w="1"/><text x="20.7319%" y="431.50"></text></g><g><title>demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_packet_entities (3 samples, 3.61%)</title><rect x="20.4819%" y="533" width="3.6145%" height="15" fill="rgb(233,42,35)" fg:x="17" fg:w="3"/><text x="20.7319%" y="543.50">demo..</text></g><g><title>demoparser::parsing::entities::update_entity (3 samples, 3.61%)</title><rect x="20.4819%" y="517" width="3.6145%" height="15" fill="rgb(231,13,6)" fg:x="17" fg:w="3"/><text x="20.7319%" y="527.50">demo..</text></g><g><title>demoparser::parsing::entities::parse_ent_props (3 samples, 3.61%)</title><rect x="20.4819%" y="501" width="3.6145%" height="15" fill="rgb(207,181,40)" fg:x="17" fg:w="3"/><text x="20.7319%" y="511.50">demo..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode (2 samples, 2.41%)</title><rect x="21.6867%" y="485" width="2.4096%" height="15" fill="rgb(254,173,49)" fg:x="18" fg:w="2"/><text x="21.9367%" y="495.50">de..</text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (1 samples, 1.20%)</title><rect x="24.0964%" y="501" width="1.2048%" height="15" fill="rgb(221,1,38)" fg:x="20" fg:w="1"/><text x="24.3464%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 1.20%)</title><rect x="24.0964%" y="485" width="1.2048%" height="15" fill="rgb(206,124,46)" fg:x="20" fg:w="1"/><text x="24.3464%" y="495.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 1.20%)</title><rect x="24.0964%" y="469" width="1.2048%" height="15" fill="rgb(249,21,11)" fg:x="20" fg:w="1"/><text x="24.3464%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 1.20%)</title><rect x="24.0964%" y="453" width="1.2048%" height="15" fill="rgb(222,201,40)" fg:x="20" fg:w="1"/><text x="24.3464%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 1.20%)</title><rect x="24.0964%" y="437" width="1.2048%" height="15" fill="rgb(235,61,29)" fg:x="20" fg:w="1"/><text x="24.3464%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 1.20%)</title><rect x="24.0964%" y="421" width="1.2048%" height="15" fill="rgb(219,207,3)" fg:x="20" fg:w="1"/><text x="24.3464%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 1.20%)</title><rect x="24.0964%" y="405" width="1.2048%" height="15" fill="rgb(222,56,46)" fg:x="20" fg:w="1"/><text x="24.3464%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 1.20%)</title><rect x="24.0964%" y="389" width="1.2048%" height="15" fill="rgb(239,76,54)" fg:x="20" fg:w="1"/><text x="24.3464%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 1.20%)</title><rect x="24.0964%" y="373" width="1.2048%" height="15" fill="rgb(231,124,27)" fg:x="20" fg:w="1"/><text x="24.3464%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 1.20%)</title><rect x="24.0964%" y="357" width="1.2048%" height="15" fill="rgb(249,195,6)" fg:x="20" fg:w="1"/><text x="24.3464%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 1.20%)</title><rect x="24.0964%" y="341" width="1.2048%" height="15" fill="rgb(237,174,47)" fg:x="20" fg:w="1"/><text x="24.3464%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 1.20%)</title><rect x="24.0964%" y="325" width="1.2048%" height="15" fill="rgb(206,201,31)" fg:x="20" fg:w="1"/><text x="24.3464%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 1.20%)</title><rect x="24.0964%" y="309" width="1.2048%" height="15" fill="rgb(231,57,52)" fg:x="20" fg:w="1"/><text x="24.3464%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 1.20%)</title><rect x="24.0964%" y="293" width="1.2048%" height="15" fill="rgb(248,177,22)" fg:x="20" fg:w="1"/><text x="24.3464%" y="303.50"></text></g><g><title>_mi_malloc_generic (1 samples, 1.20%)</title><rect x="24.0964%" y="277" width="1.2048%" height="15" fill="rgb(215,211,37)" fg:x="20" fg:w="1"/><text x="24.3464%" y="287.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 1.20%)</title><rect x="25.3012%" y="501" width="1.2048%" height="15" fill="rgb(241,128,51)" fg:x="21" fg:w="1"/><text x="25.5512%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 1.20%)</title><rect x="25.3012%" y="485" width="1.2048%" height="15" fill="rgb(227,165,31)" fg:x="21" fg:w="1"/><text x="25.5512%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 1.20%)</title><rect x="25.3012%" y="469" width="1.2048%" height="15" fill="rgb(228,167,24)" fg:x="21" fg:w="1"/><text x="25.5512%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 1.20%)</title><rect x="25.3012%" y="453" width="1.2048%" height="15" fill="rgb(228,143,12)" fg:x="21" fg:w="1"/><text x="25.5512%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 1.20%)</title><rect x="25.3012%" y="437" width="1.2048%" height="15" fill="rgb(249,149,8)" fg:x="21" fg:w="1"/><text x="25.5512%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 1.20%)</title><rect x="25.3012%" y="421" width="1.2048%" height="15" fill="rgb(243,35,44)" fg:x="21" fg:w="1"/><text x="25.5512%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 1.20%)</title><rect x="25.3012%" y="405" width="1.2048%" height="15" fill="rgb(246,89,9)" fg:x="21" fg:w="1"/><text x="25.5512%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 1.20%)</title><rect x="25.3012%" y="389" width="1.2048%" height="15" fill="rgb(233,213,13)" fg:x="21" fg:w="1"/><text x="25.5512%" y="399.50"></text></g><g><title>[libc.so.6] (1 samples, 1.20%)</title><rect x="25.3012%" y="373" width="1.2048%" height="15" fill="rgb(233,141,41)" fg:x="21" fg:w="1"/><text x="25.5512%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 4.82%)</title><rect x="26.5060%" y="501" width="4.8193%" height="15" fill="rgb(239,167,4)" fg:x="22" fg:w="4"/><text x="26.7560%" y="511.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 4.82%)</title><rect x="26.5060%" y="485" width="4.8193%" height="15" fill="rgb(209,217,16)" fg:x="22" fg:w="4"/><text x="26.7560%" y="495.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 4.82%)</title><rect x="26.5060%" y="469" width="4.8193%" height="15" fill="rgb(219,88,35)" fg:x="22" fg:w="4"/><text x="26.7560%" y="479.50">alloc:..</text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 4.82%)</title><rect x="26.5060%" y="453" width="4.8193%" height="15" fill="rgb(220,193,23)" fg:x="22" fg:w="4"/><text x="26.7560%" y="463.50">alloc:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 4.82%)</title><rect x="26.5060%" y="437" width="4.8193%" height="15" fill="rgb(230,90,52)" fg:x="22" fg:w="4"/><text x="26.7560%" y="447.50">&lt;alloc..</text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 4.82%)</title><rect x="26.5060%" y="421" width="4.8193%" height="15" fill="rgb(252,106,19)" fg:x="22" fg:w="4"/><text x="26.7560%" y="431.50">alloc:..</text></g><g><title>alloc::alloc::realloc (4 samples, 4.82%)</title><rect x="26.5060%" y="405" width="4.8193%" height="15" fill="rgb(206,74,20)" fg:x="22" fg:w="4"/><text x="26.7560%" y="415.50">alloc:..</text></g><g><title>_mi_heap_realloc_zero (4 samples, 4.82%)</title><rect x="26.5060%" y="389" width="4.8193%" height="15" fill="rgb(230,138,44)" fg:x="22" fg:w="4"/><text x="26.7560%" y="399.50">_mi_he..</text></g><g><title>mi_heap_malloc (4 samples, 4.82%)</title><rect x="26.5060%" y="373" width="4.8193%" height="15" fill="rgb(235,182,43)" fg:x="22" fg:w="4"/><text x="26.7560%" y="383.50">mi_hea..</text></g><g><title>_mi_malloc_generic (4 samples, 4.82%)</title><rect x="26.5060%" y="357" width="4.8193%" height="15" fill="rgb(242,16,51)" fg:x="22" fg:w="4"/><text x="26.7560%" y="367.50">_mi_ma..</text></g><g><title>mi_find_page (4 samples, 4.82%)</title><rect x="26.5060%" y="341" width="4.8193%" height="15" fill="rgb(248,9,4)" fg:x="22" fg:w="4"/><text x="26.7560%" y="351.50">mi_fin..</text></g><g><title>mi_find_free_page (4 samples, 4.82%)</title><rect x="26.5060%" y="325" width="4.8193%" height="15" fill="rgb(210,31,22)" fg:x="22" fg:w="4"/><text x="26.7560%" y="335.50">mi_fin..</text></g><g><title>mi_page_queue_find_free_ex (4 samples, 4.82%)</title><rect x="26.5060%" y="309" width="4.8193%" height="15" fill="rgb(239,54,39)" fg:x="22" fg:w="4"/><text x="26.7560%" y="319.50">mi_pag..</text></g><g><title>mi_page_extend_free (4 samples, 4.82%)</title><rect x="26.5060%" y="293" width="4.8193%" height="15" fill="rgb(230,99,41)" fg:x="22" fg:w="4"/><text x="26.7560%" y="303.50">mi_pag..</text></g><g><title>mi_page_extend_free (4 samples, 4.82%)</title><rect x="26.5060%" y="277" width="4.8193%" height="15" fill="rgb(253,106,12)" fg:x="22" fg:w="4"/><text x="26.7560%" y="287.50">mi_pag..</text></g><g><title>mi_page_free_list_extend (4 samples, 4.82%)</title><rect x="26.5060%" y="261" width="4.8193%" height="15" fill="rgb(213,46,41)" fg:x="22" fg:w="4"/><text x="26.7560%" y="271.50">mi_pag..</text></g><g><title>mi_block_set_next (4 samples, 4.82%)</title><rect x="26.5060%" y="245" width="4.8193%" height="15" fill="rgb(215,133,35)" fg:x="22" fg:w="4"/><text x="26.7560%" y="255.50">mi_blo..</text></g><g><title>mi_block_set_nextx (4 samples, 4.82%)</title><rect x="26.5060%" y="229" width="4.8193%" height="15" fill="rgb(213,28,5)" fg:x="22" fg:w="4"/><text x="26.7560%" y="239.50">mi_blo..</text></g><g><title>[unknown] (4 samples, 4.82%)</title><rect x="26.5060%" y="213" width="4.8193%" height="15" fill="rgb(215,77,49)" fg:x="22" fg:w="4"/><text x="26.7560%" y="223.50">[unkno..</text></g><g><title>[unknown] (4 samples, 4.82%)</title><rect x="26.5060%" y="197" width="4.8193%" height="15" fill="rgb(248,100,22)" fg:x="22" fg:w="4"/><text x="26.7560%" y="207.50">[unkno..</text></g><g><title>[unknown] (4 samples, 4.82%)</title><rect x="26.5060%" y="181" width="4.8193%" height="15" fill="rgb(208,67,9)" fg:x="22" fg:w="4"/><text x="26.7560%" y="191.50">[unkno..</text></g><g><title>[unknown] (4 samples, 4.82%)</title><rect x="26.5060%" y="165" width="4.8193%" height="15" fill="rgb(219,133,21)" fg:x="22" fg:w="4"/><text x="26.7560%" y="175.50">[unkno..</text></g><g><title>[unknown] (4 samples, 4.82%)</title><rect x="26.5060%" y="149" width="4.8193%" height="15" fill="rgb(246,46,29)" fg:x="22" fg:w="4"/><text x="26.7560%" y="159.50">[unkno..</text></g><g><title>[unknown] (4 samples, 4.82%)</title><rect x="26.5060%" y="133" width="4.8193%" height="15" fill="rgb(246,185,52)" fg:x="22" fg:w="4"/><text x="26.7560%" y="143.50">[unkno..</text></g><g><title>[unknown] (4 samples, 4.82%)</title><rect x="26.5060%" y="117" width="4.8193%" height="15" fill="rgb(252,136,11)" fg:x="22" fg:w="4"/><text x="26.7560%" y="127.50">[unkno..</text></g><g><title>[unknown] (4 samples, 4.82%)</title><rect x="26.5060%" y="101" width="4.8193%" height="15" fill="rgb(219,138,53)" fg:x="22" fg:w="4"/><text x="26.7560%" y="111.50">[unkno..</text></g><g><title>[unknown] (4 samples, 4.82%)</title><rect x="26.5060%" y="85" width="4.8193%" height="15" fill="rgb(211,51,23)" fg:x="22" fg:w="4"/><text x="26.7560%" y="95.50">[unkno..</text></g><g><title>[unknown] (3 samples, 3.61%)</title><rect x="27.7108%" y="69" width="3.6145%" height="15" fill="rgb(247,221,28)" fg:x="23" fg:w="3"/><text x="27.9608%" y="79.50">[unk..</text></g><g><title>[unknown] (3 samples, 3.61%)</title><rect x="27.7108%" y="53" width="3.6145%" height="15" fill="rgb(251,222,45)" fg:x="23" fg:w="3"/><text x="27.9608%" y="63.50">[unk..</text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="30.1205%" y="37" width="1.2048%" height="15" fill="rgb(217,162,53)" fg:x="25" fg:w="1"/><text x="30.3705%" y="47.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 1.20%)</title><rect x="31.3253%" y="501" width="1.2048%" height="15" fill="rgb(229,93,14)" fg:x="26" fg:w="1"/><text x="31.5753%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 1.20%)</title><rect x="31.3253%" y="485" width="1.2048%" height="15" fill="rgb(209,67,49)" fg:x="26" fg:w="1"/><text x="31.5753%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 1.20%)</title><rect x="31.3253%" y="469" width="1.2048%" height="15" fill="rgb(213,87,29)" fg:x="26" fg:w="1"/><text x="31.5753%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 1.20%)</title><rect x="31.3253%" y="453" width="1.2048%" height="15" fill="rgb(205,151,52)" fg:x="26" fg:w="1"/><text x="31.5753%" y="463.50"></text></g><g><title>demoparser::parsing::game_events::parse_key (1 samples, 1.20%)</title><rect x="32.5301%" y="501" width="1.2048%" height="15" fill="rgb(253,215,39)" fg:x="27" fg:w="1"/><text x="32.7801%" y="511.50"></text></g><g><title>csgoproto::netmessages::csvcmsg_game_event::Key_t::val_string (1 samples, 1.20%)</title><rect x="32.5301%" y="485" width="1.2048%" height="15" fill="rgb(221,220,41)" fg:x="27" fg:w="1"/><text x="32.7801%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 1.20%)</title><rect x="32.5301%" y="469" width="1.2048%" height="15" fill="rgb(218,133,21)" fg:x="27" fg:w="1"/><text x="32.7801%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 1.20%)</title><rect x="33.7349%" y="485" width="1.2048%" height="15" fill="rgb(221,193,43)" fg:x="28" fg:w="1"/><text x="33.9849%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (1 samples, 1.20%)</title><rect x="33.7349%" y="469" width="1.2048%" height="15" fill="rgb(240,128,52)" fg:x="28" fg:w="1"/><text x="33.9849%" y="479.50"></text></g><g><title>demoparser::parsing::game_events::parse_key_steam_name (4 samples, 4.82%)</title><rect x="33.7349%" y="501" width="4.8193%" height="15" fill="rgb(253,114,12)" fg:x="28" fg:w="4"/><text x="33.9849%" y="511.50">demopa..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (3 samples, 3.61%)</title><rect x="34.9398%" y="485" width="3.6145%" height="15" fill="rgb(215,223,47)" fg:x="29" fg:w="3"/><text x="35.1898%" y="495.50">core..</text></g><g><title>core::str::pattern::ReverseSearcher::next_reject_back (3 samples, 3.61%)</title><rect x="34.9398%" y="469" width="3.6145%" height="15" fill="rgb(248,225,23)" fg:x="29" fg:w="3"/><text x="35.1898%" y="479.50">core..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::ReverseSearcher&gt;::next_back (3 samples, 3.61%)</title><rect x="34.9398%" y="453" width="3.6145%" height="15" fill="rgb(250,108,0)" fg:x="29" fg:w="3"/><text x="35.1898%" y="463.50">&lt;cor..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3 samples, 3.61%)</title><rect x="34.9398%" y="437" width="3.6145%" height="15" fill="rgb(228,208,7)" fg:x="29" fg:w="3"/><text x="35.1898%" y="447.50">&lt;cor..</text></g><g><title>core::str::validations::next_code_point_reverse (3 samples, 3.61%)</title><rect x="34.9398%" y="421" width="3.6145%" height="15" fill="rgb(244,45,10)" fg:x="29" fg:w="3"/><text x="35.1898%" y="431.50">core..</text></g><g><title>demoparser::parsing::game_events::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_game_events (14 samples, 16.87%)</title><rect x="24.0964%" y="533" width="16.8675%" height="15" fill="rgb(207,125,25)" fg:x="20" fg:w="14"/><text x="24.3464%" y="543.50">demoparser::parsing::game_..</text></g><g><title>demoparser::parsing::game_events::gen_name_val_pairs (14 samples, 16.87%)</title><rect x="24.0964%" y="517" width="16.8675%" height="15" fill="rgb(210,195,18)" fg:x="20" fg:w="14"/><text x="24.3464%" y="527.50">demoparser::parsing::game_..</text></g><g><title>demoparser::parsing::game_events::parse_props (2 samples, 2.41%)</title><rect x="38.5542%" y="501" width="2.4096%" height="15" fill="rgb(249,80,12)" fg:x="32" fg:w="2"/><text x="38.8042%" y="511.50">de..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 2.41%)</title><rect x="38.5542%" y="485" width="2.4096%" height="15" fill="rgb(221,65,9)" fg:x="32" fg:w="2"/><text x="38.8042%" y="495.50">st..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 2.41%)</title><rect x="38.5542%" y="469" width="2.4096%" height="15" fill="rgb(235,49,36)" fg:x="32" fg:w="2"/><text x="38.8042%" y="479.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 2.41%)</title><rect x="38.5542%" y="453" width="2.4096%" height="15" fill="rgb(225,32,20)" fg:x="32" fg:w="2"/><text x="38.8042%" y="463.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 2.41%)</title><rect x="38.5542%" y="437" width="2.4096%" height="15" fill="rgb(215,141,46)" fg:x="32" fg:w="2"/><text x="38.8042%" y="447.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 2.41%)</title><rect x="38.5542%" y="421" width="2.4096%" height="15" fill="rgb(250,160,47)" fg:x="32" fg:w="2"/><text x="38.8042%" y="431.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 2.41%)</title><rect x="38.5542%" y="405" width="2.4096%" height="15" fill="rgb(216,222,40)" fg:x="32" fg:w="2"/><text x="38.8042%" y="415.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 1.20%)</title><rect x="39.7590%" y="389" width="1.2048%" height="15" fill="rgb(234,217,39)" fg:x="33" fg:w="1"/><text x="40.0090%" y="399.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 1.20%)</title><rect x="39.7590%" y="373" width="1.2048%" height="15" fill="rgb(207,178,40)" fg:x="33" fg:w="1"/><text x="40.0090%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 1.20%)</title><rect x="39.7590%" y="357" width="1.2048%" height="15" fill="rgb(221,136,13)" fg:x="33" fg:w="1"/><text x="40.0090%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 1.20%)</title><rect x="39.7590%" y="341" width="1.2048%" height="15" fill="rgb(249,199,10)" fg:x="33" fg:w="1"/><text x="40.0090%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 1.20%)</title><rect x="39.7590%" y="325" width="1.2048%" height="15" fill="rgb(249,222,13)" fg:x="33" fg:w="1"/><text x="40.0090%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 1.20%)</title><rect x="39.7590%" y="309" width="1.2048%" height="15" fill="rgb(244,185,38)" fg:x="33" fg:w="1"/><text x="40.0090%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 1.20%)</title><rect x="39.7590%" y="293" width="1.2048%" height="15" fill="rgb(236,202,9)" fg:x="33" fg:w="1"/><text x="40.0090%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 1.20%)</title><rect x="39.7590%" y="277" width="1.2048%" height="15" fill="rgb(250,229,37)" fg:x="33" fg:w="1"/><text x="40.0090%" y="287.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_varint (6 samples, 7.23%)</title><rect x="40.9639%" y="533" width="7.2289%" height="15" fill="rgb(206,174,23)" fg:x="34" fg:w="6"/><text x="41.2139%" y="543.50">demoparser..</text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="46.9880%" y="517" width="1.2048%" height="15" fill="rgb(211,33,43)" fg:x="39" fg:w="1"/><text x="47.2380%" y="527.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="46.9880%" y="501" width="1.2048%" height="15" fill="rgb(245,58,50)" fg:x="39" fg:w="1"/><text x="47.2380%" y="511.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="46.9880%" y="485" width="1.2048%" height="15" fill="rgb(244,68,36)" fg:x="39" fg:w="1"/><text x="47.2380%" y="495.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="46.9880%" y="469" width="1.2048%" height="15" fill="rgb(232,229,15)" fg:x="39" fg:w="1"/><text x="47.2380%" y="479.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="46.9880%" y="453" width="1.2048%" height="15" fill="rgb(254,30,23)" fg:x="39" fg:w="1"/><text x="47.2380%" y="463.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="46.9880%" y="437" width="1.2048%" height="15" fill="rgb(235,160,14)" fg:x="39" fg:w="1"/><text x="47.2380%" y="447.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="46.9880%" y="421" width="1.2048%" height="15" fill="rgb(212,155,44)" fg:x="39" fg:w="1"/><text x="47.2380%" y="431.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="46.9880%" y="405" width="1.2048%" height="15" fill="rgb(226,2,50)" fg:x="39" fg:w="1"/><text x="47.2380%" y="415.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="46.9880%" y="389" width="1.2048%" height="15" fill="rgb(234,177,6)" fg:x="39" fg:w="1"/><text x="47.2380%" y="399.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="46.9880%" y="373" width="1.2048%" height="15" fill="rgb(217,24,9)" fg:x="39" fg:w="1"/><text x="47.2380%" y="383.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="46.9880%" y="357" width="1.2048%" height="15" fill="rgb(220,13,46)" fg:x="39" fg:w="1"/><text x="47.2380%" y="367.50"></text></g><g><title>demoparser::parsing::entities::parse_baselines (1 samples, 1.20%)</title><rect x="50.6024%" y="517" width="1.2048%" height="15" fill="rgb(239,221,27)" fg:x="42" fg:w="1"/><text x="50.8524%" y="527.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 1.20%)</title><rect x="50.6024%" y="501" width="1.2048%" height="15" fill="rgb(222,198,25)" fg:x="42" fg:w="1"/><text x="50.8524%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 1.20%)</title><rect x="50.6024%" y="485" width="1.2048%" height="15" fill="rgb(211,99,13)" fg:x="42" fg:w="1"/><text x="50.8524%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 1.20%)</title><rect x="50.6024%" y="469" width="1.2048%" height="15" fill="rgb(232,111,31)" fg:x="42" fg:w="1"/><text x="50.8524%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 1.20%)</title><rect x="50.6024%" y="453" width="1.2048%" height="15" fill="rgb(245,82,37)" fg:x="42" fg:w="1"/><text x="50.8524%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 1.20%)</title><rect x="50.6024%" y="437" width="1.2048%" height="15" fill="rgb(227,149,46)" fg:x="42" fg:w="1"/><text x="50.8524%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 1.20%)</title><rect x="50.6024%" y="421" width="1.2048%" height="15" fill="rgb(218,36,50)" fg:x="42" fg:w="1"/><text x="50.8524%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 1.20%)</title><rect x="50.6024%" y="405" width="1.2048%" height="15" fill="rgb(226,80,48)" fg:x="42" fg:w="1"/><text x="50.8524%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 1.20%)</title><rect x="50.6024%" y="389" width="1.2048%" height="15" fill="rgb(238,224,15)" fg:x="42" fg:w="1"/><text x="50.8524%" y="399.50"></text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Demo&gt;::update_string_table_msg (5 samples, 6.02%)</title><rect x="48.1928%" y="533" width="6.0241%" height="15" fill="rgb(241,136,10)" fg:x="40" fg:w="5"/><text x="48.4428%" y="543.50">demopars..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_string (2 samples, 2.41%)</title><rect x="51.8072%" y="517" width="2.4096%" height="15" fill="rgb(208,32,45)" fg:x="43" fg:w="2"/><text x="52.0572%" y="527.50">de..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 2.41%)</title><rect x="51.8072%" y="501" width="2.4096%" height="15" fill="rgb(207,135,9)" fg:x="43" fg:w="2"/><text x="52.0572%" y="511.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 1.20%)</title><rect x="53.0120%" y="485" width="1.2048%" height="15" fill="rgb(206,86,44)" fg:x="44" fg:w="1"/><text x="53.2620%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 1.20%)</title><rect x="53.0120%" y="469" width="1.2048%" height="15" fill="rgb(245,177,15)" fg:x="44" fg:w="1"/><text x="53.2620%" y="479.50"></text></g><g><title>core::cmp::max (1 samples, 1.20%)</title><rect x="53.0120%" y="453" width="1.2048%" height="15" fill="rgb(206,64,50)" fg:x="44" fg:w="1"/><text x="53.2620%" y="463.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 1.20%)</title><rect x="53.0120%" y="437" width="1.2048%" height="15" fill="rgb(234,36,40)" fg:x="44" fg:w="1"/><text x="53.2620%" y="447.50"></text></g><g><title>core::cmp::max_by (1 samples, 1.20%)</title><rect x="53.0120%" y="421" width="1.2048%" height="15" fill="rgb(213,64,8)" fg:x="44" fg:w="1"/><text x="53.2620%" y="431.50"></text></g><g><title>&lt;protobuf::coded_input_stream::buf_read_iter::BufReadIter as core::ops::drop::Drop&gt;::drop (1 samples, 1.20%)</title><rect x="54.2169%" y="517" width="1.2048%" height="15" fill="rgb(210,75,36)" fg:x="45" fg:w="1"/><text x="54.4669%" y="527.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::check_eof (3 samples, 3.61%)</title><rect x="55.4217%" y="517" width="3.6145%" height="15" fill="rgb(229,88,21)" fg:x="46" fg:w="3"/><text x="55.6717%" y="527.50">prot..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::eof (3 samples, 3.61%)</title><rect x="55.4217%" y="501" width="3.6145%" height="15" fill="rgb(252,204,47)" fg:x="46" fg:w="3"/><text x="55.6717%" y="511.50">prot..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::eof (3 samples, 3.61%)</title><rect x="55.4217%" y="485" width="3.6145%" height="15" fill="rgb(208,77,27)" fg:x="46" fg:w="3"/><text x="55.6717%" y="495.50">prot..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::fill_buf (2 samples, 2.41%)</title><rect x="56.6265%" y="469" width="2.4096%" height="15" fill="rgb(221,76,26)" fg:x="47" fg:w="2"/><text x="56.8765%" y="479.50">pr..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::fill_buf_slow (2 samples, 2.41%)</title><rect x="56.6265%" y="453" width="2.4096%" height="15" fill="rgb(225,139,18)" fg:x="47" fg:w="2"/><text x="56.8765%" y="463.50">pr..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::pos (1 samples, 1.20%)</title><rect x="57.8313%" y="437" width="1.2048%" height="15" fill="rgb(230,137,11)" fg:x="48" fg:w="1"/><text x="58.0813%" y="447.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::pos_within_buf (1 samples, 1.20%)</title><rect x="57.8313%" y="421" width="1.2048%" height="15" fill="rgb(212,28,1)" fg:x="48" fg:w="1"/><text x="58.0813%" y="431.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 1.20%)</title><rect x="61.4458%" y="485" width="1.2048%" height="15" fill="rgb(248,164,17)" fg:x="51" fg:w="1"/><text x="61.6958%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 1.20%)</title><rect x="62.6506%" y="421" width="1.2048%" height="15" fill="rgb(222,171,42)" fg:x="52" fg:w="1"/><text x="62.9006%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 1.20%)</title><rect x="62.6506%" y="405" width="1.2048%" height="15" fill="rgb(243,84,45)" fg:x="52" fg:w="1"/><text x="62.9006%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (1 samples, 1.20%)</title><rect x="62.6506%" y="389" width="1.2048%" height="15" fill="rgb(252,49,23)" fg:x="52" fg:w="1"/><text x="62.9006%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (1 samples, 1.20%)</title><rect x="62.6506%" y="373" width="1.2048%" height="15" fill="rgb(215,19,7)" fg:x="52" fg:w="1"/><text x="62.9006%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 1.20%)</title><rect x="62.6506%" y="357" width="1.2048%" height="15" fill="rgb(238,81,41)" fg:x="52" fg:w="1"/><text x="62.9006%" y="367.50"></text></g><g><title>_mi_malloc_generic (1 samples, 1.20%)</title><rect x="62.6506%" y="341" width="1.2048%" height="15" fill="rgb(210,199,37)" fg:x="52" fg:w="1"/><text x="62.9006%" y="351.50"></text></g><g><title>mi_find_page (1 samples, 1.20%)</title><rect x="62.6506%" y="325" width="1.2048%" height="15" fill="rgb(244,192,49)" fg:x="52" fg:w="1"/><text x="62.9006%" y="335.50"></text></g><g><title>mi_find_free_page (1 samples, 1.20%)</title><rect x="62.6506%" y="309" width="1.2048%" height="15" fill="rgb(226,211,11)" fg:x="52" fg:w="1"/><text x="62.9006%" y="319.50"></text></g><g><title>mi_page_queue (1 samples, 1.20%)</title><rect x="62.6506%" y="293" width="1.2048%" height="15" fill="rgb(236,162,54)" fg:x="52" fg:w="1"/><text x="62.9006%" y="303.50"></text></g><g><title>_mi_bin (1 samples, 1.20%)</title><rect x="62.6506%" y="277" width="1.2048%" height="15" fill="rgb(220,229,9)" fg:x="52" fg:w="1"/><text x="62.9006%" y="287.50"></text></g><g><title>mi_bin (1 samples, 1.20%)</title><rect x="62.6506%" y="261" width="1.2048%" height="15" fill="rgb(250,87,22)" fg:x="52" fg:w="1"/><text x="62.9006%" y="271.50"></text></g><g><title>_mi_wsize_from_size (1 samples, 1.20%)</title><rect x="62.6506%" y="245" width="1.2048%" height="15" fill="rgb(239,43,17)" fg:x="52" fg:w="1"/><text x="62.9006%" y="255.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (2 samples, 2.41%)</title><rect x="62.6506%" y="485" width="2.4096%" height="15" fill="rgb(231,177,25)" fg:x="52" fg:w="2"/><text x="62.9006%" y="495.50">pr..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (2 samples, 2.41%)</title><rect x="62.6506%" y="469" width="2.4096%" height="15" fill="rgb(219,179,1)" fg:x="52" fg:w="2"/><text x="62.9006%" y="479.50">pr..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (2 samples, 2.41%)</title><rect x="62.6506%" y="453" width="2.4096%" height="15" fill="rgb(238,219,53)" fg:x="52" fg:w="2"/><text x="62.9006%" y="463.50">pr..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (2 samples, 2.41%)</title><rect x="62.6506%" y="437" width="2.4096%" height="15" fill="rgb(232,167,36)" fg:x="52" fg:w="2"/><text x="62.9006%" y="447.50">pr..</text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (1 samples, 1.20%)</title><rect x="63.8554%" y="421" width="1.2048%" height="15" fill="rgb(244,19,51)" fg:x="53" fg:w="1"/><text x="64.1054%" y="431.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (1 samples, 1.20%)</title><rect x="63.8554%" y="405" width="1.2048%" height="15" fill="rgb(224,6,22)" fg:x="53" fg:w="1"/><text x="64.1054%" y="415.50"></text></g><g><title>protobuf::misc::maybe_uninit_write_slice (1 samples, 1.20%)</title><rect x="63.8554%" y="389" width="1.2048%" height="15" fill="rgb(224,145,5)" fg:x="53" fg:w="1"/><text x="64.1054%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 1.20%)</title><rect x="63.8554%" y="373" width="1.2048%" height="15" fill="rgb(234,130,49)" fg:x="53" fg:w="1"/><text x="64.1054%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 1.20%)</title><rect x="63.8554%" y="357" width="1.2048%" height="15" fill="rgb(254,6,2)" fg:x="53" fg:w="1"/><text x="64.1054%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 1.20%)</title><rect x="63.8554%" y="341" width="1.2048%" height="15" fill="rgb(208,96,46)" fg:x="53" fg:w="1"/><text x="64.1054%" y="351.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_EntityMsg as protobuf::message::Message&gt;::merge_from (8 samples, 9.64%)</title><rect x="59.0361%" y="501" width="9.6386%" height="15" fill="rgb(239,3,39)" fg:x="49" fg:w="8"/><text x="59.2861%" y="511.50">&lt;csgoproto::ne..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (3 samples, 3.61%)</title><rect x="65.0602%" y="485" width="3.6145%" height="15" fill="rgb(233,210,1)" fg:x="54" fg:w="3"/><text x="65.3102%" y="495.50">prot..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (1 samples, 1.20%)</title><rect x="67.4699%" y="469" width="1.2048%" height="15" fill="rgb(244,137,37)" fg:x="56" fg:w="1"/><text x="67.7199%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 2.41%)</title><rect x="69.8795%" y="485" width="2.4096%" height="15" fill="rgb(240,136,2)" fg:x="58" fg:w="2"/><text x="70.1295%" y="495.50">&lt;c..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int32 (1 samples, 1.20%)</title><rect x="72.2892%" y="485" width="1.2048%" height="15" fill="rgb(239,18,37)" fg:x="60" fg:w="1"/><text x="72.5392%" y="495.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int64 (1 samples, 1.20%)</title><rect x="72.2892%" y="469" width="1.2048%" height="15" fill="rgb(218,185,22)" fg:x="60" fg:w="1"/><text x="72.5392%" y="479.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (1 samples, 1.20%)</title><rect x="72.2892%" y="453" width="1.2048%" height="15" fill="rgb(225,218,4)" fg:x="60" fg:w="1"/><text x="72.5392%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 1.20%)</title><rect x="74.6988%" y="421" width="1.2048%" height="15" fill="rgb(230,182,32)" fg:x="62" fg:w="1"/><text x="74.9488%" y="431.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_game_event::Key_t as protobuf::message::Message&gt;::merge_from (2 samples, 2.41%)</title><rect x="74.6988%" y="453" width="2.4096%" height="15" fill="rgb(242,56,43)" fg:x="62" fg:w="2"/><text x="74.9488%" y="463.50">&lt;c..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bool (2 samples, 2.41%)</title><rect x="74.6988%" y="437" width="2.4096%" height="15" fill="rgb(233,99,24)" fg:x="62" fg:w="2"/><text x="74.9488%" y="447.50">pr..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (1 samples, 1.20%)</title><rect x="75.9036%" y="421" width="1.2048%" height="15" fill="rgb(234,209,42)" fg:x="63" fg:w="1"/><text x="76.1536%" y="431.50"></text></g><g><title>protobuf::varint::decode::decode_varint64 (1 samples, 1.20%)</title><rect x="75.9036%" y="405" width="1.2048%" height="15" fill="rgb(227,7,12)" fg:x="63" fg:w="1"/><text x="76.1536%" y="415.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (1 samples, 1.20%)</title><rect x="75.9036%" y="389" width="1.2048%" height="15" fill="rgb(245,203,43)" fg:x="63" fg:w="1"/><text x="76.1536%" y="399.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (4 samples, 4.82%)</title><rect x="73.4940%" y="485" width="4.8193%" height="15" fill="rgb(238,205,33)" fg:x="61" fg:w="4"/><text x="73.7440%" y="495.50">protob..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (4 samples, 4.82%)</title><rect x="73.4940%" y="469" width="4.8193%" height="15" fill="rgb(231,56,7)" fg:x="61" fg:w="4"/><text x="73.7440%" y="479.50">protob..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (1 samples, 1.20%)</title><rect x="77.1084%" y="453" width="1.2048%" height="15" fill="rgb(244,186,29)" fg:x="64" fg:w="1"/><text x="77.3584%" y="463.50"></text></g><g><title>protobuf::varint::decode::decode_varint64 (1 samples, 1.20%)</title><rect x="77.1084%" y="437" width="1.2048%" height="15" fill="rgb(234,111,31)" fg:x="64" fg:w="1"/><text x="77.3584%" y="447.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (1 samples, 1.20%)</title><rect x="77.1084%" y="421" width="1.2048%" height="15" fill="rgb(241,149,10)" fg:x="64" fg:w="1"/><text x="77.3584%" y="431.50"></text></g><g><title>demoparser::parsing::parser::Demo::parse_cmd (59 samples, 71.08%)</title><rect x="10.8434%" y="565" width="71.0843%" height="15" fill="rgb(249,206,44)" fg:x="9" fg:w="59"/><text x="11.0934%" y="575.50">demoparser::parsing::parser::Demo::parse_cmd</text></g><g><title>demoparser::parsing::parser::Demo::parse_packet (53 samples, 63.86%)</title><rect x="18.0723%" y="549" width="63.8554%" height="15" fill="rgb(251,153,30)" fg:x="15" fg:w="53"/><text x="18.3223%" y="559.50">demoparser::parsing::parser::Demo::parse_packet</text></g><g><title>protobuf::message::Message::parse_from_bytes (23 samples, 27.71%)</title><rect x="54.2169%" y="533" width="27.7108%" height="15" fill="rgb(239,152,38)" fg:x="45" fg:w="23"/><text x="54.4669%" y="543.50">protobuf::message::Message::parse_from_bytes</text></g><g><title>protobuf::message::Message::parse_from (19 samples, 22.89%)</title><rect x="59.0361%" y="517" width="22.8916%" height="15" fill="rgb(249,139,47)" fg:x="49" fg:w="19"/><text x="59.2861%" y="527.50">protobuf::message::Message::parse_fr..</text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_GameEvent as protobuf::message::Message&gt;::merge_from (11 samples, 13.25%)</title><rect x="68.6747%" y="501" width="13.2530%" height="15" fill="rgb(244,64,35)" fg:x="57" fg:w="11"/><text x="68.9247%" y="511.50">&lt;csgoproto::netmessa..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (3 samples, 3.61%)</title><rect x="78.3133%" y="485" width="3.6145%" height="15" fill="rgb(216,46,15)" fg:x="65" fg:w="3"/><text x="78.5633%" y="495.50">prot..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (3 samples, 3.61%)</title><rect x="78.3133%" y="469" width="3.6145%" height="15" fill="rgb(250,74,19)" fg:x="65" fg:w="3"/><text x="78.5633%" y="479.50">prot..</text></g><g><title>protobuf::varint::decode::decode_varint32 (3 samples, 3.61%)</title><rect x="78.3133%" y="453" width="3.6145%" height="15" fill="rgb(249,42,33)" fg:x="65" fg:w="3"/><text x="78.5633%" y="463.50">prot..</text></g><g><title>protobuf::varint::decode::decode_varint_impl (3 samples, 3.61%)</title><rect x="78.3133%" y="437" width="3.6145%" height="15" fill="rgb(242,149,17)" fg:x="65" fg:w="3"/><text x="78.5633%" y="447.50">prot..</text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_frame (1 samples, 1.20%)</title><rect x="81.9277%" y="565" width="1.2048%" height="15" fill="rgb(244,29,21)" fg:x="68" fg:w="1"/><text x="82.1777%" y="575.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_byte (1 samples, 1.20%)</title><rect x="81.9277%" y="549" width="1.2048%" height="15" fill="rgb(220,130,37)" fg:x="68" fg:w="1"/><text x="82.1777%" y="559.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="81.9277%" y="533" width="1.2048%" height="15" fill="rgb(211,67,2)" fg:x="68" fg:w="1"/><text x="82.1777%" y="543.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="81.9277%" y="517" width="1.2048%" height="15" fill="rgb(235,68,52)" fg:x="68" fg:w="1"/><text x="82.1777%" y="527.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="81.9277%" y="501" width="1.2048%" height="15" fill="rgb(246,142,3)" fg:x="68" fg:w="1"/><text x="82.1777%" y="511.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="81.9277%" y="485" width="1.2048%" height="15" fill="rgb(241,25,7)" fg:x="68" fg:w="1"/><text x="82.1777%" y="495.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="81.9277%" y="469" width="1.2048%" height="15" fill="rgb(242,119,39)" fg:x="68" fg:w="1"/><text x="82.1777%" y="479.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="81.9277%" y="453" width="1.2048%" height="15" fill="rgb(241,98,45)" fg:x="68" fg:w="1"/><text x="82.1777%" y="463.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="81.9277%" y="437" width="1.2048%" height="15" fill="rgb(254,28,30)" fg:x="68" fg:w="1"/><text x="82.1777%" y="447.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="81.9277%" y="421" width="1.2048%" height="15" fill="rgb(241,142,54)" fg:x="68" fg:w="1"/><text x="82.1777%" y="431.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="81.9277%" y="405" width="1.2048%" height="15" fill="rgb(222,85,15)" fg:x="68" fg:w="1"/><text x="82.1777%" y="415.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="81.9277%" y="389" width="1.2048%" height="15" fill="rgb(210,85,47)" fg:x="68" fg:w="1"/><text x="82.1777%" y="399.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="81.9277%" y="373" width="1.2048%" height="15" fill="rgb(224,206,25)" fg:x="68" fg:w="1"/><text x="82.1777%" y="383.50"></text></g><g><title>demoparser::parsing::parser::Demo::start_parsing (61 samples, 73.49%)</title><rect x="10.8434%" y="581" width="73.4940%" height="15" fill="rgb(243,201,19)" fg:x="9" fg:w="61"/><text x="11.0934%" y="591.50">demoparser::parsing::parser::Demo::start_parsing</text></g><g><title>demoparser::parsing::tick_cache::TickCache::new (1 samples, 1.20%)</title><rect x="83.1325%" y="565" width="1.2048%" height="15" fill="rgb(236,59,4)" fg:x="69" fg:w="1"/><text x="83.3825%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 1.20%)</title><rect x="83.1325%" y="549" width="1.2048%" height="15" fill="rgb(254,179,45)" fg:x="69" fg:w="1"/><text x="83.3825%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 1.20%)</title><rect x="83.1325%" y="533" width="1.2048%" height="15" fill="rgb(226,14,10)" fg:x="69" fg:w="1"/><text x="83.3825%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 1.20%)</title><rect x="83.1325%" y="517" width="1.2048%" height="15" fill="rgb(244,27,41)" fg:x="69" fg:w="1"/><text x="83.3825%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 1.20%)</title><rect x="83.1325%" y="501" width="1.2048%" height="15" fill="rgb(235,35,32)" fg:x="69" fg:w="1"/><text x="83.3825%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 1.20%)</title><rect x="83.1325%" y="485" width="1.2048%" height="15" fill="rgb(218,68,31)" fg:x="69" fg:w="1"/><text x="83.3825%" y="495.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 1.20%)</title><rect x="83.1325%" y="469" width="1.2048%" height="15" fill="rgb(207,120,37)" fg:x="69" fg:w="1"/><text x="83.3825%" y="479.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 1.20%)</title><rect x="83.1325%" y="453" width="1.2048%" height="15" fill="rgb(227,98,0)" fg:x="69" fg:w="1"/><text x="83.3825%" y="463.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 1.20%)</title><rect x="83.1325%" y="437" width="1.2048%" height="15" fill="rgb(207,7,3)" fg:x="69" fg:w="1"/><text x="83.3825%" y="447.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 1.20%)</title><rect x="83.1325%" y="421" width="1.2048%" height="15" fill="rgb(206,98,19)" fg:x="69" fg:w="1"/><text x="83.3825%" y="431.50"></text></g><g><title>_mi_memcpy (1 samples, 1.20%)</title><rect x="83.1325%" y="405" width="1.2048%" height="15" fill="rgb(217,5,26)" fg:x="69" fg:w="1"/><text x="83.3825%" y="415.50"></text></g><g><title>memcpy (1 samples, 1.20%)</title><rect x="83.1325%" y="389" width="1.2048%" height="15" fill="rgb(235,190,38)" fg:x="69" fg:w="1"/><text x="83.3825%" y="399.50"></text></g><g><title>[libc.so.6] (1 samples, 1.20%)</title><rect x="83.1325%" y="373" width="1.2048%" height="15" fill="rgb(247,86,24)" fg:x="69" fg:w="1"/><text x="83.3825%" y="383.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="83.1325%" y="357" width="1.2048%" height="15" fill="rgb(205,101,16)" fg:x="69" fg:w="1"/><text x="83.3825%" y="367.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="83.1325%" y="341" width="1.2048%" height="15" fill="rgb(246,168,33)" fg:x="69" fg:w="1"/><text x="83.3825%" y="351.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="83.1325%" y="325" width="1.2048%" height="15" fill="rgb(231,114,1)" fg:x="69" fg:w="1"/><text x="83.3825%" y="335.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="83.1325%" y="309" width="1.2048%" height="15" fill="rgb(207,184,53)" fg:x="69" fg:w="1"/><text x="83.3825%" y="319.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="83.1325%" y="293" width="1.2048%" height="15" fill="rgb(224,95,51)" fg:x="69" fg:w="1"/><text x="83.3825%" y="303.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="83.1325%" y="277" width="1.2048%" height="15" fill="rgb(212,188,45)" fg:x="69" fg:w="1"/><text x="83.3825%" y="287.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="83.1325%" y="261" width="1.2048%" height="15" fill="rgb(223,154,38)" fg:x="69" fg:w="1"/><text x="83.3825%" y="271.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="83.1325%" y="245" width="1.2048%" height="15" fill="rgb(251,22,52)" fg:x="69" fg:w="1"/><text x="83.3825%" y="255.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="83.1325%" y="229" width="1.2048%" height="15" fill="rgb(229,209,22)" fg:x="69" fg:w="1"/><text x="83.3825%" y="239.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="83.1325%" y="213" width="1.2048%" height="15" fill="rgb(234,138,34)" fg:x="69" fg:w="1"/><text x="83.3825%" y="223.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="83.1325%" y="197" width="1.2048%" height="15" fill="rgb(212,95,11)" fg:x="69" fg:w="1"/><text x="83.3825%" y="207.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 1.20%)</title><rect x="84.3373%" y="437" width="1.2048%" height="15" fill="rgb(240,179,47)" fg:x="70" fg:w="1"/><text x="84.5873%" y="447.50"></text></g><g><title>_mi_memcpy (1 samples, 1.20%)</title><rect x="84.3373%" y="421" width="1.2048%" height="15" fill="rgb(240,163,11)" fg:x="70" fg:w="1"/><text x="84.5873%" y="431.50"></text></g><g><title>memcpy (1 samples, 1.20%)</title><rect x="84.3373%" y="405" width="1.2048%" height="15" fill="rgb(236,37,12)" fg:x="70" fg:w="1"/><text x="84.5873%" y="415.50"></text></g><g><title>[libc.so.6] (1 samples, 1.20%)</title><rect x="84.3373%" y="389" width="1.2048%" height="15" fill="rgb(232,164,16)" fg:x="70" fg:w="1"/><text x="84.5873%" y="399.50"></text></g><g><title>_mi_usable_size (1 samples, 1.20%)</title><rect x="85.5422%" y="437" width="1.2048%" height="15" fill="rgb(244,205,15)" fg:x="71" fg:w="1"/><text x="85.7922%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 3.61%)</title><rect x="84.3373%" y="565" width="3.6145%" height="15" fill="rgb(223,117,47)" fg:x="70" fg:w="3"/><text x="84.5873%" y="575.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 3.61%)</title><rect x="84.3373%" y="549" width="3.6145%" height="15" fill="rgb(244,107,35)" fg:x="70" fg:w="3"/><text x="84.5873%" y="559.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 3.61%)</title><rect x="84.3373%" y="533" width="3.6145%" height="15" fill="rgb(205,140,8)" fg:x="70" fg:w="3"/><text x="84.5873%" y="543.50">allo..</text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 3.61%)</title><rect x="84.3373%" y="517" width="3.6145%" height="15" fill="rgb(228,84,46)" fg:x="70" fg:w="3"/><text x="84.5873%" y="527.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 3.61%)</title><rect x="84.3373%" y="501" width="3.6145%" height="15" fill="rgb(254,188,9)" fg:x="70" fg:w="3"/><text x="84.5873%" y="511.50">&lt;all..</text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 3.61%)</title><rect x="84.3373%" y="485" width="3.6145%" height="15" fill="rgb(206,112,54)" fg:x="70" fg:w="3"/><text x="84.5873%" y="495.50">allo..</text></g><g><title>alloc::alloc::realloc (3 samples, 3.61%)</title><rect x="84.3373%" y="469" width="3.6145%" height="15" fill="rgb(216,84,49)" fg:x="70" fg:w="3"/><text x="84.5873%" y="479.50">allo..</text></g><g><title>_mi_heap_realloc_zero (3 samples, 3.61%)</title><rect x="84.3373%" y="453" width="3.6145%" height="15" fill="rgb(214,194,35)" fg:x="70" fg:w="3"/><text x="84.5873%" y="463.50">_mi_..</text></g><g><title>mi_free (1 samples, 1.20%)</title><rect x="86.7470%" y="437" width="1.2048%" height="15" fill="rgb(249,28,3)" fg:x="72" fg:w="1"/><text x="86.9970%" y="447.50"></text></g><g><title>_mi_thread_id (1 samples, 1.20%)</title><rect x="86.7470%" y="421" width="1.2048%" height="15" fill="rgb(222,56,52)" fg:x="72" fg:w="1"/><text x="86.9970%" y="431.50"></text></g><g><title>mi_tls_slot (1 samples, 1.20%)</title><rect x="86.7470%" y="405" width="1.2048%" height="15" fill="rgb(245,217,50)" fg:x="72" fg:w="1"/><text x="86.9970%" y="415.50"></text></g><g><title>demoparser::parsing::tick_cache::TickCache::parse_packet_ents_simple (5 samples, 6.02%)</title><rect x="84.3373%" y="581" width="6.0241%" height="15" fill="rgb(213,201,24)" fg:x="70" fg:w="5"/><text x="84.5873%" y="591.50">demopars..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode (2 samples, 2.41%)</title><rect x="87.9518%" y="565" width="2.4096%" height="15" fill="rgb(248,116,28)" fg:x="73" fg:w="2"/><text x="88.2018%" y="575.50">de..</text></g><g><title>demoparser::parsing::read_bits::MyBitreader::decode_float (1 samples, 1.20%)</title><rect x="89.1566%" y="549" width="1.2048%" height="15" fill="rgb(219,72,43)" fg:x="74" fg:w="1"/><text x="89.4066%" y="559.50"></text></g><g><title>demoparser::parsing::read_bits::MyBitreader::read_nbits (1 samples, 1.20%)</title><rect x="89.1566%" y="533" width="1.2048%" height="15" fill="rgb(209,138,14)" fg:x="74" fg:w="1"/><text x="89.4066%" y="543.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 1.20%)</title><rect x="89.1566%" y="517" width="1.2048%" height="15" fill="rgb(222,18,33)" fg:x="74" fg:w="1"/><text x="89.4066%" y="527.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::peek (1 samples, 1.20%)</title><rect x="89.1566%" y="501" width="1.2048%" height="15" fill="rgb(213,199,7)" fg:x="74" fg:w="1"/><text x="89.4066%" y="511.50"></text></g><g><title>bitter::LittleEndianReader::peek_ (1 samples, 1.20%)</title><rect x="89.1566%" y="485" width="1.2048%" height="15" fill="rgb(250,110,10)" fg:x="74" fg:w="1"/><text x="89.4066%" y="495.50"></text></g><g><title>protobuf::message::Message::parse_from_bytes (1 samples, 1.20%)</title><rect x="90.3614%" y="581" width="1.2048%" height="15" fill="rgb(248,123,6)" fg:x="75" fg:w="1"/><text x="90.6114%" y="591.50"></text></g><g><title>protobuf::message::Message::parse_from (1 samples, 1.20%)</title><rect x="90.3614%" y="565" width="1.2048%" height="15" fill="rgb(206,91,31)" fg:x="75" fg:w="1"/><text x="90.6114%" y="575.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_PacketEntities as protobuf::message::Message&gt;::merge_from (1 samples, 1.20%)</title><rect x="90.3614%" y="549" width="1.2048%" height="15" fill="rgb(211,154,13)" fg:x="75" fg:w="1"/><text x="90.6114%" y="559.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 1.20%)</title><rect x="90.3614%" y="533" width="1.2048%" height="15" fill="rgb(225,148,7)" fg:x="75" fg:w="1"/><text x="90.6114%" y="543.50"></text></g><g><title>std::panic::catch_unwind (73 samples, 87.95%)</title><rect x="4.8193%" y="709" width="87.9518%" height="15" fill="rgb(220,160,43)" fg:x="4" fg:w="73"/><text x="5.0693%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (73 samples, 87.95%)</title><rect x="4.8193%" y="693" width="87.9518%" height="15" fill="rgb(213,52,39)" fg:x="4" fg:w="73"/><text x="5.0693%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (73 samples, 87.95%)</title><rect x="4.8193%" y="677" width="87.9518%" height="15" fill="rgb(243,137,7)" fg:x="4" fg:w="73"/><text x="5.0693%" y="687.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (73 samples, 87.95%)</title><rect x="4.8193%" y="661" width="87.9518%" height="15" fill="rgb(230,79,13)" fg:x="4" fg:w="73"/><text x="5.0693%" y="671.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (73 samples, 87.95%)</title><rect x="4.8193%" y="645" width="87.9518%" height="15" fill="rgb(247,105,23)" fg:x="4" fg:w="73"/><text x="5.0693%" y="655.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (73 samples, 87.95%)</title><rect x="4.8193%" y="629" width="87.9518%" height="15" fill="rgb(223,179,41)" fg:x="4" fg:w="73"/><text x="5.0693%" y="639.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (73 samples, 87.95%)</title><rect x="4.8193%" y="613" width="87.9518%" height="15" fill="rgb(218,9,34)" fg:x="4" fg:w="73"/><text x="5.0693%" y="623.50">core::ops::function::FnOnce::call_once</text></g><g><title>demoparser::main (73 samples, 87.95%)</title><rect x="4.8193%" y="597" width="87.9518%" height="15" fill="rgb(222,106,8)" fg:x="4" fg:w="73"/><text x="5.0693%" y="607.50">demoparser::main</text></g><g><title>std::io::stdio::_print (1 samples, 1.20%)</title><rect x="91.5663%" y="581" width="1.2048%" height="15" fill="rgb(211,220,0)" fg:x="76" fg:w="1"/><text x="91.8163%" y="591.50"></text></g><g><title>std::io::stdio::print_to (1 samples, 1.20%)</title><rect x="91.5663%" y="565" width="1.2048%" height="15" fill="rgb(229,52,16)" fg:x="76" fg:w="1"/><text x="91.8163%" y="575.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 1.20%)</title><rect x="91.5663%" y="549" width="1.2048%" height="15" fill="rgb(212,155,18)" fg:x="76" fg:w="1"/><text x="91.8163%" y="559.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 1.20%)</title><rect x="91.5663%" y="533" width="1.2048%" height="15" fill="rgb(242,21,14)" fg:x="76" fg:w="1"/><text x="91.8163%" y="543.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 1.20%)</title><rect x="91.5663%" y="517" width="1.2048%" height="15" fill="rgb(222,19,48)" fg:x="76" fg:w="1"/><text x="91.8163%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 1.20%)</title><rect x="91.5663%" y="501" width="1.2048%" height="15" fill="rgb(232,45,27)" fg:x="76" fg:w="1"/><text x="91.8163%" y="511.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 1.20%)</title><rect x="91.5663%" y="485" width="1.2048%" height="15" fill="rgb(249,103,42)" fg:x="76" fg:w="1"/><text x="91.8163%" y="495.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 1.20%)</title><rect x="91.5663%" y="469" width="1.2048%" height="15" fill="rgb(246,81,33)" fg:x="76" fg:w="1"/><text x="91.8163%" y="479.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 1.20%)</title><rect x="91.5663%" y="453" width="1.2048%" height="15" fill="rgb(252,33,42)" fg:x="76" fg:w="1"/><text x="91.8163%" y="463.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 1.20%)</title><rect x="91.5663%" y="437" width="1.2048%" height="15" fill="rgb(209,212,41)" fg:x="76" fg:w="1"/><text x="91.8163%" y="447.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 1.20%)</title><rect x="91.5663%" y="421" width="1.2048%" height="15" fill="rgb(207,154,6)" fg:x="76" fg:w="1"/><text x="91.8163%" y="431.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1 samples, 1.20%)</title><rect x="91.5663%" y="405" width="1.2048%" height="15" fill="rgb(223,64,47)" fg:x="76" fg:w="1"/><text x="91.8163%" y="415.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1 samples, 1.20%)</title><rect x="91.5663%" y="389" width="1.2048%" height="15" fill="rgb(211,161,38)" fg:x="76" fg:w="1"/><text x="91.8163%" y="399.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 1.20%)</title><rect x="91.5663%" y="373" width="1.2048%" height="15" fill="rgb(219,138,40)" fg:x="76" fg:w="1"/><text x="91.8163%" y="383.50"></text></g><g><title>__GI___libc_write (1 samples, 1.20%)</title><rect x="91.5663%" y="357" width="1.2048%" height="15" fill="rgb(241,228,46)" fg:x="76" fg:w="1"/><text x="91.8163%" y="367.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="91.5663%" y="341" width="1.2048%" height="15" fill="rgb(223,209,38)" fg:x="76" fg:w="1"/><text x="91.8163%" y="351.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="91.5663%" y="325" width="1.2048%" height="15" fill="rgb(236,164,45)" fg:x="76" fg:w="1"/><text x="91.8163%" y="335.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="91.5663%" y="309" width="1.2048%" height="15" fill="rgb(231,15,5)" fg:x="76" fg:w="1"/><text x="91.8163%" y="319.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="91.5663%" y="293" width="1.2048%" height="15" fill="rgb(252,35,15)" fg:x="76" fg:w="1"/><text x="91.8163%" y="303.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="91.5663%" y="277" width="1.2048%" height="15" fill="rgb(248,181,18)" fg:x="76" fg:w="1"/><text x="91.8163%" y="287.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="91.5663%" y="261" width="1.2048%" height="15" fill="rgb(233,39,42)" fg:x="76" fg:w="1"/><text x="91.8163%" y="271.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="91.5663%" y="245" width="1.2048%" height="15" fill="rgb(238,110,33)" fg:x="76" fg:w="1"/><text x="91.8163%" y="255.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="91.5663%" y="229" width="1.2048%" height="15" fill="rgb(233,195,10)" fg:x="76" fg:w="1"/><text x="91.8163%" y="239.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="91.5663%" y="213" width="1.2048%" height="15" fill="rgb(254,105,3)" fg:x="76" fg:w="1"/><text x="91.8163%" y="223.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="91.5663%" y="197" width="1.2048%" height="15" fill="rgb(221,225,9)" fg:x="76" fg:w="1"/><text x="91.8163%" y="207.50"></text></g><g><title>demoparser (78 samples, 93.98%)</title><rect x="0.0000%" y="869" width="93.9759%" height="15" fill="rgb(224,227,45)" fg:x="0" fg:w="78"/><text x="0.2500%" y="879.50">demoparser</text></g><g><title>_start (75 samples, 90.36%)</title><rect x="3.6145%" y="853" width="90.3614%" height="15" fill="rgb(229,198,43)" fg:x="3" fg:w="75"/><text x="3.8645%" y="863.50">_start</text></g><g><title>__libc_start_main_impl (75 samples, 90.36%)</title><rect x="3.6145%" y="837" width="90.3614%" height="15" fill="rgb(206,209,35)" fg:x="3" fg:w="75"/><text x="3.8645%" y="847.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (75 samples, 90.36%)</title><rect x="3.6145%" y="821" width="90.3614%" height="15" fill="rgb(245,195,53)" fg:x="3" fg:w="75"/><text x="3.8645%" y="831.50">__libc_start_call_main</text></g><g><title>main (74 samples, 89.16%)</title><rect x="4.8193%" y="805" width="89.1566%" height="15" fill="rgb(240,92,26)" fg:x="4" fg:w="74"/><text x="5.0693%" y="815.50">main</text></g><g><title>std::rt::lang_start_internal (74 samples, 89.16%)</title><rect x="4.8193%" y="789" width="89.1566%" height="15" fill="rgb(207,40,23)" fg:x="4" fg:w="74"/><text x="5.0693%" y="799.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (74 samples, 89.16%)</title><rect x="4.8193%" y="773" width="89.1566%" height="15" fill="rgb(223,111,35)" fg:x="4" fg:w="74"/><text x="5.0693%" y="783.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (74 samples, 89.16%)</title><rect x="4.8193%" y="757" width="89.1566%" height="15" fill="rgb(229,147,28)" fg:x="4" fg:w="74"/><text x="5.0693%" y="767.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (74 samples, 89.16%)</title><rect x="4.8193%" y="741" width="89.1566%" height="15" fill="rgb(211,29,28)" fg:x="4" fg:w="74"/><text x="5.0693%" y="751.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (74 samples, 89.16%)</title><rect x="4.8193%" y="725" width="89.1566%" height="15" fill="rgb(228,72,33)" fg:x="4" fg:w="74"/><text x="5.0693%" y="735.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 1.20%)</title><rect x="92.7711%" y="709" width="1.2048%" height="15" fill="rgb(205,214,31)" fg:x="77" fg:w="1"/><text x="93.0211%" y="719.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 1.20%)</title><rect x="92.7711%" y="693" width="1.2048%" height="15" fill="rgb(224,111,15)" fg:x="77" fg:w="1"/><text x="93.0211%" y="703.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 1.20%)</title><rect x="92.7711%" y="677" width="1.2048%" height="15" fill="rgb(253,21,26)" fg:x="77" fg:w="1"/><text x="93.0211%" y="687.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 1.20%)</title><rect x="92.7711%" y="661" width="1.2048%" height="15" fill="rgb(245,139,43)" fg:x="77" fg:w="1"/><text x="93.0211%" y="671.50"></text></g><g><title>__pthread_getattr_np (1 samples, 1.20%)</title><rect x="92.7711%" y="645" width="1.2048%" height="15" fill="rgb(252,170,7)" fg:x="77" fg:w="1"/><text x="93.0211%" y="655.50"></text></g><g><title>__GI___getdelim (1 samples, 1.20%)</title><rect x="92.7711%" y="629" width="1.2048%" height="15" fill="rgb(231,118,14)" fg:x="77" fg:w="1"/><text x="93.0211%" y="639.50"></text></g><g><title>_IO_new_file_underflow (1 samples, 1.20%)</title><rect x="92.7711%" y="613" width="1.2048%" height="15" fill="rgb(238,83,0)" fg:x="77" fg:w="1"/><text x="93.0211%" y="623.50"></text></g><g><title>__GI___read_nocancel (1 samples, 1.20%)</title><rect x="92.7711%" y="597" width="1.2048%" height="15" fill="rgb(221,39,39)" fg:x="77" fg:w="1"/><text x="93.0211%" y="607.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="92.7711%" y="581" width="1.2048%" height="15" fill="rgb(222,119,46)" fg:x="77" fg:w="1"/><text x="93.0211%" y="591.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="92.7711%" y="565" width="1.2048%" height="15" fill="rgb(222,165,49)" fg:x="77" fg:w="1"/><text x="93.0211%" y="575.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="92.7711%" y="549" width="1.2048%" height="15" fill="rgb(219,113,52)" fg:x="77" fg:w="1"/><text x="93.0211%" y="559.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="92.7711%" y="533" width="1.2048%" height="15" fill="rgb(214,7,15)" fg:x="77" fg:w="1"/><text x="93.0211%" y="543.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="92.7711%" y="517" width="1.2048%" height="15" fill="rgb(235,32,4)" fg:x="77" fg:w="1"/><text x="93.0211%" y="527.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="92.7711%" y="501" width="1.2048%" height="15" fill="rgb(238,90,54)" fg:x="77" fg:w="1"/><text x="93.0211%" y="511.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="92.7711%" y="485" width="1.2048%" height="15" fill="rgb(213,208,19)" fg:x="77" fg:w="1"/><text x="93.0211%" y="495.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="92.7711%" y="469" width="1.2048%" height="15" fill="rgb(233,156,4)" fg:x="77" fg:w="1"/><text x="93.0211%" y="479.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="92.7711%" y="453" width="1.2048%" height="15" fill="rgb(207,194,5)" fg:x="77" fg:w="1"/><text x="93.0211%" y="463.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="92.7711%" y="437" width="1.2048%" height="15" fill="rgb(206,111,30)" fg:x="77" fg:w="1"/><text x="93.0211%" y="447.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="92.7711%" y="421" width="1.2048%" height="15" fill="rgb(243,70,54)" fg:x="77" fg:w="1"/><text x="93.0211%" y="431.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="92.7711%" y="405" width="1.2048%" height="15" fill="rgb(242,28,8)" fg:x="77" fg:w="1"/><text x="93.0211%" y="415.50"></text></g><g><title>[unknown] (1 samples, 1.20%)</title><rect x="92.7711%" y="389" width="1.2048%" height="15" fill="rgb(219,106,18)" fg:x="77" fg:w="1"/><text x="93.0211%" y="399.50"></text></g><g><title>all (83 samples, 100%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(244,222,10)" fg:x="0" fg:w="83"/><text x="0.2500%" y="895.50"></text></g><g><title>perf-exec (5 samples, 6.02%)</title><rect x="93.9759%" y="869" width="6.0241%" height="15" fill="rgb(236,179,52)" fg:x="78" fg:w="5"/><text x="94.2259%" y="879.50">perf-exec</text></g><g><title>[unknown] (5 samples, 6.02%)</title><rect x="93.9759%" y="853" width="6.0241%" height="15" fill="rgb(213,23,39)" fg:x="78" fg:w="5"/><text x="94.2259%" y="863.50">[unknown]</text></g><g><title>[unknown] (5 samples, 6.02%)</title><rect x="93.9759%" y="837" width="6.0241%" height="15" fill="rgb(238,48,10)" fg:x="78" fg:w="5"/><text x="94.2259%" y="847.50">[unknown]</text></g><g><title>[unknown] (5 samples, 6.02%)</title><rect x="93.9759%" y="821" width="6.0241%" height="15" fill="rgb(251,196,23)" fg:x="78" fg:w="5"/><text x="94.2259%" y="831.50">[unknown]</text></g><g><title>[unknown] (5 samples, 6.02%)</title><rect x="93.9759%" y="805" width="6.0241%" height="15" fill="rgb(250,152,24)" fg:x="78" fg:w="5"/><text x="94.2259%" y="815.50">[unknown]</text></g><g><title>[unknown] (5 samples, 6.02%)</title><rect x="93.9759%" y="789" width="6.0241%" height="15" fill="rgb(209,150,17)" fg:x="78" fg:w="5"/><text x="94.2259%" y="799.50">[unknown]</text></g><g><title>[unknown] (5 samples, 6.02%)</title><rect x="93.9759%" y="773" width="6.0241%" height="15" fill="rgb(234,202,34)" fg:x="78" fg:w="5"/><text x="94.2259%" y="783.50">[unknown]</text></g><g><title>[unknown] (5 samples, 6.02%)</title><rect x="93.9759%" y="757" width="6.0241%" height="15" fill="rgb(253,148,53)" fg:x="78" fg:w="5"/><text x="94.2259%" y="767.50">[unknown]</text></g><g><title>[unknown] (5 samples, 6.02%)</title><rect x="93.9759%" y="741" width="6.0241%" height="15" fill="rgb(218,129,16)" fg:x="78" fg:w="5"/><text x="94.2259%" y="751.50">[unknown]</text></g><g><title>[unknown] (5 samples, 6.02%)</title><rect x="93.9759%" y="725" width="6.0241%" height="15" fill="rgb(216,85,19)" fg:x="78" fg:w="5"/><text x="94.2259%" y="735.50">[unknown]</text></g><g><title>[unknown] (5 samples, 6.02%)</title><rect x="93.9759%" y="709" width="6.0241%" height="15" fill="rgb(235,228,7)" fg:x="78" fg:w="5"/><text x="94.2259%" y="719.50">[unknown]</text></g></svg></svg>