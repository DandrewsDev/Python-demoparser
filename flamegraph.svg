<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="773.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="676"><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.0000%" y="709" width="0.2959%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.0000%" y="693" width="0.2959%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.0000%" y="677" width="0.2959%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.0000%" y="661" width="0.2959%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2"/><text x="0.2500%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.0000%" y="645" width="0.2959%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.0000%" y="629" width="0.2959%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="2"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.0000%" y="613" width="0.2959%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="2"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.0000%" y="597" width="0.2959%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="2"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.0000%" y="581" width="0.2959%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="2"/><text x="0.2500%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.1479%" y="565" width="0.1479%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.3979%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.1479%" y="549" width="0.1479%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.3979%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.1479%" y="533" width="0.1479%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.3979%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.1479%" y="517" width="0.1479%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.3979%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.1479%" y="501" width="0.1479%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.3979%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.1479%" y="485" width="0.1479%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.3979%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.1479%" y="469" width="0.1479%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="0.3979%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.1479%" y="453" width="0.1479%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="1"/><text x="0.3979%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.1479%" y="437" width="0.1479%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="1"/><text x="0.3979%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.1479%" y="421" width="0.1479%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="0.3979%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.1479%" y="405" width="0.1479%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="0.3979%" y="415.50"></text></g><g><title>__GI_exit (1 samples, 0.15%)</title><rect x="0.2959%" y="661" width="0.1479%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="0.5459%" y="671.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.15%)</title><rect x="0.2959%" y="645" width="0.1479%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="1"/><text x="0.5459%" y="655.50"></text></g><g><title>mi_process_done (1 samples, 0.15%)</title><rect x="0.2959%" y="629" width="0.1479%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="1"/><text x="0.5459%" y="639.50"></text></g><g><title>mi_process_done (1 samples, 0.15%)</title><rect x="0.2959%" y="613" width="0.1479%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="1"/><text x="0.5459%" y="623.50"></text></g><g><title>mi_heap_collect_ex (1 samples, 0.15%)</title><rect x="0.2959%" y="597" width="0.1479%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="1"/><text x="0.5459%" y="607.50"></text></g><g><title>mi_segment_cache_purge (1 samples, 0.15%)</title><rect x="0.2959%" y="581" width="0.1479%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="1"/><text x="0.5459%" y="591.50"></text></g><g><title>mi_commit_mask_decommit (1 samples, 0.15%)</title><rect x="0.2959%" y="565" width="0.1479%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="1"/><text x="0.5459%" y="575.50"></text></g><g><title>_mi_os_decommit (1 samples, 0.15%)</title><rect x="0.2959%" y="549" width="0.1479%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="1"/><text x="0.5459%" y="559.50"></text></g><g><title>mi_os_commitx (1 samples, 0.15%)</title><rect x="0.2959%" y="533" width="0.1479%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="1"/><text x="0.5459%" y="543.50"></text></g><g><title>__GI_madvise (1 samples, 0.15%)</title><rect x="0.2959%" y="517" width="0.1479%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="1"/><text x="0.5459%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.2959%" y="501" width="0.1479%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="1"/><text x="0.5459%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.2959%" y="485" width="0.1479%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="1"/><text x="0.5459%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.2959%" y="469" width="0.1479%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="1"/><text x="0.5459%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.2959%" y="453" width="0.1479%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="1"/><text x="0.5459%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.2959%" y="437" width="0.1479%" height="15" fill="rgb(241,83,37)" fg:x="2" fg:w="1"/><text x="0.5459%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.2959%" y="421" width="0.1479%" height="15" fill="rgb(233,36,39)" fg:x="2" fg:w="1"/><text x="0.5459%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.2959%" y="405" width="0.1479%" height="15" fill="rgb(226,3,54)" fg:x="2" fg:w="1"/><text x="0.5459%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.2959%" y="389" width="0.1479%" height="15" fill="rgb(245,192,40)" fg:x="2" fg:w="1"/><text x="0.5459%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.2959%" y="373" width="0.1479%" height="15" fill="rgb(238,167,29)" fg:x="2" fg:w="1"/><text x="0.5459%" y="383.50"></text></g><g><title>&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="0.4438%" y="437" width="0.1479%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="1"/><text x="0.6938%" y="447.50"></text></g><g><title>&lt;std::sys::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="0.4438%" y="421" width="0.1479%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="1"/><text x="0.6938%" y="431.50"></text></g><g><title>__GI___readdir64 (1 samples, 0.15%)</title><rect x="0.4438%" y="405" width="0.1479%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="1"/><text x="0.6938%" y="415.50"></text></g><g><title>__GI___getdents64 (1 samples, 0.15%)</title><rect x="0.4438%" y="389" width="0.1479%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1"/><text x="0.6938%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.4438%" y="373" width="0.1479%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1"/><text x="0.6938%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.4438%" y="357" width="0.1479%" height="15" fill="rgb(222,207,29)" fg:x="3" fg:w="1"/><text x="0.6938%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.4438%" y="341" width="0.1479%" height="15" fill="rgb(206,96,30)" fg:x="3" fg:w="1"/><text x="0.6938%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.4438%" y="325" width="0.1479%" height="15" fill="rgb(218,138,4)" fg:x="3" fg:w="1"/><text x="0.6938%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.4438%" y="309" width="0.1479%" height="15" fill="rgb(250,191,14)" fg:x="3" fg:w="1"/><text x="0.6938%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.4438%" y="293" width="0.1479%" height="15" fill="rgb(239,60,40)" fg:x="3" fg:w="1"/><text x="0.6938%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.4438%" y="277" width="0.1479%" height="15" fill="rgb(206,27,48)" fg:x="3" fg:w="1"/><text x="0.6938%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.4438%" y="261" width="0.1479%" height="15" fill="rgb(225,35,8)" fg:x="3" fg:w="1"/><text x="0.6938%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.4438%" y="245" width="0.1479%" height="15" fill="rgb(250,213,24)" fg:x="3" fg:w="1"/><text x="0.6938%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.4438%" y="229" width="0.1479%" height="15" fill="rgb(247,123,22)" fg:x="3" fg:w="1"/><text x="0.6938%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(u32,demoparser::parsing::entities::Entity)&gt;&gt; (1 samples, 0.15%)</title><rect x="0.5917%" y="421" width="0.1479%" height="15" fill="rgb(231,138,38)" fg:x="4" fg:w="1"/><text x="0.8417%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="0.5917%" y="405" width="0.1479%" height="15" fill="rgb(231,145,46)" fg:x="4" fg:w="1"/><text x="0.8417%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(u32,demoparser::parsing::entities::Entity)]&gt; (1 samples, 0.15%)</title><rect x="0.5917%" y="389" width="0.1479%" height="15" fill="rgb(251,118,11)" fg:x="4" fg:w="1"/><text x="0.8417%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u32,demoparser::parsing::entities::Entity)&gt; (1 samples, 0.15%)</title><rect x="0.5917%" y="373" width="0.1479%" height="15" fill="rgb(217,147,25)" fg:x="4" fg:w="1"/><text x="0.8417%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::entities::Entity&gt; (1 samples, 0.15%)</title><rect x="0.5917%" y="357" width="0.1479%" height="15" fill="rgb(247,81,37)" fg:x="4" fg:w="1"/><text x="0.8417%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,demoparser::parsing::variants::PropAtom,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.15%)</title><rect x="0.5917%" y="341" width="0.1479%" height="15" fill="rgb(209,12,38)" fg:x="4" fg:w="1"/><text x="0.8417%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,demoparser::parsing::variants::PropAtom,ahash::random_state::RandomState&gt;&gt; (1 samples, 0.15%)</title><rect x="0.5917%" y="325" width="0.1479%" height="15" fill="rgb(227,1,9)" fg:x="4" fg:w="1"/><text x="0.8417%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,demoparser::parsing::variants::PropAtom)&gt;&gt; (1 samples, 0.15%)</title><rect x="0.5917%" y="309" width="0.1479%" height="15" fill="rgb(248,47,43)" fg:x="4" fg:w="1"/><text x="0.8417%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="0.5917%" y="293" width="0.1479%" height="15" fill="rgb(221,10,30)" fg:x="4" fg:w="1"/><text x="0.8417%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::parser::Demo&gt; (3 samples, 0.44%)</title><rect x="0.5917%" y="437" width="0.4438%" height="15" fill="rgb(210,229,1)" fg:x="4" fg:w="3"/><text x="0.8417%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;demoparser::parsing::variants::BytesVariant&gt; (2 samples, 0.30%)</title><rect x="0.7396%" y="421" width="0.2959%" height="15" fill="rgb(222,148,37)" fg:x="5" fg:w="2"/><text x="0.9896%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap::Mmap&gt; (2 samples, 0.30%)</title><rect x="0.7396%" y="405" width="0.2959%" height="15" fill="rgb(234,67,33)" fg:x="5" fg:w="2"/><text x="0.9896%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap::unix::MmapInner&gt; (2 samples, 0.30%)</title><rect x="0.7396%" y="389" width="0.2959%" height="15" fill="rgb(247,98,35)" fg:x="5" fg:w="2"/><text x="0.9896%" y="399.50"></text></g><g><title>&lt;memmap::unix::MmapInner as core::ops::drop::Drop&gt;::drop (2 samples, 0.30%)</title><rect x="0.7396%" y="373" width="0.2959%" height="15" fill="rgb(247,138,52)" fg:x="5" fg:w="2"/><text x="0.9896%" y="383.50"></text></g><g><title>__GI___munmap (2 samples, 0.30%)</title><rect x="0.7396%" y="357" width="0.2959%" height="15" fill="rgb(213,79,30)" fg:x="5" fg:w="2"/><text x="0.9896%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.7396%" y="341" width="0.2959%" height="15" fill="rgb(246,177,23)" fg:x="5" fg:w="2"/><text x="0.9896%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.7396%" y="325" width="0.2959%" height="15" fill="rgb(230,62,27)" fg:x="5" fg:w="2"/><text x="0.9896%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.7396%" y="309" width="0.2959%" height="15" fill="rgb(216,154,8)" fg:x="5" fg:w="2"/><text x="0.9896%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.7396%" y="293" width="0.2959%" height="15" fill="rgb(244,35,45)" fg:x="5" fg:w="2"/><text x="0.9896%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.7396%" y="277" width="0.2959%" height="15" fill="rgb(251,115,12)" fg:x="5" fg:w="2"/><text x="0.9896%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.7396%" y="261" width="0.2959%" height="15" fill="rgb(240,54,50)" fg:x="5" fg:w="2"/><text x="0.9896%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.7396%" y="245" width="0.2959%" height="15" fill="rgb(233,84,52)" fg:x="5" fg:w="2"/><text x="0.9896%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.7396%" y="229" width="0.2959%" height="15" fill="rgb(207,117,47)" fg:x="5" fg:w="2"/><text x="0.9896%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="0.7396%" y="213" width="0.2959%" height="15" fill="rgb(249,43,39)" fg:x="5" fg:w="2"/><text x="0.9896%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.8876%" y="197" width="0.1479%" height="15" fill="rgb(209,38,44)" fg:x="6" fg:w="1"/><text x="1.1376%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.8876%" y="181" width="0.1479%" height="15" fill="rgb(236,212,23)" fg:x="6" fg:w="1"/><text x="1.1376%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.30%)</title><rect x="1.0355%" y="341" width="0.2959%" height="15" fill="rgb(242,79,21)" fg:x="7" fg:w="2"/><text x="1.2855%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.30%)</title><rect x="1.0355%" y="325" width="0.2959%" height="15" fill="rgb(211,96,35)" fg:x="7" fg:w="2"/><text x="1.2855%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.30%)</title><rect x="1.0355%" y="309" width="0.2959%" height="15" fill="rgb(253,215,40)" fg:x="7" fg:w="2"/><text x="1.2855%" y="319.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.15%)</title><rect x="1.1834%" y="293" width="0.1479%" height="15" fill="rgb(211,81,21)" fg:x="8" fg:w="1"/><text x="1.4334%" y="303.50"></text></g><g><title>demoparser::parsing::collect_data::&lt;impl demoparser::parsing::parser::Demo&gt;::collect_player_data (3 samples, 0.44%)</title><rect x="1.0355%" y="421" width="0.4438%" height="15" fill="rgb(208,190,38)" fg:x="7" fg:w="3"/><text x="1.2855%" y="431.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (3 samples, 0.44%)</title><rect x="1.0355%" y="405" width="0.4438%" height="15" fill="rgb(235,213,38)" fg:x="7" fg:w="3"/><text x="1.2855%" y="415.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (3 samples, 0.44%)</title><rect x="1.0355%" y="389" width="0.4438%" height="15" fill="rgb(237,122,38)" fg:x="7" fg:w="3"/><text x="1.2855%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3 samples, 0.44%)</title><rect x="1.0355%" y="373" width="0.4438%" height="15" fill="rgb(244,218,35)" fg:x="7" fg:w="3"/><text x="1.2855%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.44%)</title><rect x="1.0355%" y="357" width="0.4438%" height="15" fill="rgb(240,68,47)" fg:x="7" fg:w="3"/><text x="1.2855%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::is_empty (1 samples, 0.15%)</title><rect x="1.3314%" y="341" width="0.1479%" height="15" fill="rgb(210,16,53)" fg:x="9" fg:w="1"/><text x="1.5814%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.15%)</title><rect x="1.4793%" y="373" width="0.1479%" height="15" fill="rgb(235,124,12)" fg:x="10" fg:w="1"/><text x="1.7293%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.15%)</title><rect x="1.6272%" y="373" width="0.1479%" height="15" fill="rgb(224,169,11)" fg:x="11" fg:w="1"/><text x="1.8772%" y="383.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.15%)</title><rect x="1.6272%" y="357" width="0.1479%" height="15" fill="rgb(250,166,2)" fg:x="11" fg:w="1"/><text x="1.8772%" y="367.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.15%)</title><rect x="1.6272%" y="341" width="0.1479%" height="15" fill="rgb(242,216,29)" fg:x="11" fg:w="1"/><text x="1.8772%" y="351.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.15%)</title><rect x="1.6272%" y="325" width="0.1479%" height="15" fill="rgb(230,116,27)" fg:x="11" fg:w="1"/><text x="1.8772%" y="335.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.15%)</title><rect x="1.6272%" y="309" width="0.1479%" height="15" fill="rgb(228,99,48)" fg:x="11" fg:w="1"/><text x="1.8772%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.15%)</title><rect x="1.6272%" y="293" width="0.1479%" height="15" fill="rgb(253,11,6)" fg:x="11" fg:w="1"/><text x="1.8772%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.15%)</title><rect x="1.6272%" y="277" width="0.1479%" height="15" fill="rgb(247,143,39)" fg:x="11" fg:w="1"/><text x="1.8772%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.15%)</title><rect x="1.6272%" y="261" width="0.1479%" height="15" fill="rgb(236,97,10)" fg:x="11" fg:w="1"/><text x="1.8772%" y="271.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.15%)</title><rect x="1.6272%" y="245" width="0.1479%" height="15" fill="rgb(233,208,19)" fg:x="11" fg:w="1"/><text x="1.8772%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.15%)</title><rect x="1.6272%" y="229" width="0.1479%" height="15" fill="rgb(216,164,2)" fg:x="11" fg:w="1"/><text x="1.8772%" y="239.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (1 samples, 0.15%)</title><rect x="1.6272%" y="213" width="0.1479%" height="15" fill="rgb(220,129,5)" fg:x="11" fg:w="1"/><text x="1.8772%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.15%)</title><rect x="1.6272%" y="197" width="0.1479%" height="15" fill="rgb(242,17,10)" fg:x="11" fg:w="1"/><text x="1.8772%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.15%)</title><rect x="1.6272%" y="181" width="0.1479%" height="15" fill="rgb(242,107,0)" fg:x="11" fg:w="1"/><text x="1.8772%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.15%)</title><rect x="1.6272%" y="165" width="0.1479%" height="15" fill="rgb(251,28,31)" fg:x="11" fg:w="1"/><text x="1.8772%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.15%)</title><rect x="1.6272%" y="149" width="0.1479%" height="15" fill="rgb(233,223,10)" fg:x="11" fg:w="1"/><text x="1.8772%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.15%)</title><rect x="1.6272%" y="133" width="0.1479%" height="15" fill="rgb(215,21,27)" fg:x="11" fg:w="1"/><text x="1.8772%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.15%)</title><rect x="1.7751%" y="341" width="0.1479%" height="15" fill="rgb(232,23,21)" fg:x="12" fg:w="1"/><text x="2.0251%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.15%)</title><rect x="1.7751%" y="325" width="0.1479%" height="15" fill="rgb(244,5,23)" fg:x="12" fg:w="1"/><text x="2.0251%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.15%)</title><rect x="1.7751%" y="309" width="0.1479%" height="15" fill="rgb(226,81,46)" fg:x="12" fg:w="1"/><text x="2.0251%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.15%)</title><rect x="1.7751%" y="293" width="0.1479%" height="15" fill="rgb(247,70,30)" fg:x="12" fg:w="1"/><text x="2.0251%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.15%)</title><rect x="1.7751%" y="277" width="0.1479%" height="15" fill="rgb(212,68,19)" fg:x="12" fg:w="1"/><text x="2.0251%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.15%)</title><rect x="1.7751%" y="261" width="0.1479%" height="15" fill="rgb(240,187,13)" fg:x="12" fg:w="1"/><text x="2.0251%" y="271.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.15%)</title><rect x="1.7751%" y="245" width="0.1479%" height="15" fill="rgb(223,113,26)" fg:x="12" fg:w="1"/><text x="2.0251%" y="255.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.15%)</title><rect x="1.7751%" y="229" width="0.1479%" height="15" fill="rgb(206,192,2)" fg:x="12" fg:w="1"/><text x="2.0251%" y="239.50"></text></g><g><title>_mi_memcpy (1 samples, 0.15%)</title><rect x="1.7751%" y="213" width="0.1479%" height="15" fill="rgb(241,108,4)" fg:x="12" fg:w="1"/><text x="2.0251%" y="223.50"></text></g><g><title>memcpy (1 samples, 0.15%)</title><rect x="1.7751%" y="197" width="0.1479%" height="15" fill="rgb(247,173,49)" fg:x="12" fg:w="1"/><text x="2.0251%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="1.7751%" y="181" width="0.1479%" height="15" fill="rgb(224,114,35)" fg:x="12" fg:w="1"/><text x="2.0251%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.30%)</title><rect x="1.7751%" y="357" width="0.2959%" height="15" fill="rgb(245,159,27)" fg:x="12" fg:w="2"/><text x="2.0251%" y="367.50"></text></g><g><title>core::ptr::write (1 samples, 0.15%)</title><rect x="1.9231%" y="341" width="0.1479%" height="15" fill="rgb(245,172,44)" fg:x="13" fg:w="1"/><text x="2.1731%" y="351.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::flatten_dt (5 samples, 0.74%)</title><rect x="1.4793%" y="389" width="0.7396%" height="15" fill="rgb(236,23,11)" fg:x="10" fg:w="5"/><text x="1.7293%" y="399.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (3 samples, 0.44%)</title><rect x="1.7751%" y="373" width="0.4438%" height="15" fill="rgb(205,117,38)" fg:x="12" fg:w="3"/><text x="2.0251%" y="383.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (1 samples, 0.15%)</title><rect x="2.0710%" y="357" width="0.1479%" height="15" fill="rgb(237,72,25)" fg:x="14" fg:w="1"/><text x="2.3210%" y="367.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (1 samples, 0.15%)</title><rect x="2.0710%" y="341" width="0.1479%" height="15" fill="rgb(244,70,9)" fg:x="14" fg:w="1"/><text x="2.3210%" y="351.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (1 samples, 0.15%)</title><rect x="2.0710%" y="325" width="0.1479%" height="15" fill="rgb(217,125,39)" fg:x="14" fg:w="1"/><text x="2.3210%" y="335.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (1 samples, 0.15%)</title><rect x="2.0710%" y="309" width="0.1479%" height="15" fill="rgb(235,36,10)" fg:x="14" fg:w="1"/><text x="2.3210%" y="319.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (1 samples, 0.15%)</title><rect x="2.0710%" y="293" width="0.1479%" height="15" fill="rgb(251,123,47)" fg:x="14" fg:w="1"/><text x="2.3210%" y="303.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (1 samples, 0.15%)</title><rect x="2.0710%" y="277" width="0.1479%" height="15" fill="rgb(221,13,13)" fg:x="14" fg:w="1"/><text x="2.3210%" y="287.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (1 samples, 0.15%)</title><rect x="2.0710%" y="261" width="0.1479%" height="15" fill="rgb(238,131,9)" fg:x="14" fg:w="1"/><text x="2.3210%" y="271.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (1 samples, 0.15%)</title><rect x="2.0710%" y="245" width="0.1479%" height="15" fill="rgb(211,50,8)" fg:x="14" fg:w="1"/><text x="2.3210%" y="255.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::get_props (1 samples, 0.15%)</title><rect x="2.0710%" y="229" width="0.1479%" height="15" fill="rgb(245,182,24)" fg:x="14" fg:w="1"/><text x="2.3210%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.15%)</title><rect x="2.0710%" y="213" width="0.1479%" height="15" fill="rgb(242,14,37)" fg:x="14" fg:w="1"/><text x="2.3210%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.15%)</title><rect x="2.0710%" y="197" width="0.1479%" height="15" fill="rgb(246,228,12)" fg:x="14" fg:w="1"/><text x="2.3210%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.15%)</title><rect x="2.0710%" y="181" width="0.1479%" height="15" fill="rgb(213,55,15)" fg:x="14" fg:w="1"/><text x="2.3210%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.15%)</title><rect x="2.0710%" y="165" width="0.1479%" height="15" fill="rgb(209,9,3)" fg:x="14" fg:w="1"/><text x="2.3210%" y="175.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.15%)</title><rect x="2.0710%" y="149" width="0.1479%" height="15" fill="rgb(230,59,30)" fg:x="14" fg:w="1"/><text x="2.3210%" y="159.50"></text></g><g><title>mi_find_page (1 samples, 0.15%)</title><rect x="2.0710%" y="133" width="0.1479%" height="15" fill="rgb(209,121,21)" fg:x="14" fg:w="1"/><text x="2.3210%" y="143.50"></text></g><g><title>mi_find_free_page (1 samples, 0.15%)</title><rect x="2.0710%" y="117" width="0.1479%" height="15" fill="rgb(220,109,13)" fg:x="14" fg:w="1"/><text x="2.3210%" y="127.50"></text></g><g><title>mi_page_queue (1 samples, 0.15%)</title><rect x="2.0710%" y="101" width="0.1479%" height="15" fill="rgb(232,18,1)" fg:x="14" fg:w="1"/><text x="2.3210%" y="111.50"></text></g><g><title>_mi_bin (1 samples, 0.15%)</title><rect x="2.0710%" y="85" width="0.1479%" height="15" fill="rgb(215,41,42)" fg:x="14" fg:w="1"/><text x="2.3210%" y="95.50"></text></g><g><title>mi_bin (1 samples, 0.15%)</title><rect x="2.0710%" y="69" width="0.1479%" height="15" fill="rgb(224,123,36)" fg:x="14" fg:w="1"/><text x="2.3210%" y="79.50"></text></g><g><title>demoparser::parsing::data_table::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_datatable (6 samples, 0.89%)</title><rect x="1.4793%" y="405" width="0.8876%" height="15" fill="rgb(240,125,3)" fg:x="10" fg:w="6"/><text x="1.7293%" y="415.50"></text></g><g><title>protobuf::message::Message::parse_from_bytes (1 samples, 0.15%)</title><rect x="2.2189%" y="389" width="0.1479%" height="15" fill="rgb(205,98,50)" fg:x="15" fg:w="1"/><text x="2.4689%" y="399.50"></text></g><g><title>protobuf::message::Message::parse_from (1 samples, 0.15%)</title><rect x="2.2189%" y="373" width="0.1479%" height="15" fill="rgb(205,185,37)" fg:x="15" fg:w="1"/><text x="2.4689%" y="383.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_SendTable as protobuf::message::Message&gt;::merge_from (1 samples, 0.15%)</title><rect x="2.2189%" y="357" width="0.1479%" height="15" fill="rgb(238,207,15)" fg:x="15" fg:w="1"/><text x="2.4689%" y="367.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (1 samples, 0.15%)</title><rect x="2.2189%" y="341" width="0.1479%" height="15" fill="rgb(213,199,42)" fg:x="15" fg:w="1"/><text x="2.4689%" y="351.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32_or_eof (1 samples, 0.15%)</title><rect x="2.2189%" y="325" width="0.1479%" height="15" fill="rgb(235,201,11)" fg:x="15" fg:w="1"/><text x="2.4689%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.15%)</title><rect x="2.8107%" y="389" width="0.1479%" height="15" fill="rgb(207,46,11)" fg:x="19" fg:w="1"/><text x="3.0607%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.15%)</title><rect x="2.8107%" y="373" width="0.1479%" height="15" fill="rgb(241,35,35)" fg:x="19" fg:w="1"/><text x="3.0607%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.15%)</title><rect x="2.8107%" y="357" width="0.1479%" height="15" fill="rgb(243,32,47)" fg:x="19" fg:w="1"/><text x="3.0607%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.15%)</title><rect x="2.8107%" y="341" width="0.1479%" height="15" fill="rgb(247,202,23)" fg:x="19" fg:w="1"/><text x="3.0607%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.15%)</title><rect x="2.8107%" y="325" width="0.1479%" height="15" fill="rgb(219,102,11)" fg:x="19" fg:w="1"/><text x="3.0607%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.15%)</title><rect x="2.8107%" y="309" width="0.1479%" height="15" fill="rgb(243,110,44)" fg:x="19" fg:w="1"/><text x="3.0607%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.15%)</title><rect x="2.8107%" y="293" width="0.1479%" height="15" fill="rgb(222,74,54)" fg:x="19" fg:w="1"/><text x="3.0607%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.15%)</title><rect x="2.8107%" y="277" width="0.1479%" height="15" fill="rgb(216,99,12)" fg:x="19" fg:w="1"/><text x="3.0607%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.15%)</title><rect x="2.8107%" y="261" width="0.1479%" height="15" fill="rgb(226,22,26)" fg:x="19" fg:w="1"/><text x="3.0607%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.15%)</title><rect x="2.8107%" y="245" width="0.1479%" height="15" fill="rgb(217,163,10)" fg:x="19" fg:w="1"/><text x="3.0607%" y="255.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.15%)</title><rect x="2.8107%" y="229" width="0.1479%" height="15" fill="rgb(213,25,53)" fg:x="19" fg:w="1"/><text x="3.0607%" y="239.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.15%)</title><rect x="2.8107%" y="213" width="0.1479%" height="15" fill="rgb(252,105,26)" fg:x="19" fg:w="1"/><text x="3.0607%" y="223.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.15%)</title><rect x="2.8107%" y="197" width="0.1479%" height="15" fill="rgb(220,39,43)" fg:x="19" fg:w="1"/><text x="3.0607%" y="207.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.15%)</title><rect x="2.8107%" y="181" width="0.1479%" height="15" fill="rgb(229,68,48)" fg:x="19" fg:w="1"/><text x="3.0607%" y="191.50"></text></g><g><title>mi_find_page (1 samples, 0.15%)</title><rect x="2.8107%" y="165" width="0.1479%" height="15" fill="rgb(252,8,32)" fg:x="19" fg:w="1"/><text x="3.0607%" y="175.50"></text></g><g><title>mi_find_free_page (1 samples, 0.15%)</title><rect x="2.8107%" y="149" width="0.1479%" height="15" fill="rgb(223,20,43)" fg:x="19" fg:w="1"/><text x="3.0607%" y="159.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.15%)</title><rect x="2.8107%" y="133" width="0.1479%" height="15" fill="rgb(229,81,49)" fg:x="19" fg:w="1"/><text x="3.0607%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::ops::arith::Add&lt;&amp;str&gt;&gt;::add (1 samples, 0.15%)</title><rect x="2.9586%" y="373" width="0.1479%" height="15" fill="rgb(236,28,36)" fg:x="20" fg:w="1"/><text x="3.2086%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.15%)</title><rect x="2.9586%" y="357" width="0.1479%" height="15" fill="rgb(249,185,26)" fg:x="20" fg:w="1"/><text x="3.2086%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.15%)</title><rect x="2.9586%" y="341" width="0.1479%" height="15" fill="rgb(249,174,33)" fg:x="20" fg:w="1"/><text x="3.2086%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.15%)</title><rect x="2.9586%" y="325" width="0.1479%" height="15" fill="rgb(233,201,37)" fg:x="20" fg:w="1"/><text x="3.2086%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.15%)</title><rect x="2.9586%" y="309" width="0.1479%" height="15" fill="rgb(221,78,26)" fg:x="20" fg:w="1"/><text x="3.2086%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.15%)</title><rect x="2.9586%" y="293" width="0.1479%" height="15" fill="rgb(250,127,30)" fg:x="20" fg:w="1"/><text x="3.2086%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.15%)</title><rect x="2.9586%" y="277" width="0.1479%" height="15" fill="rgb(230,49,44)" fg:x="20" fg:w="1"/><text x="3.2086%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.15%)</title><rect x="2.9586%" y="261" width="0.1479%" height="15" fill="rgb(229,67,23)" fg:x="20" fg:w="1"/><text x="3.2086%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.15%)</title><rect x="2.9586%" y="245" width="0.1479%" height="15" fill="rgb(249,83,47)" fg:x="20" fg:w="1"/><text x="3.2086%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.15%)</title><rect x="2.9586%" y="229" width="0.1479%" height="15" fill="rgb(215,43,3)" fg:x="20" fg:w="1"/><text x="3.2086%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.15%)</title><rect x="2.9586%" y="213" width="0.1479%" height="15" fill="rgb(238,154,13)" fg:x="20" fg:w="1"/><text x="3.2086%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.15%)</title><rect x="2.9586%" y="197" width="0.1479%" height="15" fill="rgb(219,56,2)" fg:x="20" fg:w="1"/><text x="3.2086%" y="207.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.15%)</title><rect x="2.9586%" y="181" width="0.1479%" height="15" fill="rgb(233,0,4)" fg:x="20" fg:w="1"/><text x="3.2086%" y="191.50"></text></g><g><title>_mi_heap_realloc_zero (1 samples, 0.15%)</title><rect x="2.9586%" y="165" width="0.1479%" height="15" fill="rgb(235,30,7)" fg:x="20" fg:w="1"/><text x="3.2086%" y="175.50"></text></g><g><title>mi_free (1 samples, 0.15%)</title><rect x="2.9586%" y="149" width="0.1479%" height="15" fill="rgb(250,79,13)" fg:x="20" fg:w="1"/><text x="3.2086%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.15%)</title><rect x="3.1065%" y="373" width="0.1479%" height="15" fill="rgb(211,146,34)" fg:x="21" fg:w="1"/><text x="3.3565%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.15%)</title><rect x="3.1065%" y="357" width="0.1479%" height="15" fill="rgb(228,22,38)" fg:x="21" fg:w="1"/><text x="3.3565%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.15%)</title><rect x="3.1065%" y="341" width="0.1479%" height="15" fill="rgb(235,168,5)" fg:x="21" fg:w="1"/><text x="3.3565%" y="351.50"></text></g><g><title>csgoproto::netmessages::CSVCMsg_GameEvent::event_name (1 samples, 0.15%)</title><rect x="3.2544%" y="373" width="0.1479%" height="15" fill="rgb(221,155,16)" fg:x="22" fg:w="1"/><text x="3.5044%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.15%)</title><rect x="3.2544%" y="357" width="0.1479%" height="15" fill="rgb(215,215,53)" fg:x="22" fg:w="1"/><text x="3.5044%" y="367.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (3 samples, 0.44%)</title><rect x="3.4024%" y="357" width="0.4438%" height="15" fill="rgb(223,4,10)" fg:x="23" fg:w="3"/><text x="3.6524%" y="367.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::TryFrom&lt;u32&gt; for u16&gt;::try_from (3 samples, 0.44%)</title><rect x="3.4024%" y="341" width="0.4438%" height="15" fill="rgb(234,103,6)" fg:x="23" fg:w="3"/><text x="3.6524%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.15%)</title><rect x="3.8462%" y="293" width="0.1479%" height="15" fill="rgb(227,97,0)" fg:x="26" fg:w="1"/><text x="4.0962%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.15%)</title><rect x="3.8462%" y="277" width="0.1479%" height="15" fill="rgb(234,150,53)" fg:x="26" fg:w="1"/><text x="4.0962%" y="287.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.15%)</title><rect x="3.8462%" y="261" width="0.1479%" height="15" fill="rgb(228,201,54)" fg:x="26" fg:w="1"/><text x="4.0962%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.15%)</title><rect x="3.8462%" y="245" width="0.1479%" height="15" fill="rgb(222,22,37)" fg:x="26" fg:w="1"/><text x="4.0962%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.15%)</title><rect x="4.4379%" y="245" width="0.1479%" height="15" fill="rgb(237,53,32)" fg:x="30" fg:w="1"/><text x="4.6879%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.15%)</title><rect x="4.4379%" y="229" width="0.1479%" height="15" fill="rgb(233,25,53)" fg:x="30" fg:w="1"/><text x="4.6879%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (2 samples, 0.30%)</title><rect x="4.5858%" y="245" width="0.2959%" height="15" fill="rgb(210,40,34)" fg:x="31" fg:w="2"/><text x="4.8358%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (10 samples, 1.48%)</title><rect x="3.8462%" y="357" width="1.4793%" height="15" fill="rgb(241,220,44)" fg:x="26" fg:w="10"/><text x="4.0962%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (10 samples, 1.48%)</title><rect x="3.8462%" y="341" width="1.4793%" height="15" fill="rgb(235,28,35)" fg:x="26" fg:w="10"/><text x="4.0962%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (10 samples, 1.48%)</title><rect x="3.8462%" y="325" width="1.4793%" height="15" fill="rgb(210,56,17)" fg:x="26" fg:w="10"/><text x="4.0962%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (10 samples, 1.48%)</title><rect x="3.8462%" y="309" width="1.4793%" height="15" fill="rgb(224,130,29)" fg:x="26" fg:w="10"/><text x="4.0962%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9 samples, 1.33%)</title><rect x="3.9941%" y="293" width="1.3314%" height="15" fill="rgb(235,212,8)" fg:x="27" fg:w="9"/><text x="4.2441%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 1.33%)</title><rect x="3.9941%" y="277" width="1.3314%" height="15" fill="rgb(223,33,50)" fg:x="27" fg:w="9"/><text x="4.2441%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (9 samples, 1.33%)</title><rect x="3.9941%" y="261" width="1.3314%" height="15" fill="rgb(219,149,13)" fg:x="27" fg:w="9"/><text x="4.2441%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.44%)</title><rect x="4.8817%" y="245" width="0.4438%" height="15" fill="rgb(250,156,29)" fg:x="33" fg:w="3"/><text x="5.1317%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.44%)</title><rect x="4.8817%" y="229" width="0.4438%" height="15" fill="rgb(216,193,19)" fg:x="33" fg:w="3"/><text x="5.1317%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.15%)</title><rect x="5.3254%" y="357" width="0.1479%" height="15" fill="rgb(216,135,14)" fg:x="36" fg:w="1"/><text x="5.5754%" y="367.50"></text></g><g><title>__rg_alloc (2 samples, 0.30%)</title><rect x="15.0888%" y="133" width="0.2959%" height="15" fill="rgb(241,47,5)" fg:x="102" fg:w="2"/><text x="15.3388%" y="143.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2 samples, 0.30%)</title><rect x="15.0888%" y="117" width="0.2959%" height="15" fill="rgb(233,42,35)" fg:x="102" fg:w="2"/><text x="15.3388%" y="127.50"></text></g><g><title>mimalloc::may_use_unaligned_api (2 samples, 0.30%)</title><rect x="15.0888%" y="101" width="0.2959%" height="15" fill="rgb(231,13,6)" fg:x="102" fg:w="2"/><text x="15.3388%" y="111.50"></text></g><g><title>__rust_alloc (2 samples, 0.30%)</title><rect x="15.3846%" y="133" width="0.2959%" height="15" fill="rgb(207,181,40)" fg:x="104" fg:w="2"/><text x="15.6346%" y="143.50"></text></g><g><title>_mi_malloc_generic (3 samples, 0.44%)</title><rect x="15.6805%" y="133" width="0.4438%" height="15" fill="rgb(254,173,49)" fg:x="106" fg:w="3"/><text x="15.9305%" y="143.50"></text></g><g><title>mi_find_page (2 samples, 0.30%)</title><rect x="15.8284%" y="117" width="0.2959%" height="15" fill="rgb(221,1,38)" fg:x="107" fg:w="2"/><text x="16.0784%" y="127.50"></text></g><g><title>mi_find_free_page (2 samples, 0.30%)</title><rect x="15.8284%" y="101" width="0.2959%" height="15" fill="rgb(206,124,46)" fg:x="107" fg:w="2"/><text x="16.0784%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (33 samples, 4.88%)</title><rect x="14.9408%" y="229" width="4.8817%" height="15" fill="rgb(249,21,11)" fg:x="101" fg:w="33"/><text x="15.1908%" y="239.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (33 samples, 4.88%)</title><rect x="14.9408%" y="213" width="4.8817%" height="15" fill="rgb(222,201,40)" fg:x="101" fg:w="33"/><text x="15.1908%" y="223.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (33 samples, 4.88%)</title><rect x="14.9408%" y="197" width="4.8817%" height="15" fill="rgb(235,61,29)" fg:x="101" fg:w="33"/><text x="15.1908%" y="207.50">alloc:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 4.73%)</title><rect x="15.0888%" y="181" width="4.7337%" height="15" fill="rgb(219,207,3)" fg:x="102" fg:w="32"/><text x="15.3388%" y="191.50">&lt;alloc..</text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 4.73%)</title><rect x="15.0888%" y="165" width="4.7337%" height="15" fill="rgb(222,56,46)" fg:x="102" fg:w="32"/><text x="15.3388%" y="175.50">alloc:..</text></g><g><title>alloc::alloc::alloc (32 samples, 4.73%)</title><rect x="15.0888%" y="149" width="4.7337%" height="15" fill="rgb(239,76,54)" fg:x="102" fg:w="32"/><text x="15.3388%" y="159.50">alloc:..</text></g><g><title>mi_malloc (25 samples, 3.70%)</title><rect x="16.1243%" y="133" width="3.6982%" height="15" fill="rgb(231,124,27)" fg:x="109" fg:w="25"/><text x="16.3743%" y="143.50">mi_m..</text></g><g><title>mi_heap_malloc (25 samples, 3.70%)</title><rect x="16.1243%" y="117" width="3.6982%" height="15" fill="rgb(249,195,6)" fg:x="109" fg:w="25"/><text x="16.3743%" y="127.50">mi_h..</text></g><g><title>mi_heap_malloc_small (25 samples, 3.70%)</title><rect x="16.1243%" y="101" width="3.6982%" height="15" fill="rgb(237,174,47)" fg:x="109" fg:w="25"/><text x="16.3743%" y="111.50">mi_h..</text></g><g><title>_mi_page_malloc (25 samples, 3.70%)</title><rect x="16.1243%" y="85" width="3.6982%" height="15" fill="rgb(206,201,31)" fg:x="109" fg:w="25"/><text x="16.3743%" y="95.50">_mi_..</text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (49 samples, 7.25%)</title><rect x="13.9053%" y="341" width="7.2485%" height="15" fill="rgb(231,57,52)" fg:x="94" fg:w="49"/><text x="14.1553%" y="351.50">&lt;alloc::st..</text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (49 samples, 7.25%)</title><rect x="13.9053%" y="325" width="7.2485%" height="15" fill="rgb(248,177,22)" fg:x="94" fg:w="49"/><text x="14.1553%" y="335.50">&lt;T as allo..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (48 samples, 7.10%)</title><rect x="14.0533%" y="309" width="7.1006%" height="15" fill="rgb(215,211,37)" fg:x="95" fg:w="48"/><text x="14.3033%" y="319.50">&lt;alloc::st..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (42 samples, 6.21%)</title><rect x="14.9408%" y="293" width="6.2130%" height="15" fill="rgb(241,128,51)" fg:x="101" fg:w="42"/><text x="15.1908%" y="303.50">&lt;alloc::..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (42 samples, 6.21%)</title><rect x="14.9408%" y="277" width="6.2130%" height="15" fill="rgb(227,165,31)" fg:x="101" fg:w="42"/><text x="15.1908%" y="287.50">alloc::s..</text></g><g><title>alloc::slice::hack::to_vec (42 samples, 6.21%)</title><rect x="14.9408%" y="261" width="6.2130%" height="15" fill="rgb(228,167,24)" fg:x="101" fg:w="42"/><text x="15.1908%" y="271.50">alloc::s..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (42 samples, 6.21%)</title><rect x="14.9408%" y="245" width="6.2130%" height="15" fill="rgb(228,143,12)" fg:x="101" fg:w="42"/><text x="15.1908%" y="255.50">&lt;T as al..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (9 samples, 1.33%)</title><rect x="19.8225%" y="229" width="1.3314%" height="15" fill="rgb(249,149,8)" fg:x="134" fg:w="9"/><text x="20.0725%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 1.33%)</title><rect x="19.8225%" y="213" width="1.3314%" height="15" fill="rgb(243,35,44)" fg:x="134" fg:w="9"/><text x="20.0725%" y="223.50"></text></g><g><title>[libc.so.6] (8 samples, 1.18%)</title><rect x="19.9704%" y="197" width="1.1834%" height="15" fill="rgb(246,89,9)" fg:x="135" fg:w="8"/><text x="20.2204%" y="207.50"></text></g><g><title>__rg_alloc (1 samples, 0.15%)</title><rect x="23.9645%" y="165" width="0.1479%" height="15" fill="rgb(233,213,13)" fg:x="162" fg:w="1"/><text x="24.2145%" y="175.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 0.15%)</title><rect x="23.9645%" y="149" width="0.1479%" height="15" fill="rgb(233,141,41)" fg:x="162" fg:w="1"/><text x="24.2145%" y="159.50"></text></g><g><title>mimalloc::may_use_unaligned_api (1 samples, 0.15%)</title><rect x="23.9645%" y="133" width="0.1479%" height="15" fill="rgb(239,167,4)" fg:x="162" fg:w="1"/><text x="24.2145%" y="143.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.15%)</title><rect x="24.1124%" y="165" width="0.1479%" height="15" fill="rgb(209,217,16)" fg:x="163" fg:w="1"/><text x="24.3624%" y="175.50"></text></g><g><title>mi_find_page (1 samples, 0.15%)</title><rect x="24.1124%" y="149" width="0.1479%" height="15" fill="rgb(219,88,35)" fg:x="163" fg:w="1"/><text x="24.3624%" y="159.50"></text></g><g><title>mi_find_free_page (1 samples, 0.15%)</title><rect x="24.1124%" y="133" width="0.1479%" height="15" fill="rgb(220,193,23)" fg:x="163" fg:w="1"/><text x="24.3624%" y="143.50"></text></g><g><title>mi_get_default_heap (3 samples, 0.44%)</title><rect x="24.2604%" y="149" width="0.4438%" height="15" fill="rgb(230,90,52)" fg:x="164" fg:w="3"/><text x="24.5104%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 2.37%)</title><rect x="23.6686%" y="261" width="2.3669%" height="15" fill="rgb(252,106,19)" fg:x="160" fg:w="16"/><text x="23.9186%" y="271.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 2.37%)</title><rect x="23.6686%" y="245" width="2.3669%" height="15" fill="rgb(206,74,20)" fg:x="160" fg:w="16"/><text x="23.9186%" y="255.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 2.37%)</title><rect x="23.6686%" y="229" width="2.3669%" height="15" fill="rgb(230,138,44)" fg:x="160" fg:w="16"/><text x="23.9186%" y="239.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 2.07%)</title><rect x="23.9645%" y="213" width="2.0710%" height="15" fill="rgb(235,182,43)" fg:x="162" fg:w="14"/><text x="24.2145%" y="223.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 2.07%)</title><rect x="23.9645%" y="197" width="2.0710%" height="15" fill="rgb(242,16,51)" fg:x="162" fg:w="14"/><text x="24.2145%" y="207.50">a..</text></g><g><title>alloc::alloc::alloc (14 samples, 2.07%)</title><rect x="23.9645%" y="181" width="2.0710%" height="15" fill="rgb(248,9,4)" fg:x="162" fg:w="14"/><text x="24.2145%" y="191.50">a..</text></g><g><title>mi_malloc (12 samples, 1.78%)</title><rect x="24.2604%" y="165" width="1.7751%" height="15" fill="rgb(210,31,22)" fg:x="164" fg:w="12"/><text x="24.5104%" y="175.50">m..</text></g><g><title>mi_heap_malloc (9 samples, 1.33%)</title><rect x="24.7041%" y="149" width="1.3314%" height="15" fill="rgb(239,54,39)" fg:x="167" fg:w="9"/><text x="24.9541%" y="159.50"></text></g><g><title>mi_heap_malloc_small (9 samples, 1.33%)</title><rect x="24.7041%" y="133" width="1.3314%" height="15" fill="rgb(230,99,41)" fg:x="167" fg:w="9"/><text x="24.9541%" y="143.50"></text></g><g><title>_mi_page_malloc (9 samples, 1.33%)</title><rect x="24.7041%" y="117" width="1.3314%" height="15" fill="rgb(253,106,12)" fg:x="167" fg:w="9"/><text x="24.9541%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (43 samples, 6.36%)</title><rect x="21.1538%" y="341" width="6.3609%" height="15" fill="rgb(213,46,41)" fg:x="143" fg:w="43"/><text x="21.4038%" y="351.50">&lt;alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (26 samples, 3.85%)</title><rect x="23.6686%" y="325" width="3.8462%" height="15" fill="rgb(215,133,35)" fg:x="160" fg:w="26"/><text x="23.9186%" y="335.50">&lt;all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (26 samples, 3.85%)</title><rect x="23.6686%" y="309" width="3.8462%" height="15" fill="rgb(213,28,5)" fg:x="160" fg:w="26"/><text x="23.9186%" y="319.50">allo..</text></g><g><title>alloc::slice::hack::to_vec (26 samples, 3.85%)</title><rect x="23.6686%" y="293" width="3.8462%" height="15" fill="rgb(215,77,49)" fg:x="160" fg:w="26"/><text x="23.9186%" y="303.50">allo..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (26 samples, 3.85%)</title><rect x="23.6686%" y="277" width="3.8462%" height="15" fill="rgb(248,100,22)" fg:x="160" fg:w="26"/><text x="23.9186%" y="287.50">&lt;T a..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (10 samples, 1.48%)</title><rect x="26.0355%" y="261" width="1.4793%" height="15" fill="rgb(208,67,9)" fg:x="176" fg:w="10"/><text x="26.2855%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 1.48%)</title><rect x="26.0355%" y="245" width="1.4793%" height="15" fill="rgb(219,133,21)" fg:x="176" fg:w="10"/><text x="26.2855%" y="255.50"></text></g><g><title>[libc.so.6] (9 samples, 1.33%)</title><rect x="26.1834%" y="229" width="1.3314%" height="15" fill="rgb(246,46,29)" fg:x="177" fg:w="9"/><text x="26.4334%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.15%)</title><rect x="28.9941%" y="229" width="0.1479%" height="15" fill="rgb(246,185,52)" fg:x="196" fg:w="1"/><text x="29.2441%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.15%)</title><rect x="28.9941%" y="213" width="0.1479%" height="15" fill="rgb(252,136,11)" fg:x="196" fg:w="1"/><text x="29.2441%" y="223.50"></text></g><g><title>__rg_realloc (1 samples, 0.15%)</title><rect x="29.1420%" y="133" width="0.1479%" height="15" fill="rgb(219,138,53)" fg:x="197" fg:w="1"/><text x="29.3920%" y="143.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (1 samples, 0.15%)</title><rect x="29.1420%" y="117" width="0.1479%" height="15" fill="rgb(211,51,23)" fg:x="197" fg:w="1"/><text x="29.3920%" y="127.50"></text></g><g><title>mimalloc::may_use_unaligned_api (1 samples, 0.15%)</title><rect x="29.1420%" y="101" width="0.1479%" height="15" fill="rgb(247,221,28)" fg:x="197" fg:w="1"/><text x="29.3920%" y="111.50"></text></g><g><title>__rust_realloc (2 samples, 0.30%)</title><rect x="29.2899%" y="133" width="0.2959%" height="15" fill="rgb(251,222,45)" fg:x="198" fg:w="2"/><text x="29.5399%" y="143.50"></text></g><g><title>_mi_memcpy_aligned (2 samples, 0.30%)</title><rect x="29.5858%" y="117" width="0.2959%" height="15" fill="rgb(217,162,53)" fg:x="200" fg:w="2"/><text x="29.8358%" y="127.50"></text></g><g><title>_mi_memcpy (2 samples, 0.30%)</title><rect x="29.5858%" y="101" width="0.2959%" height="15" fill="rgb(229,93,14)" fg:x="200" fg:w="2"/><text x="29.8358%" y="111.50"></text></g><g><title>memcpy (2 samples, 0.30%)</title><rect x="29.5858%" y="85" width="0.2959%" height="15" fill="rgb(209,67,49)" fg:x="200" fg:w="2"/><text x="29.8358%" y="95.50"></text></g><g><title>[libc.so.6] (2 samples, 0.30%)</title><rect x="29.5858%" y="69" width="0.2959%" height="15" fill="rgb(213,87,29)" fg:x="200" fg:w="2"/><text x="29.8358%" y="79.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.15%)</title><rect x="29.8817%" y="101" width="0.1479%" height="15" fill="rgb(205,151,52)" fg:x="202" fg:w="1"/><text x="30.1317%" y="111.50"></text></g><g><title>mi_slice_first (1 samples, 0.15%)</title><rect x="29.8817%" y="85" width="0.1479%" height="15" fill="rgb(253,215,39)" fg:x="202" fg:w="1"/><text x="30.1317%" y="95.50"></text></g><g><title>_mi_usable_size (2 samples, 0.30%)</title><rect x="29.8817%" y="117" width="0.2959%" height="15" fill="rgb(221,220,41)" fg:x="202" fg:w="2"/><text x="30.1317%" y="127.50"></text></g><g><title>mi_page_usable_size_of (1 samples, 0.15%)</title><rect x="30.0296%" y="101" width="0.1479%" height="15" fill="rgb(218,133,21)" fg:x="203" fg:w="1"/><text x="30.2796%" y="111.50"></text></g><g><title>mi_page_usable_block_size (1 samples, 0.15%)</title><rect x="30.0296%" y="85" width="0.1479%" height="15" fill="rgb(221,193,43)" fg:x="203" fg:w="1"/><text x="30.2796%" y="95.50"></text></g><g><title>mi_page_block_size (1 samples, 0.15%)</title><rect x="30.0296%" y="69" width="0.1479%" height="15" fill="rgb(240,128,52)" fg:x="203" fg:w="1"/><text x="30.2796%" y="79.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.15%)</title><rect x="30.1775%" y="101" width="0.1479%" height="15" fill="rgb(253,114,12)" fg:x="204" fg:w="1"/><text x="30.4275%" y="111.50"></text></g><g><title>_mi_heap_realloc_zero (7 samples, 1.04%)</title><rect x="29.5858%" y="133" width="1.0355%" height="15" fill="rgb(215,223,47)" fg:x="200" fg:w="7"/><text x="29.8358%" y="143.50"></text></g><g><title>mi_heap_malloc (3 samples, 0.44%)</title><rect x="30.1775%" y="117" width="0.4438%" height="15" fill="rgb(248,225,23)" fg:x="204" fg:w="3"/><text x="30.4275%" y="127.50"></text></g><g><title>mi_heap_malloc_small (2 samples, 0.30%)</title><rect x="30.3254%" y="101" width="0.2959%" height="15" fill="rgb(250,108,0)" fg:x="205" fg:w="2"/><text x="30.5754%" y="111.50"></text></g><g><title>_mi_page_malloc (2 samples, 0.30%)</title><rect x="30.3254%" y="85" width="0.2959%" height="15" fill="rgb(228,208,7)" fg:x="205" fg:w="2"/><text x="30.5754%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (11 samples, 1.63%)</title><rect x="29.1420%" y="181" width="1.6272%" height="15" fill="rgb(244,45,10)" fg:x="197" fg:w="11"/><text x="29.3920%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (11 samples, 1.63%)</title><rect x="29.1420%" y="165" width="1.6272%" height="15" fill="rgb(207,125,25)" fg:x="197" fg:w="11"/><text x="29.3920%" y="175.50"></text></g><g><title>alloc::alloc::realloc (11 samples, 1.63%)</title><rect x="29.1420%" y="149" width="1.6272%" height="15" fill="rgb(210,195,18)" fg:x="197" fg:w="11"/><text x="29.3920%" y="159.50"></text></g><g><title>mi_heap_realloc (1 samples, 0.15%)</title><rect x="30.6213%" y="133" width="0.1479%" height="15" fill="rgb(249,80,12)" fg:x="207" fg:w="1"/><text x="30.8713%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 1.78%)</title><rect x="29.1420%" y="197" width="1.7751%" height="15" fill="rgb(221,65,9)" fg:x="197" fg:w="12"/><text x="29.3920%" y="207.50">a..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.15%)</title><rect x="30.7692%" y="181" width="0.1479%" height="15" fill="rgb(235,49,36)" fg:x="208" fg:w="1"/><text x="31.0192%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (14 samples, 2.07%)</title><rect x="28.9941%" y="261" width="2.0710%" height="15" fill="rgb(225,32,20)" fg:x="196" fg:w="14"/><text x="29.2441%" y="271.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 2.07%)</title><rect x="28.9941%" y="245" width="2.0710%" height="15" fill="rgb(215,141,46)" fg:x="196" fg:w="14"/><text x="29.2441%" y="255.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (13 samples, 1.92%)</title><rect x="29.1420%" y="229" width="1.9231%" height="15" fill="rgb(250,160,47)" fg:x="197" fg:w="13"/><text x="29.3920%" y="239.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (13 samples, 1.92%)</title><rect x="29.1420%" y="213" width="1.9231%" height="15" fill="rgb(216,222,40)" fg:x="197" fg:w="13"/><text x="29.3920%" y="223.50">a..</text></g><g><title>core::cmp::max (1 samples, 0.15%)</title><rect x="30.9172%" y="197" width="0.1479%" height="15" fill="rgb(234,217,39)" fg:x="209" fg:w="1"/><text x="31.1672%" y="207.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.15%)</title><rect x="30.9172%" y="181" width="0.1479%" height="15" fill="rgb(207,178,40)" fg:x="209" fg:w="1"/><text x="31.1672%" y="191.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.15%)</title><rect x="30.9172%" y="165" width="0.1479%" height="15" fill="rgb(221,136,13)" fg:x="209" fg:w="1"/><text x="31.1672%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::ops::arith::Add&lt;&amp;str&gt;&gt;::add (26 samples, 3.85%)</title><rect x="27.5148%" y="341" width="3.8462%" height="15" fill="rgb(249,199,10)" fg:x="186" fg:w="26"/><text x="27.7648%" y="351.50">&lt;all..</text></g><g><title>alloc::string::String::push_str (17 samples, 2.51%)</title><rect x="28.8462%" y="325" width="2.5148%" height="15" fill="rgb(249,222,13)" fg:x="195" fg:w="17"/><text x="29.0962%" y="335.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (17 samples, 2.51%)</title><rect x="28.8462%" y="309" width="2.5148%" height="15" fill="rgb(244,185,38)" fg:x="195" fg:w="17"/><text x="29.0962%" y="319.50">al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (17 samples, 2.51%)</title><rect x="28.8462%" y="293" width="2.5148%" height="15" fill="rgb(236,202,9)" fg:x="195" fg:w="17"/><text x="29.0962%" y="303.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (17 samples, 2.51%)</title><rect x="28.8462%" y="277" width="2.5148%" height="15" fill="rgb(250,229,37)" fg:x="195" fg:w="17"/><text x="29.0962%" y="287.50">al..</text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.30%)</title><rect x="31.0651%" y="261" width="0.2959%" height="15" fill="rgb(206,174,23)" fg:x="210" fg:w="2"/><text x="31.3151%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.30%)</title><rect x="31.3609%" y="341" width="0.2959%" height="15" fill="rgb(211,33,43)" fg:x="212" fg:w="2"/><text x="31.6109%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.30%)</title><rect x="31.3609%" y="325" width="0.2959%" height="15" fill="rgb(245,58,50)" fg:x="212" fg:w="2"/><text x="31.6109%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.30%)</title><rect x="31.6568%" y="341" width="0.2959%" height="15" fill="rgb(244,68,36)" fg:x="214" fg:w="2"/><text x="31.9068%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.30%)</title><rect x="31.6568%" y="325" width="0.2959%" height="15" fill="rgb(232,229,15)" fg:x="214" fg:w="2"/><text x="31.9068%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.30%)</title><rect x="31.6568%" y="309" width="0.2959%" height="15" fill="rgb(254,30,23)" fg:x="214" fg:w="2"/><text x="31.9068%" y="319.50"></text></g><g><title>__rg_dealloc (1 samples, 0.15%)</title><rect x="31.9527%" y="341" width="0.1479%" height="15" fill="rgb(235,160,14)" fg:x="216" fg:w="1"/><text x="32.2027%" y="351.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.15%)</title><rect x="31.9527%" y="325" width="0.1479%" height="15" fill="rgb(212,155,44)" fg:x="216" fg:w="1"/><text x="32.2027%" y="335.50"></text></g><g><title>__rust_dealloc (3 samples, 0.44%)</title><rect x="32.1006%" y="341" width="0.4438%" height="15" fill="rgb(226,2,50)" fg:x="217" fg:w="3"/><text x="32.3506%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.59%)</title><rect x="32.5444%" y="341" width="0.5917%" height="15" fill="rgb(234,177,6)" fg:x="220" fg:w="4"/><text x="32.7944%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.59%)</title><rect x="32.5444%" y="325" width="0.5917%" height="15" fill="rgb(217,24,9)" fg:x="220" fg:w="4"/><text x="32.7944%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.15%)</title><rect x="32.9882%" y="309" width="0.1479%" height="15" fill="rgb(220,13,46)" fg:x="223" fg:w="1"/><text x="33.2382%" y="319.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_special_float (6 samples, 0.89%)</title><rect x="36.5385%" y="309" width="0.8876%" height="15" fill="rgb(239,221,27)" fg:x="247" fg:w="6"/><text x="36.7885%" y="319.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_f32 (4 samples, 0.59%)</title><rect x="36.8343%" y="293" width="0.5917%" height="15" fill="rgb(222,198,25)" fg:x="249" fg:w="4"/><text x="37.0843%" y="303.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_u32 (4 samples, 0.59%)</title><rect x="36.8343%" y="277" width="0.5917%" height="15" fill="rgb(211,99,13)" fg:x="249" fg:w="4"/><text x="37.0843%" y="287.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (4 samples, 0.59%)</title><rect x="36.8343%" y="261" width="0.5917%" height="15" fill="rgb(232,111,31)" fg:x="249" fg:w="4"/><text x="37.0843%" y="271.50"></text></g><g><title>bitter::LittleEndianReader::refill (2 samples, 0.30%)</title><rect x="37.1302%" y="245" width="0.2959%" height="15" fill="rgb(245,82,37)" fg:x="251" fg:w="2"/><text x="37.3802%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub (1 samples, 0.15%)</title><rect x="37.2781%" y="229" width="0.1479%" height="15" fill="rgb(227,149,46)" fg:x="252" fg:w="1"/><text x="37.5281%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.15%)</title><rect x="37.2781%" y="213" width="0.1479%" height="15" fill="rgb(218,36,50)" fg:x="252" fg:w="1"/><text x="37.5281%" y="223.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_float (14 samples, 2.07%)</title><rect x="35.6509%" y="325" width="2.0710%" height="15" fill="rgb(226,80,48)" fg:x="241" fg:w="14"/><text x="35.9009%" y="335.50">d..</text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_nbits (2 samples, 0.30%)</title><rect x="37.4260%" y="309" width="0.2959%" height="15" fill="rgb(238,224,15)" fg:x="253" fg:w="2"/><text x="37.6760%" y="319.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (2 samples, 0.30%)</title><rect x="37.4260%" y="293" width="0.2959%" height="15" fill="rgb(241,136,10)" fg:x="253" fg:w="2"/><text x="37.6760%" y="303.50"></text></g><g><title>bitter::LittleEndianReader::has_data_for_unaligned_loads (1 samples, 0.15%)</title><rect x="37.5740%" y="277" width="0.1479%" height="15" fill="rgb(208,32,45)" fg:x="254" fg:w="1"/><text x="37.8240%" y="287.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_nbits (2 samples, 0.30%)</title><rect x="37.8698%" y="309" width="0.2959%" height="15" fill="rgb(207,135,9)" fg:x="256" fg:w="2"/><text x="38.1198%" y="319.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (2 samples, 0.30%)</title><rect x="37.8698%" y="293" width="0.2959%" height="15" fill="rgb(206,86,44)" fg:x="256" fg:w="2"/><text x="38.1198%" y="303.50"></text></g><g><title>bitter::LittleEndianReader::has_data_for_unaligned_loads (2 samples, 0.30%)</title><rect x="37.8698%" y="277" width="0.2959%" height="15" fill="rgb(245,177,15)" fg:x="256" fg:w="2"/><text x="38.1198%" y="287.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_int (5 samples, 0.74%)</title><rect x="37.7219%" y="325" width="0.7396%" height="15" fill="rgb(206,64,50)" fg:x="255" fg:w="5"/><text x="37.9719%" y="335.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_sbit_long (2 samples, 0.30%)</title><rect x="38.1657%" y="309" width="0.2959%" height="15" fill="rgb(234,36,40)" fg:x="258" fg:w="2"/><text x="38.4157%" y="319.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_special_float (1 samples, 0.15%)</title><rect x="38.7574%" y="293" width="0.1479%" height="15" fill="rgb(213,64,8)" fg:x="262" fg:w="1"/><text x="39.0074%" y="303.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_bit_coord (1 samples, 0.15%)</title><rect x="38.7574%" y="277" width="0.1479%" height="15" fill="rgb(210,75,36)" fg:x="262" fg:w="1"/><text x="39.0074%" y="287.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_nbits (1 samples, 0.15%)</title><rect x="38.7574%" y="261" width="0.1479%" height="15" fill="rgb(229,88,21)" fg:x="262" fg:w="1"/><text x="39.0074%" y="271.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.15%)</title><rect x="38.7574%" y="245" width="0.1479%" height="15" fill="rgb(252,204,47)" fg:x="262" fg:w="1"/><text x="39.0074%" y="255.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_vec (4 samples, 0.59%)</title><rect x="38.4615%" y="325" width="0.5917%" height="15" fill="rgb(208,77,27)" fg:x="260" fg:w="4"/><text x="38.7115%" y="335.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_float (4 samples, 0.59%)</title><rect x="38.4615%" y="309" width="0.5917%" height="15" fill="rgb(221,76,26)" fg:x="260" fg:w="4"/><text x="38.7115%" y="319.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_nbits (1 samples, 0.15%)</title><rect x="38.9053%" y="293" width="0.1479%" height="15" fill="rgb(225,139,18)" fg:x="263" fg:w="1"/><text x="39.1553%" y="303.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.15%)</title><rect x="38.9053%" y="277" width="0.1479%" height="15" fill="rgb(230,137,11)" fg:x="263" fg:w="1"/><text x="39.1553%" y="287.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode (42 samples, 6.21%)</title><rect x="33.1361%" y="341" width="6.2130%" height="15" fill="rgb(212,28,1)" fg:x="224" fg:w="42"/><text x="33.3861%" y="351.50">demopars..</text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_vec_xy (2 samples, 0.30%)</title><rect x="39.0533%" y="325" width="0.2959%" height="15" fill="rgb(248,164,17)" fg:x="264" fg:w="2"/><text x="39.3033%" y="335.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_float (1 samples, 0.15%)</title><rect x="39.2012%" y="309" width="0.1479%" height="15" fill="rgb(222,171,42)" fg:x="265" fg:w="1"/><text x="39.4512%" y="319.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::decode_special_float (1 samples, 0.15%)</title><rect x="39.2012%" y="293" width="0.1479%" height="15" fill="rgb(243,84,45)" fg:x="265" fg:w="1"/><text x="39.4512%" y="303.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_f32 (1 samples, 0.15%)</title><rect x="39.2012%" y="277" width="0.1479%" height="15" fill="rgb(252,49,23)" fg:x="265" fg:w="1"/><text x="39.4512%" y="287.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_u32 (1 samples, 0.15%)</title><rect x="39.2012%" y="261" width="0.1479%" height="15" fill="rgb(215,19,7)" fg:x="265" fg:w="1"/><text x="39.4512%" y="271.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.15%)</title><rect x="39.2012%" y="245" width="0.1479%" height="15" fill="rgb(238,81,41)" fg:x="265" fg:w="1"/><text x="39.4512%" y="255.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_boolie (3 samples, 0.44%)</title><rect x="39.9408%" y="325" width="0.4438%" height="15" fill="rgb(210,199,37)" fg:x="270" fg:w="3"/><text x="40.1908%" y="335.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bit (3 samples, 0.44%)</title><rect x="39.9408%" y="309" width="0.4438%" height="15" fill="rgb(244,192,49)" fg:x="270" fg:w="3"/><text x="40.1908%" y="319.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (3 samples, 0.44%)</title><rect x="39.9408%" y="293" width="0.4438%" height="15" fill="rgb(226,211,11)" fg:x="270" fg:w="3"/><text x="40.1908%" y="303.50"></text></g><g><title>bitter::LittleEndianReader::refill (1 samples, 0.15%)</title><rect x="40.2367%" y="277" width="0.1479%" height="15" fill="rgb(236,162,54)" fg:x="272" fg:w="1"/><text x="40.4867%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.15%)</title><rect x="40.2367%" y="261" width="0.1479%" height="15" fill="rgb(220,229,9)" fg:x="272" fg:w="1"/><text x="40.4867%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.15%)</title><rect x="40.2367%" y="245" width="0.1479%" height="15" fill="rgb(250,87,22)" fg:x="272" fg:w="1"/><text x="40.4867%" y="255.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_inx (14 samples, 2.07%)</title><rect x="39.3491%" y="341" width="2.0710%" height="15" fill="rgb(239,43,17)" fg:x="266" fg:w="14"/><text x="39.5991%" y="351.50">d..</text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_nbits (7 samples, 1.04%)</title><rect x="40.3846%" y="325" width="1.0355%" height="15" fill="rgb(231,177,25)" fg:x="273" fg:w="7"/><text x="40.6346%" y="335.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (7 samples, 1.04%)</title><rect x="40.3846%" y="309" width="1.0355%" height="15" fill="rgb(219,179,1)" fg:x="273" fg:w="7"/><text x="40.6346%" y="319.50"></text></g><g><title>bitter::LittleEndianReader::refill (2 samples, 0.30%)</title><rect x="41.1243%" y="293" width="0.2959%" height="15" fill="rgb(238,219,53)" fg:x="278" fg:w="2"/><text x="41.3743%" y="303.50"></text></g><g><title>core::mem::replace (9 samples, 1.33%)</title><rect x="43.4911%" y="325" width="1.3314%" height="15" fill="rgb(232,167,36)" fg:x="294" fg:w="9"/><text x="43.7411%" y="335.50"></text></g><g><title>core::ptr::read (2 samples, 0.30%)</title><rect x="44.5266%" y="309" width="0.2959%" height="15" fill="rgb(244,19,51)" fg:x="301" fg:w="2"/><text x="44.7766%" y="319.50"></text></g><g><title>__rg_dealloc (1 samples, 0.15%)</title><rect x="44.9704%" y="229" width="0.1479%" height="15" fill="rgb(224,6,22)" fg:x="304" fg:w="1"/><text x="45.2204%" y="239.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.15%)</title><rect x="44.9704%" y="213" width="0.1479%" height="15" fill="rgb(224,145,5)" fg:x="304" fg:w="1"/><text x="45.2204%" y="223.50"></text></g><g><title>__rust_dealloc (2 samples, 0.30%)</title><rect x="45.1183%" y="229" width="0.2959%" height="15" fill="rgb(234,130,49)" fg:x="305" fg:w="2"/><text x="45.3683%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (9 samples, 1.33%)</title><rect x="44.8225%" y="325" width="1.3314%" height="15" fill="rgb(254,6,2)" fg:x="303" fg:w="9"/><text x="45.0725%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (9 samples, 1.33%)</title><rect x="44.8225%" y="309" width="1.3314%" height="15" fill="rgb(208,96,46)" fg:x="303" fg:w="9"/><text x="45.0725%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (9 samples, 1.33%)</title><rect x="44.8225%" y="293" width="1.3314%" height="15" fill="rgb(239,3,39)" fg:x="303" fg:w="9"/><text x="45.0725%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 1.33%)</title><rect x="44.8225%" y="277" width="1.3314%" height="15" fill="rgb(233,210,1)" fg:x="303" fg:w="9"/><text x="45.0725%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 1.18%)</title><rect x="44.9704%" y="261" width="1.1834%" height="15" fill="rgb(244,137,37)" fg:x="304" fg:w="8"/><text x="45.2204%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 1.18%)</title><rect x="44.9704%" y="245" width="1.1834%" height="15" fill="rgb(240,136,2)" fg:x="304" fg:w="8"/><text x="45.2204%" y="255.50"></text></g><g><title>mi_free (5 samples, 0.74%)</title><rect x="45.4142%" y="229" width="0.7396%" height="15" fill="rgb(239,18,37)" fg:x="307" fg:w="5"/><text x="45.6642%" y="239.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.15%)</title><rect x="46.0059%" y="213" width="0.1479%" height="15" fill="rgb(218,185,22)" fg:x="311" fg:w="1"/><text x="46.2559%" y="223.50"></text></g><g><title>mi_slice_first (1 samples, 0.15%)</title><rect x="46.0059%" y="197" width="0.1479%" height="15" fill="rgb(225,218,4)" fg:x="311" fg:w="1"/><text x="46.2559%" y="207.50"></text></g><g><title>ahash::operations::folded_multiply (11 samples, 1.63%)</title><rect x="46.1538%" y="277" width="1.6272%" height="15" fill="rgb(230,182,32)" fg:x="312" fg:w="11"/><text x="46.4038%" y="287.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (11 samples, 1.63%)</title><rect x="46.1538%" y="261" width="1.6272%" height="15" fill="rgb(242,56,43)" fg:x="312" fg:w="11"/><text x="46.4038%" y="271.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (21 samples, 3.11%)</title><rect x="46.1538%" y="293" width="3.1065%" height="15" fill="rgb(233,99,24)" fg:x="312" fg:w="21"/><text x="46.4038%" y="303.50">&lt;ah..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (10 samples, 1.48%)</title><rect x="47.7811%" y="277" width="1.4793%" height="15" fill="rgb(234,209,42)" fg:x="323" fg:w="10"/><text x="48.0311%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (8 samples, 1.18%)</title><rect x="49.2604%" y="261" width="1.1834%" height="15" fill="rgb(227,7,12)" fg:x="333" fg:w="8"/><text x="49.5104%" y="271.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.15%)</title><rect x="53.2544%" y="197" width="0.1479%" height="15" fill="rgb(245,203,43)" fg:x="360" fg:w="1"/><text x="53.5044%" y="207.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.15%)</title><rect x="53.2544%" y="181" width="0.1479%" height="15" fill="rgb(238,205,33)" fg:x="360" fg:w="1"/><text x="53.5044%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.44%)</title><rect x="53.4024%" y="197" width="0.4438%" height="15" fill="rgb(231,56,7)" fg:x="361" fg:w="3"/><text x="53.6524%" y="207.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (18 samples, 2.66%)</title><rect x="51.9231%" y="213" width="2.6627%" height="15" fill="rgb(244,186,29)" fg:x="351" fg:w="18"/><text x="52.1731%" y="223.50">ah..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.74%)</title><rect x="53.8462%" y="197" width="0.7396%" height="15" fill="rgb(234,111,31)" fg:x="364" fg:w="5"/><text x="54.0962%" y="207.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (25 samples, 3.70%)</title><rect x="51.0355%" y="229" width="3.6982%" height="15" fill="rgb(241,149,10)" fg:x="345" fg:w="25"/><text x="51.2855%" y="239.50">&lt;aha..</text></g><g><title>ahash::operations::read_small (1 samples, 0.15%)</title><rect x="54.5858%" y="213" width="0.1479%" height="15" fill="rgb(249,206,44)" fg:x="369" fg:w="1"/><text x="54.8358%" y="223.50"></text></g><g><title>hashbrown::map::make_insert_hash (76 samples, 11.24%)</title><rect x="46.1538%" y="325" width="11.2426%" height="15" fill="rgb(251,153,30)" fg:x="312" fg:w="76"/><text x="46.4038%" y="335.50">hashbrown::map::m..</text></g><g><title>core::hash::BuildHasher::hash_one (76 samples, 11.24%)</title><rect x="46.1538%" y="309" width="11.2426%" height="15" fill="rgb(239,152,38)" fg:x="312" fg:w="76"/><text x="46.4038%" y="319.50">core::hash::Build..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (55 samples, 8.14%)</title><rect x="49.2604%" y="293" width="8.1361%" height="15" fill="rgb(249,139,47)" fg:x="333" fg:w="55"/><text x="49.5104%" y="303.50">core::hash:..</text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (55 samples, 8.14%)</title><rect x="49.2604%" y="277" width="8.1361%" height="15" fill="rgb(244,64,35)" fg:x="333" fg:w="55"/><text x="49.5104%" y="287.50">&lt;alloc::str..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (47 samples, 6.95%)</title><rect x="50.4438%" y="261" width="6.9527%" height="15" fill="rgb(216,46,15)" fg:x="341" fg:w="47"/><text x="50.6938%" y="271.50">core::has..</text></g><g><title>core::hash::Hasher::write_str (43 samples, 6.36%)</title><rect x="51.0355%" y="245" width="6.3609%" height="15" fill="rgb(250,74,19)" fg:x="345" fg:w="43"/><text x="51.2855%" y="255.50">core::ha..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (18 samples, 2.66%)</title><rect x="54.7337%" y="229" width="2.6627%" height="15" fill="rgb(249,42,33)" fg:x="370" fg:w="18"/><text x="54.9837%" y="239.50">&lt;a..</text></g><g><title>ahash::fallback_hash::AHasher::update (18 samples, 2.66%)</title><rect x="54.7337%" y="213" width="2.6627%" height="15" fill="rgb(242,149,17)" fg:x="370" fg:w="18"/><text x="54.9837%" y="223.50">ah..</text></g><g><title>ahash::operations::folded_multiply (4 samples, 0.59%)</title><rect x="56.8047%" y="197" width="0.5917%" height="15" fill="rgb(244,29,21)" fg:x="384" fg:w="4"/><text x="57.0547%" y="207.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2 samples, 0.30%)</title><rect x="57.1006%" y="181" width="0.2959%" height="15" fill="rgb(220,130,37)" fg:x="386" fg:w="2"/><text x="57.3506%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 1.04%)</title><rect x="59.9112%" y="277" width="1.0355%" height="15" fill="rgb(211,67,2)" fg:x="405" fg:w="7"/><text x="60.1612%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (7 samples, 1.04%)</title><rect x="59.9112%" y="261" width="1.0355%" height="15" fill="rgb(235,68,52)" fg:x="405" fg:w="7"/><text x="60.1612%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (6 samples, 0.89%)</title><rect x="60.9467%" y="229" width="0.8876%" height="15" fill="rgb(246,142,3)" fg:x="412" fg:w="6"/><text x="61.1967%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (88 samples, 13.02%)</title><rect x="60.9467%" y="261" width="13.0178%" height="15" fill="rgb(241,25,7)" fg:x="412" fg:w="88"/><text x="61.1967%" y="271.50">hashbrown::map::equi..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (88 samples, 13.02%)</title><rect x="60.9467%" y="245" width="13.0178%" height="15" fill="rgb(242,119,39)" fg:x="412" fg:w="88"/><text x="61.1967%" y="255.50">&lt;alloc::string::Stri..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (82 samples, 12.13%)</title><rect x="61.8343%" y="229" width="12.1302%" height="15" fill="rgb(241,98,45)" fg:x="418" fg:w="82"/><text x="62.0843%" y="239.50">core::str::traits:..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (82 samples, 12.13%)</title><rect x="61.8343%" y="213" width="12.1302%" height="15" fill="rgb(254,28,30)" fg:x="418" fg:w="82"/><text x="62.0843%" y="223.50">core::cmp::impls::..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (82 samples, 12.13%)</title><rect x="61.8343%" y="197" width="12.1302%" height="15" fill="rgb(241,142,54)" fg:x="418" fg:w="82"/><text x="62.0843%" y="207.50">core::slice::cmp::..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (82 samples, 12.13%)</title><rect x="61.8343%" y="181" width="12.1302%" height="15" fill="rgb(222,85,15)" fg:x="418" fg:w="82"/><text x="62.0843%" y="191.50">&lt;[A] as core::slic..</text></g><g><title>[libc.so.6] (49 samples, 7.25%)</title><rect x="66.7160%" y="165" width="7.2485%" height="15" fill="rgb(210,85,47)" fg:x="451" fg:w="49"/><text x="66.9660%" y="175.50">[libc.so.6]</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (90 samples, 13.31%)</title><rect x="60.9467%" y="277" width="13.3136%" height="15" fill="rgb(224,206,25)" fg:x="412" fg:w="90"/><text x="61.1967%" y="287.50">hashbrown::raw::RawT..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2 samples, 0.30%)</title><rect x="73.9645%" y="261" width="0.2959%" height="15" fill="rgb(243,201,19)" fg:x="500" fg:w="2"/><text x="74.2145%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.30%)</title><rect x="73.9645%" y="245" width="0.2959%" height="15" fill="rgb(236,59,4)" fg:x="500" fg:w="2"/><text x="74.2145%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.30%)</title><rect x="73.9645%" y="229" width="0.2959%" height="15" fill="rgb(254,179,45)" fg:x="500" fg:w="2"/><text x="74.2145%" y="239.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (2 samples, 0.30%)</title><rect x="73.9645%" y="213" width="0.2959%" height="15" fill="rgb(226,14,10)" fg:x="500" fg:w="2"/><text x="74.2145%" y="223.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (2 samples, 0.30%)</title><rect x="73.9645%" y="197" width="0.2959%" height="15" fill="rgb(244,27,41)" fg:x="500" fg:w="2"/><text x="74.2145%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (10 samples, 1.48%)</title><rect x="74.2604%" y="277" width="1.4793%" height="15" fill="rgb(235,35,32)" fg:x="502" fg:w="10"/><text x="74.5104%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (16 samples, 2.37%)</title><rect x="75.7396%" y="277" width="2.3669%" height="15" fill="rgb(218,68,31)" fg:x="512" fg:w="16"/><text x="75.9896%" y="287.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (16 samples, 2.37%)</title><rect x="75.7396%" y="261" width="2.3669%" height="15" fill="rgb(207,120,37)" fg:x="512" fg:w="16"/><text x="75.9896%" y="271.50">co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 2.37%)</title><rect x="75.7396%" y="245" width="2.3669%" height="15" fill="rgb(227,98,0)" fg:x="512" fg:w="16"/><text x="75.9896%" y="255.50">co..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (148 samples, 21.89%)</title><rect x="57.3964%" y="325" width="21.8935%" height="15" fill="rgb(207,7,3)" fg:x="388" fg:w="148"/><text x="57.6464%" y="335.50">hashbrown::raw::RawTable&lt;T,A&gt;::get_..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (148 samples, 21.89%)</title><rect x="57.3964%" y="309" width="21.8935%" height="15" fill="rgb(206,98,19)" fg:x="388" fg:w="148"/><text x="57.6464%" y="319.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (148 samples, 21.89%)</title><rect x="57.3964%" y="293" width="21.8935%" height="15" fill="rgb(217,5,26)" fg:x="388" fg:w="148"/><text x="57.6464%" y="303.50">hashbrown::raw::RawTableInner&lt;A&gt;::f..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 1.18%)</title><rect x="78.1065%" y="277" width="1.1834%" height="15" fill="rgb(235,190,38)" fg:x="528" fg:w="8"/><text x="78.3565%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 1.18%)</title><rect x="78.1065%" y="261" width="1.1834%" height="15" fill="rgb(247,86,24)" fg:x="528" fg:w="8"/><text x="78.3565%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (257 samples, 38.02%)</title><rect x="41.4201%" y="341" width="38.0178%" height="15" fill="rgb(205,101,16)" fg:x="280" fg:w="257"/><text x="41.6701%" y="351.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.15%)</title><rect x="79.2899%" y="325" width="0.1479%" height="15" fill="rgb(246,168,33)" fg:x="536" fg:w="1"/><text x="79.5399%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.15%)</title><rect x="79.2899%" y="309" width="0.1479%" height="15" fill="rgb(231,114,1)" fg:x="536" fg:w="1"/><text x="79.5399%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.15%)</title><rect x="79.2899%" y="293" width="0.1479%" height="15" fill="rgb(207,184,53)" fg:x="536" fg:w="1"/><text x="79.5399%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.15%)</title><rect x="79.2899%" y="277" width="0.1479%" height="15" fill="rgb(224,95,51)" fg:x="536" fg:w="1"/><text x="79.5399%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.15%)</title><rect x="79.2899%" y="261" width="0.1479%" height="15" fill="rgb(212,188,45)" fg:x="536" fg:w="1"/><text x="79.5399%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1 samples, 0.15%)</title><rect x="79.2899%" y="245" width="0.1479%" height="15" fill="rgb(223,154,38)" fg:x="536" fg:w="1"/><text x="79.5399%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.15%)</title><rect x="79.2899%" y="229" width="0.1479%" height="15" fill="rgb(251,22,52)" fg:x="536" fg:w="1"/><text x="79.5399%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (1 samples, 0.15%)</title><rect x="79.2899%" y="213" width="0.1479%" height="15" fill="rgb(229,209,22)" fg:x="536" fg:w="1"/><text x="79.5399%" y="223.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.15%)</title><rect x="79.2899%" y="197" width="0.1479%" height="15" fill="rgb(234,138,34)" fg:x="536" fg:w="1"/><text x="79.5399%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.15%)</title><rect x="79.2899%" y="181" width="0.1479%" height="15" fill="rgb(212,95,11)" fg:x="536" fg:w="1"/><text x="79.5399%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.15%)</title><rect x="79.2899%" y="165" width="0.1479%" height="15" fill="rgb(240,179,47)" fg:x="536" fg:w="1"/><text x="79.5399%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.15%)</title><rect x="79.2899%" y="149" width="0.1479%" height="15" fill="rgb(240,163,11)" fg:x="536" fg:w="1"/><text x="79.5399%" y="159.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.15%)</title><rect x="79.2899%" y="133" width="0.1479%" height="15" fill="rgb(236,37,12)" fg:x="536" fg:w="1"/><text x="79.5399%" y="143.50"></text></g><g><title>mi_find_page (1 samples, 0.15%)</title><rect x="79.2899%" y="117" width="0.1479%" height="15" fill="rgb(232,164,16)" fg:x="536" fg:w="1"/><text x="79.5399%" y="127.50"></text></g><g><title>mi_find_free_page (1 samples, 0.15%)</title><rect x="79.2899%" y="101" width="0.1479%" height="15" fill="rgb(244,205,15)" fg:x="536" fg:w="1"/><text x="79.5399%" y="111.50"></text></g><g><title>mi_page_queue (1 samples, 0.15%)</title><rect x="79.2899%" y="85" width="0.1479%" height="15" fill="rgb(223,117,47)" fg:x="536" fg:w="1"/><text x="79.5399%" y="95.50"></text></g><g><title>_mi_bin (1 samples, 0.15%)</title><rect x="79.2899%" y="69" width="0.1479%" height="15" fill="rgb(244,107,35)" fg:x="536" fg:w="1"/><text x="79.5399%" y="79.50"></text></g><g><title>mi_bin (1 samples, 0.15%)</title><rect x="79.2899%" y="53" width="0.1479%" height="15" fill="rgb(205,140,8)" fg:x="536" fg:w="1"/><text x="79.5399%" y="63.50"></text></g><g><title>mi_free (10 samples, 1.48%)</title><rect x="79.4379%" y="341" width="1.4793%" height="15" fill="rgb(228,84,46)" fg:x="537" fg:w="10"/><text x="79.6879%" y="351.50"></text></g><g><title>_mi_segment_page_of (4 samples, 0.59%)</title><rect x="80.3254%" y="325" width="0.5917%" height="15" fill="rgb(254,188,9)" fg:x="543" fg:w="4"/><text x="80.5754%" y="335.50"></text></g><g><title>mi_slice_first (4 samples, 0.59%)</title><rect x="80.3254%" y="309" width="0.5917%" height="15" fill="rgb(206,112,54)" fg:x="543" fg:w="4"/><text x="80.5754%" y="319.50"></text></g><g><title>core::mem::replace (1 samples, 0.15%)</title><rect x="86.9822%" y="309" width="0.1479%" height="15" fill="rgb(216,84,49)" fg:x="588" fg:w="1"/><text x="87.2322%" y="319.50"></text></g><g><title>core::ptr::read (1 samples, 0.15%)</title><rect x="86.9822%" y="293" width="0.1479%" height="15" fill="rgb(214,194,35)" fg:x="588" fg:w="1"/><text x="87.2322%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.59%)</title><rect x="87.1302%" y="309" width="0.5917%" height="15" fill="rgb(249,28,3)" fg:x="589" fg:w="4"/><text x="87.3802%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.59%)</title><rect x="87.1302%" y="293" width="0.5917%" height="15" fill="rgb(222,56,52)" fg:x="589" fg:w="4"/><text x="87.3802%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.59%)</title><rect x="87.1302%" y="277" width="0.5917%" height="15" fill="rgb(245,217,50)" fg:x="589" fg:w="4"/><text x="87.3802%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.59%)</title><rect x="87.1302%" y="261" width="0.5917%" height="15" fill="rgb(213,201,24)" fg:x="589" fg:w="4"/><text x="87.3802%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.44%)</title><rect x="87.2781%" y="245" width="0.4438%" height="15" fill="rgb(248,116,28)" fg:x="590" fg:w="3"/><text x="87.5281%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.44%)</title><rect x="87.2781%" y="229" width="0.4438%" height="15" fill="rgb(219,72,43)" fg:x="590" fg:w="3"/><text x="87.5281%" y="239.50"></text></g><g><title>mi_free (3 samples, 0.44%)</title><rect x="87.2781%" y="213" width="0.4438%" height="15" fill="rgb(209,138,14)" fg:x="590" fg:w="3"/><text x="87.5281%" y="223.50"></text></g><g><title>ahash::operations::folded_multiply (2 samples, 0.30%)</title><rect x="87.7219%" y="261" width="0.2959%" height="15" fill="rgb(222,18,33)" fg:x="593" fg:w="2"/><text x="87.9719%" y="271.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2 samples, 0.30%)</title><rect x="87.7219%" y="245" width="0.2959%" height="15" fill="rgb(213,199,7)" fg:x="593" fg:w="2"/><text x="87.9719%" y="255.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (3 samples, 0.44%)</title><rect x="87.7219%" y="277" width="0.4438%" height="15" fill="rgb(250,110,10)" fg:x="593" fg:w="3"/><text x="87.9719%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.15%)</title><rect x="88.0178%" y="261" width="0.1479%" height="15" fill="rgb(248,123,6)" fg:x="595" fg:w="1"/><text x="88.2678%" y="271.50"></text></g><g><title>hashbrown::map::make_insert_hash (4 samples, 0.59%)</title><rect x="87.7219%" y="309" width="0.5917%" height="15" fill="rgb(206,91,31)" fg:x="593" fg:w="4"/><text x="87.9719%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.59%)</title><rect x="87.7219%" y="293" width="0.5917%" height="15" fill="rgb(211,154,13)" fg:x="593" fg:w="4"/><text x="87.9719%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.15%)</title><rect x="88.1657%" y="277" width="0.1479%" height="15" fill="rgb(225,148,7)" fg:x="596" fg:w="1"/><text x="88.4157%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.15%)</title><rect x="88.1657%" y="261" width="0.1479%" height="15" fill="rgb(220,160,43)" fg:x="596" fg:w="1"/><text x="88.4157%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.15%)</title><rect x="88.1657%" y="245" width="0.1479%" height="15" fill="rgb(213,52,39)" fg:x="596" fg:w="1"/><text x="88.4157%" y="255.50"></text></g><g><title>core::hash::Hasher::write_str (1 samples, 0.15%)</title><rect x="88.1657%" y="229" width="0.1479%" height="15" fill="rgb(243,137,7)" fg:x="596" fg:w="1"/><text x="88.4157%" y="239.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (1 samples, 0.15%)</title><rect x="88.1657%" y="213" width="0.1479%" height="15" fill="rgb(230,79,13)" fg:x="596" fg:w="1"/><text x="88.4157%" y="223.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (1 samples, 0.15%)</title><rect x="88.1657%" y="197" width="0.1479%" height="15" fill="rgb(247,105,23)" fg:x="596" fg:w="1"/><text x="88.4157%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="88.6095%" y="261" width="0.1479%" height="15" fill="rgb(223,179,41)" fg:x="599" fg:w="1"/><text x="88.8595%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.15%)</title><rect x="88.6095%" y="245" width="0.1479%" height="15" fill="rgb(218,9,34)" fg:x="599" fg:w="1"/><text x="88.8595%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (1 samples, 0.15%)</title><rect x="88.7574%" y="213" width="0.1479%" height="15" fill="rgb(222,106,8)" fg:x="600" fg:w="1"/><text x="89.0074%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (15 samples, 2.22%)</title><rect x="88.7574%" y="261" width="2.2189%" height="15" fill="rgb(211,220,0)" fg:x="600" fg:w="15"/><text x="89.0074%" y="271.50">h..</text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (15 samples, 2.22%)</title><rect x="88.7574%" y="245" width="2.2189%" height="15" fill="rgb(229,52,16)" fg:x="600" fg:w="15"/><text x="89.0074%" y="255.50">h..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (15 samples, 2.22%)</title><rect x="88.7574%" y="229" width="2.2189%" height="15" fill="rgb(212,155,18)" fg:x="600" fg:w="15"/><text x="89.0074%" y="239.50">&lt;..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (14 samples, 2.07%)</title><rect x="88.9053%" y="213" width="2.0710%" height="15" fill="rgb(242,21,14)" fg:x="601" fg:w="14"/><text x="89.1553%" y="223.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (14 samples, 2.07%)</title><rect x="88.9053%" y="197" width="2.0710%" height="15" fill="rgb(222,19,48)" fg:x="601" fg:w="14"/><text x="89.1553%" y="207.50">c..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (14 samples, 2.07%)</title><rect x="88.9053%" y="181" width="2.0710%" height="15" fill="rgb(232,45,27)" fg:x="601" fg:w="14"/><text x="89.1553%" y="191.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (14 samples, 2.07%)</title><rect x="88.9053%" y="165" width="2.0710%" height="15" fill="rgb(249,103,42)" fg:x="601" fg:w="14"/><text x="89.1553%" y="175.50">&lt;..</text></g><g><title>[libc.so.6] (8 samples, 1.18%)</title><rect x="89.7929%" y="149" width="1.1834%" height="15" fill="rgb(246,81,33)" fg:x="607" fg:w="8"/><text x="90.0429%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.15%)</title><rect x="90.9763%" y="261" width="0.1479%" height="15" fill="rgb(252,33,42)" fg:x="615" fg:w="1"/><text x="91.2263%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.30%)</title><rect x="91.1243%" y="261" width="0.2959%" height="15" fill="rgb(209,212,41)" fg:x="616" fg:w="2"/><text x="91.3743%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.30%)</title><rect x="91.1243%" y="245" width="0.2959%" height="15" fill="rgb(207,154,6)" fg:x="616" fg:w="2"/><text x="91.3743%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.30%)</title><rect x="91.1243%" y="229" width="0.2959%" height="15" fill="rgb(223,64,47)" fg:x="616" fg:w="2"/><text x="91.3743%" y="239.50"></text></g><g><title>demoparser::parsing::entities::update_entity (597 samples, 88.31%)</title><rect x="3.4024%" y="373" width="88.3136%" height="15" fill="rgb(211,161,38)" fg:x="23" fg:w="597"/><text x="3.6524%" y="383.50">demoparser::parsing::entities::update_entity</text></g><g><title>demoparser::parsing::entities::parse_ent_props (583 samples, 86.24%)</title><rect x="5.4734%" y="357" width="86.2426%" height="15" fill="rgb(219,138,40)" fg:x="37" fg:w="583"/><text x="5.7234%" y="367.50">demoparser::parsing::entities::parse_ent_props</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (73 samples, 10.80%)</title><rect x="80.9172%" y="341" width="10.7988%" height="15" fill="rgb(241,228,46)" fg:x="547" fg:w="73"/><text x="81.1672%" y="351.50">std::collections..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (33 samples, 4.88%)</title><rect x="86.8343%" y="325" width="4.8817%" height="15" fill="rgb(223,209,38)" fg:x="587" fg:w="33"/><text x="87.0843%" y="335.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (23 samples, 3.40%)</title><rect x="88.3136%" y="309" width="3.4024%" height="15" fill="rgb(236,164,45)" fg:x="597" fg:w="23"/><text x="88.5636%" y="319.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (23 samples, 3.40%)</title><rect x="88.3136%" y="293" width="3.4024%" height="15" fill="rgb(231,15,5)" fg:x="597" fg:w="23"/><text x="88.5636%" y="303.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (23 samples, 3.40%)</title><rect x="88.3136%" y="277" width="3.4024%" height="15" fill="rgb(252,35,15)" fg:x="597" fg:w="23"/><text x="88.5636%" y="287.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.30%)</title><rect x="91.4201%" y="261" width="0.2959%" height="15" fill="rgb(248,181,18)" fg:x="618" fg:w="2"/><text x="91.6701%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.30%)</title><rect x="91.4201%" y="245" width="0.2959%" height="15" fill="rgb(233,39,42)" fg:x="618" fg:w="2"/><text x="91.6701%" y="255.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_u_bit_var (3 samples, 0.44%)</title><rect x="91.7160%" y="373" width="0.4438%" height="15" fill="rgb(238,110,33)" fg:x="620" fg:w="3"/><text x="91.9660%" y="383.50"></text></g><g><title>demoparser::parsing::read_bits_skip::MyBitreader::read_nbits (1 samples, 0.15%)</title><rect x="92.0118%" y="357" width="0.1479%" height="15" fill="rgb(233,195,10)" fg:x="622" fg:w="1"/><text x="92.2618%" y="367.50"></text></g><g><title>&lt;bitter::LittleEndianReader as bitter::BitReader&gt;::read_bits (1 samples, 0.15%)</title><rect x="92.0118%" y="341" width="0.1479%" height="15" fill="rgb(254,105,3)" fg:x="622" fg:w="1"/><text x="92.2618%" y="351.50"></text></g><g><title>_mi_thread_id (1 samples, 0.15%)</title><rect x="92.1598%" y="357" width="0.1479%" height="15" fill="rgb(221,225,9)" fg:x="623" fg:w="1"/><text x="92.4098%" y="367.50"></text></g><g><title>mi_tls_slot (1 samples, 0.15%)</title><rect x="92.1598%" y="341" width="0.1479%" height="15" fill="rgb(224,227,45)" fg:x="623" fg:w="1"/><text x="92.4098%" y="351.50"></text></g><g><title>demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_packet_entities (605 samples, 89.50%)</title><rect x="2.9586%" y="389" width="89.4970%" height="15" fill="rgb(229,198,43)" fg:x="20" fg:w="605"/><text x="3.2086%" y="399.50">demoparser::parsing::entities::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_packet_entities</text></g><g><title>mi_free (2 samples, 0.30%)</title><rect x="92.1598%" y="373" width="0.2959%" height="15" fill="rgb(206,209,35)" fg:x="623" fg:w="2"/><text x="92.4098%" y="383.50"></text></g><g><title>mi_block_set_next (1 samples, 0.15%)</title><rect x="92.3077%" y="357" width="0.1479%" height="15" fill="rgb(245,195,53)" fg:x="624" fg:w="1"/><text x="92.5577%" y="367.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.15%)</title><rect x="92.3077%" y="341" width="0.1479%" height="15" fill="rgb(240,92,26)" fg:x="624" fg:w="1"/><text x="92.5577%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;csgoproto::netmessages::CSVCMsg_GameEvent&gt; (1 samples, 0.15%)</title><rect x="92.4556%" y="373" width="0.1479%" height="15" fill="rgb(207,40,23)" fg:x="625" fg:w="1"/><text x="92.7056%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;csgoproto::netmessages::csvcmsg_game_event::Key_t&gt;&gt; (1 samples, 0.15%)</title><rect x="92.4556%" y="357" width="0.1479%" height="15" fill="rgb(223,111,35)" fg:x="625" fg:w="1"/><text x="92.7056%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;csgoproto::netmessages::csvcmsg_game_event::Key_t&gt;&gt; (1 samples, 0.15%)</title><rect x="92.4556%" y="341" width="0.1479%" height="15" fill="rgb(229,147,28)" fg:x="625" fg:w="1"/><text x="92.7056%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="92.4556%" y="325" width="0.1479%" height="15" fill="rgb(211,29,28)" fg:x="625" fg:w="1"/><text x="92.7056%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.15%)</title><rect x="92.4556%" y="309" width="0.1479%" height="15" fill="rgb(228,72,33)" fg:x="625" fg:w="1"/><text x="92.7056%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.15%)</title><rect x="92.4556%" y="293" width="0.1479%" height="15" fill="rgb(205,214,31)" fg:x="625" fg:w="1"/><text x="92.7056%" y="303.50"></text></g><g><title>mi_free (1 samples, 0.15%)</title><rect x="92.4556%" y="277" width="0.1479%" height="15" fill="rgb(224,111,15)" fg:x="625" fg:w="1"/><text x="92.7056%" y="287.50"></text></g><g><title>demoparser::parsing::game_events::&lt;impl demoparser::parsing::parser::Demo&gt;::parse_game_events (2 samples, 0.30%)</title><rect x="92.4556%" y="389" width="0.2959%" height="15" fill="rgb(253,21,26)" fg:x="625" fg:w="2"/><text x="92.7056%" y="399.50"></text></g><g><title>demoparser::parsing::game_events::match_data_to_game_event (1 samples, 0.15%)</title><rect x="92.6036%" y="373" width="0.1479%" height="15" fill="rgb(245,139,43)" fg:x="626" fg:w="1"/><text x="92.8536%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (1 samples, 0.15%)</title><rect x="92.6036%" y="357" width="0.1479%" height="15" fill="rgb(252,170,7)" fg:x="626" fg:w="1"/><text x="92.8536%" y="367.50"></text></g><g><title>&lt;&amp;alloc::string::String as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.15%)</title><rect x="92.6036%" y="341" width="0.1479%" height="15" fill="rgb(231,118,14)" fg:x="626" fg:w="1"/><text x="92.8536%" y="351.50"></text></g><g><title>core::str::pattern::Pattern::is_contained_in (1 samples, 0.15%)</title><rect x="92.6036%" y="325" width="0.1479%" height="15" fill="rgb(238,83,0)" fg:x="626" fg:w="1"/><text x="92.8536%" y="335.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (1 samples, 0.15%)</title><rect x="92.6036%" y="309" width="0.1479%" height="15" fill="rgb(221,39,39)" fg:x="626" fg:w="1"/><text x="92.8536%" y="319.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.15%)</title><rect x="92.6036%" y="293" width="0.1479%" height="15" fill="rgb(222,119,46)" fg:x="626" fg:w="1"/><text x="92.8536%" y="303.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.15%)</title><rect x="92.6036%" y="277" width="0.1479%" height="15" fill="rgb(222,165,49)" fg:x="626" fg:w="1"/><text x="92.8536%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.15%)</title><rect x="92.6036%" y="261" width="0.1479%" height="15" fill="rgb(219,113,52)" fg:x="626" fg:w="1"/><text x="92.8536%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.15%)</title><rect x="92.6036%" y="245" width="0.1479%" height="15" fill="rgb(214,7,15)" fg:x="626" fg:w="1"/><text x="92.8536%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="92.6036%" y="229" width="0.1479%" height="15" fill="rgb(235,32,4)" fg:x="626" fg:w="1"/><text x="92.8536%" y="239.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_i32 (1 samples, 0.15%)</title><rect x="92.7515%" y="389" width="0.1479%" height="15" fill="rgb(238,90,54)" fg:x="627" fg:w="1"/><text x="93.0015%" y="399.50"></text></g><g><title>&lt;demoparser::parsing::variants::BytesVariant as core::ops::index::Index&lt;Idx&gt;&gt;::index (1 samples, 0.15%)</title><rect x="92.7515%" y="373" width="0.1479%" height="15" fill="rgb(213,208,19)" fg:x="627" fg:w="1"/><text x="93.0015%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.15%)</title><rect x="92.7515%" y="357" width="0.1479%" height="15" fill="rgb(233,156,4)" fg:x="627" fg:w="1"/><text x="93.0015%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.15%)</title><rect x="92.7515%" y="341" width="0.1479%" height="15" fill="rgb(207,194,5)" fg:x="627" fg:w="1"/><text x="93.0015%" y="351.50"></text></g><g><title>demoparser::parsing::read_bytes::&lt;impl demoparser::parsing::parser::Demo&gt;::read_varint (2 samples, 0.30%)</title><rect x="92.8994%" y="389" width="0.2959%" height="15" fill="rgb(206,111,30)" fg:x="628" fg:w="2"/><text x="93.1494%" y="399.50"></text></g><g><title>&lt;demoparser::parsing::stringtables::StField as core::clone::Clone&gt;::clone (1 samples, 0.15%)</title><rect x="93.1953%" y="293" width="0.1479%" height="15" fill="rgb(243,70,54)" fg:x="630" fg:w="1"/><text x="93.4453%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.15%)</title><rect x="93.1953%" y="277" width="0.1479%" height="15" fill="rgb(242,28,8)" fg:x="630" fg:w="1"/><text x="93.4453%" y="287.50"></text></g><g><title>demoparser::parsing::stringtables::&lt;impl demoparser::parsing::parser::Demo&gt;::create_string_table (2 samples, 0.30%)</title><rect x="93.1953%" y="389" width="0.2959%" height="15" fill="rgb(219,106,18)" fg:x="630" fg:w="2"/><text x="93.4453%" y="399.50"></text></g><g><title>&lt;demoparser::parsing::stringtables::StringTable as core::clone::Clone&gt;::clone (2 samples, 0.30%)</title><rect x="93.1953%" y="373" width="0.2959%" height="15" fill="rgb(244,222,10)" fg:x="630" fg:w="2"/><text x="93.4453%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.30%)</title><rect x="93.1953%" y="357" width="0.2959%" height="15" fill="rgb(236,179,52)" fg:x="630" fg:w="2"/><text x="93.4453%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.30%)</title><rect x="93.1953%" y="341" width="0.2959%" height="15" fill="rgb(213,23,39)" fg:x="630" fg:w="2"/><text x="93.4453%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.30%)</title><rect x="93.1953%" y="325" width="0.2959%" height="15" fill="rgb(238,48,10)" fg:x="630" fg:w="2"/><text x="93.4453%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.30%)</title><rect x="93.1953%" y="309" width="0.2959%" height="15" fill="rgb(251,196,23)" fg:x="630" fg:w="2"/><text x="93.4453%" y="319.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.15%)</title><rect x="93.3432%" y="293" width="0.1479%" height="15" fill="rgb(250,152,24)" fg:x="631" fg:w="1"/><text x="93.5932%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="93.3432%" y="277" width="0.1479%" height="15" fill="rgb(209,150,17)" fg:x="631" fg:w="1"/><text x="93.5932%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="93.3432%" y="261" width="0.1479%" height="15" fill="rgb(234,202,34)" fg:x="631" fg:w="1"/><text x="93.5932%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="93.3432%" y="245" width="0.1479%" height="15" fill="rgb(253,148,53)" fg:x="631" fg:w="1"/><text x="93.5932%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="93.3432%" y="229" width="0.1479%" height="15" fill="rgb(218,129,16)" fg:x="631" fg:w="1"/><text x="93.5932%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="93.3432%" y="213" width="0.1479%" height="15" fill="rgb(216,85,19)" fg:x="631" fg:w="1"/><text x="93.5932%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="93.3432%" y="197" width="0.1479%" height="15" fill="rgb(235,228,7)" fg:x="631" fg:w="1"/><text x="93.5932%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="93.3432%" y="181" width="0.1479%" height="15" fill="rgb(245,175,0)" fg:x="631" fg:w="1"/><text x="93.5932%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="93.3432%" y="165" width="0.1479%" height="15" fill="rgb(208,168,36)" fg:x="631" fg:w="1"/><text x="93.5932%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="93.3432%" y="149" width="0.1479%" height="15" fill="rgb(246,171,24)" fg:x="631" fg:w="1"/><text x="93.5932%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="93.3432%" y="133" width="0.1479%" height="15" fill="rgb(215,142,24)" fg:x="631" fg:w="1"/><text x="93.5932%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="93.3432%" y="117" width="0.1479%" height="15" fill="rgb(250,187,7)" fg:x="631" fg:w="1"/><text x="93.5932%" y="127.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::check_eof (1 samples, 0.15%)</title><rect x="93.7870%" y="373" width="0.1479%" height="15" fill="rgb(228,66,33)" fg:x="634" fg:w="1"/><text x="94.0370%" y="383.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::eof (1 samples, 0.15%)</title><rect x="93.7870%" y="357" width="0.1479%" height="15" fill="rgb(234,215,21)" fg:x="634" fg:w="1"/><text x="94.0370%" y="367.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::eof (1 samples, 0.15%)</title><rect x="93.7870%" y="341" width="0.1479%" height="15" fill="rgb(222,191,20)" fg:x="634" fg:w="1"/><text x="94.0370%" y="351.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::fill_buf (1 samples, 0.15%)</title><rect x="93.7870%" y="325" width="0.1479%" height="15" fill="rgb(245,79,54)" fg:x="634" fg:w="1"/><text x="94.0370%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.15%)</title><rect x="94.3787%" y="341" width="0.1479%" height="15" fill="rgb(240,10,37)" fg:x="638" fg:w="1"/><text x="94.6287%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.30%)</title><rect x="94.8225%" y="309" width="0.2959%" height="15" fill="rgb(214,192,32)" fg:x="641" fg:w="2"/><text x="95.0725%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (3 samples, 0.44%)</title><rect x="95.4142%" y="277" width="0.4438%" height="15" fill="rgb(209,36,54)" fg:x="645" fg:w="3"/><text x="95.6642%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (3 samples, 0.44%)</title><rect x="95.4142%" y="261" width="0.4438%" height="15" fill="rgb(220,10,11)" fg:x="645" fg:w="3"/><text x="95.6642%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (3 samples, 0.44%)</title><rect x="95.4142%" y="245" width="0.4438%" height="15" fill="rgb(221,106,17)" fg:x="645" fg:w="3"/><text x="95.6642%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (3 samples, 0.44%)</title><rect x="95.4142%" y="229" width="0.4438%" height="15" fill="rgb(251,142,44)" fg:x="645" fg:w="3"/><text x="95.6642%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.44%)</title><rect x="95.4142%" y="213" width="0.4438%" height="15" fill="rgb(238,13,15)" fg:x="645" fg:w="3"/><text x="95.6642%" y="223.50"></text></g><g><title>mi_malloc (2 samples, 0.30%)</title><rect x="95.5621%" y="197" width="0.2959%" height="15" fill="rgb(208,107,27)" fg:x="646" fg:w="2"/><text x="95.8121%" y="207.50"></text></g><g><title>mi_heap_malloc (2 samples, 0.30%)</title><rect x="95.5621%" y="181" width="0.2959%" height="15" fill="rgb(205,136,37)" fg:x="646" fg:w="2"/><text x="95.8121%" y="191.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.15%)</title><rect x="95.7101%" y="165" width="0.1479%" height="15" fill="rgb(250,205,27)" fg:x="647" fg:w="1"/><text x="95.9601%" y="175.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.15%)</title><rect x="95.7101%" y="149" width="0.1479%" height="15" fill="rgb(210,80,43)" fg:x="647" fg:w="1"/><text x="95.9601%" y="159.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (13 samples, 1.92%)</title><rect x="94.5266%" y="341" width="1.9231%" height="15" fill="rgb(247,160,36)" fg:x="639" fg:w="13"/><text x="94.7766%" y="351.50">p..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (11 samples, 1.63%)</title><rect x="94.8225%" y="325" width="1.6272%" height="15" fill="rgb(234,13,49)" fg:x="641" fg:w="11"/><text x="95.0725%" y="335.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (9 samples, 1.33%)</title><rect x="95.1183%" y="309" width="1.3314%" height="15" fill="rgb(234,122,0)" fg:x="643" fg:w="9"/><text x="95.3683%" y="319.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (9 samples, 1.33%)</title><rect x="95.1183%" y="293" width="1.3314%" height="15" fill="rgb(207,146,38)" fg:x="643" fg:w="9"/><text x="95.3683%" y="303.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (4 samples, 0.59%)</title><rect x="95.8580%" y="277" width="0.5917%" height="15" fill="rgb(207,177,25)" fg:x="648" fg:w="4"/><text x="96.1080%" y="287.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (4 samples, 0.59%)</title><rect x="95.8580%" y="261" width="0.5917%" height="15" fill="rgb(211,178,42)" fg:x="648" fg:w="4"/><text x="96.1080%" y="271.50"></text></g><g><title>protobuf::misc::maybe_uninit_write_slice (4 samples, 0.59%)</title><rect x="95.8580%" y="245" width="0.5917%" height="15" fill="rgb(230,69,54)" fg:x="648" fg:w="4"/><text x="96.1080%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.59%)</title><rect x="95.8580%" y="229" width="0.5917%" height="15" fill="rgb(214,135,41)" fg:x="648" fg:w="4"/><text x="96.1080%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.59%)</title><rect x="95.8580%" y="213" width="0.5917%" height="15" fill="rgb(237,67,25)" fg:x="648" fg:w="4"/><text x="96.1080%" y="223.50"></text></g><g><title>[libc.so.6] (4 samples, 0.59%)</title><rect x="95.8580%" y="197" width="0.5917%" height="15" fill="rgb(222,189,50)" fg:x="648" fg:w="4"/><text x="96.1080%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="96.3018%" y="181" width="0.1479%" height="15" fill="rgb(245,148,34)" fg:x="651" fg:w="1"/><text x="96.5518%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="96.3018%" y="165" width="0.1479%" height="15" fill="rgb(222,29,6)" fg:x="651" fg:w="1"/><text x="96.5518%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="96.3018%" y="149" width="0.1479%" height="15" fill="rgb(221,189,43)" fg:x="651" fg:w="1"/><text x="96.5518%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="96.3018%" y="133" width="0.1479%" height="15" fill="rgb(207,36,27)" fg:x="651" fg:w="1"/><text x="96.5518%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="96.3018%" y="117" width="0.1479%" height="15" fill="rgb(217,90,24)" fg:x="651" fg:w="1"/><text x="96.5518%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="96.3018%" y="101" width="0.1479%" height="15" fill="rgb(224,66,35)" fg:x="651" fg:w="1"/><text x="96.5518%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="96.3018%" y="85" width="0.1479%" height="15" fill="rgb(221,13,50)" fg:x="651" fg:w="1"/><text x="96.5518%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="96.3018%" y="69" width="0.1479%" height="15" fill="rgb(236,68,49)" fg:x="651" fg:w="1"/><text x="96.5518%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="96.3018%" y="53" width="0.1479%" height="15" fill="rgb(229,146,28)" fg:x="651" fg:w="1"/><text x="96.5518%" y="63.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int32 (2 samples, 0.30%)</title><rect x="96.4497%" y="341" width="0.2959%" height="15" fill="rgb(225,31,38)" fg:x="652" fg:w="2"/><text x="96.6997%" y="351.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int64 (2 samples, 0.30%)</title><rect x="96.4497%" y="325" width="0.2959%" height="15" fill="rgb(250,208,3)" fg:x="652" fg:w="2"/><text x="96.6997%" y="335.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (2 samples, 0.30%)</title><rect x="96.4497%" y="309" width="0.2959%" height="15" fill="rgb(246,54,23)" fg:x="652" fg:w="2"/><text x="96.6997%" y="319.50"></text></g><g><title>protobuf::varint::decode::decode_varint64 (2 samples, 0.30%)</title><rect x="96.4497%" y="293" width="0.2959%" height="15" fill="rgb(243,76,11)" fg:x="652" fg:w="2"/><text x="96.6997%" y="303.50"></text></g><g><title>protobuf::varint::decode::decode_varint_impl (2 samples, 0.30%)</title><rect x="96.4497%" y="277" width="0.2959%" height="15" fill="rgb(245,21,50)" fg:x="652" fg:w="2"/><text x="96.6997%" y="287.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_EntityMsg as protobuf::message::Message&gt;::merge_from (20 samples, 2.96%)</title><rect x="93.9349%" y="357" width="2.9586%" height="15" fill="rgb(228,9,43)" fg:x="635" fg:w="20"/><text x="94.1849%" y="367.50">&lt;cs..</text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_tag_or_eof (1 samples, 0.15%)</title><rect x="96.7456%" y="341" width="0.1479%" height="15" fill="rgb(208,100,47)" fg:x="654" fg:w="1"/><text x="96.9956%" y="351.50"></text></g><g><title>_mi_memcpy_aligned (1 samples, 0.15%)</title><rect x="96.8935%" y="213" width="0.1479%" height="15" fill="rgb(232,26,8)" fg:x="655" fg:w="1"/><text x="97.1435%" y="223.50"></text></g><g><title>_mi_memcpy (1 samples, 0.15%)</title><rect x="96.8935%" y="197" width="0.1479%" height="15" fill="rgb(216,166,38)" fg:x="655" fg:w="1"/><text x="97.1435%" y="207.50"></text></g><g><title>memcpy (1 samples, 0.15%)</title><rect x="96.8935%" y="181" width="0.1479%" height="15" fill="rgb(251,202,51)" fg:x="655" fg:w="1"/><text x="97.1435%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="96.8935%" y="165" width="0.1479%" height="15" fill="rgb(254,216,34)" fg:x="655" fg:w="1"/><text x="97.1435%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.30%)</title><rect x="96.8935%" y="325" width="0.2959%" height="15" fill="rgb(251,32,27)" fg:x="655" fg:w="2"/><text x="97.1435%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.30%)</title><rect x="96.8935%" y="309" width="0.2959%" height="15" fill="rgb(208,127,28)" fg:x="655" fg:w="2"/><text x="97.1435%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.30%)</title><rect x="96.8935%" y="293" width="0.2959%" height="15" fill="rgb(224,137,22)" fg:x="655" fg:w="2"/><text x="97.1435%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.30%)</title><rect x="96.8935%" y="277" width="0.2959%" height="15" fill="rgb(254,70,32)" fg:x="655" fg:w="2"/><text x="97.1435%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.30%)</title><rect x="96.8935%" y="261" width="0.2959%" height="15" fill="rgb(229,75,37)" fg:x="655" fg:w="2"/><text x="97.1435%" y="271.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.30%)</title><rect x="96.8935%" y="245" width="0.2959%" height="15" fill="rgb(252,64,23)" fg:x="655" fg:w="2"/><text x="97.1435%" y="255.50"></text></g><g><title>_mi_heap_realloc_zero (2 samples, 0.30%)</title><rect x="96.8935%" y="229" width="0.2959%" height="15" fill="rgb(232,162,48)" fg:x="655" fg:w="2"/><text x="97.1435%" y="239.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.15%)</title><rect x="97.0414%" y="213" width="0.1479%" height="15" fill="rgb(246,160,12)" fg:x="656" fg:w="1"/><text x="97.2914%" y="223.50"></text></g><g><title>_mi_malloc_generic (1 samples, 0.15%)</title><rect x="97.0414%" y="197" width="0.1479%" height="15" fill="rgb(247,166,0)" fg:x="656" fg:w="1"/><text x="97.2914%" y="207.50"></text></g><g><title>mi_find_page (1 samples, 0.15%)</title><rect x="97.0414%" y="181" width="0.1479%" height="15" fill="rgb(249,219,21)" fg:x="656" fg:w="1"/><text x="97.2914%" y="191.50"></text></g><g><title>mi_find_free_page (1 samples, 0.15%)</title><rect x="97.0414%" y="165" width="0.1479%" height="15" fill="rgb(205,209,3)" fg:x="656" fg:w="1"/><text x="97.2914%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.44%)</title><rect x="96.8935%" y="341" width="0.4438%" height="15" fill="rgb(243,44,1)" fg:x="655" fg:w="3"/><text x="97.1435%" y="351.50"></text></g><g><title>core::ptr::write (1 samples, 0.15%)</title><rect x="97.1893%" y="325" width="0.1479%" height="15" fill="rgb(206,159,16)" fg:x="657" fg:w="1"/><text x="97.4393%" y="335.50"></text></g><g><title>&lt;csgoproto::netmessages::csvcmsg_game_event::Key_t as protobuf::message::Message&gt;::merge_from (1 samples, 0.15%)</title><rect x="97.3373%" y="309" width="0.1479%" height="15" fill="rgb(244,77,30)" fg:x="658" fg:w="1"/><text x="97.5873%" y="319.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int32 (1 samples, 0.15%)</title><rect x="97.3373%" y="293" width="0.1479%" height="15" fill="rgb(218,69,12)" fg:x="658" fg:w="1"/><text x="97.5873%" y="303.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int64 (1 samples, 0.15%)</title><rect x="97.3373%" y="277" width="0.1479%" height="15" fill="rgb(212,87,7)" fg:x="658" fg:w="1"/><text x="97.5873%" y="287.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (1 samples, 0.15%)</title><rect x="97.3373%" y="261" width="0.1479%" height="15" fill="rgb(245,114,25)" fg:x="658" fg:w="1"/><text x="97.5873%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;protobuf::coded_input_stream::CodedInputStream::merge_message::DecrRecursion&gt; (1 samples, 0.15%)</title><rect x="97.4852%" y="309" width="0.1479%" height="15" fill="rgb(210,61,42)" fg:x="659" fg:w="1"/><text x="97.7352%" y="319.50"></text></g><g><title>&lt;protobuf::coded_input_stream::CodedInputStream::merge_message::DecrRecursion as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="97.4852%" y="293" width="0.1479%" height="15" fill="rgb(211,52,33)" fg:x="659" fg:w="1"/><text x="97.7352%" y="303.50"></text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_GameEvent as protobuf::message::Message&gt;::merge_from (6 samples, 0.89%)</title><rect x="96.8935%" y="357" width="0.8876%" height="15" fill="rgb(234,58,33)" fg:x="655" fg:w="6"/><text x="97.1435%" y="367.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_message (3 samples, 0.44%)</title><rect x="97.3373%" y="341" width="0.4438%" height="15" fill="rgb(220,115,36)" fg:x="658" fg:w="3"/><text x="97.5873%" y="351.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::merge_message (3 samples, 0.44%)</title><rect x="97.3373%" y="325" width="0.4438%" height="15" fill="rgb(243,153,54)" fg:x="658" fg:w="3"/><text x="97.5873%" y="335.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (1 samples, 0.15%)</title><rect x="97.6331%" y="309" width="0.1479%" height="15" fill="rgb(251,47,18)" fg:x="660" fg:w="1"/><text x="97.8831%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.15%)</title><rect x="97.7811%" y="277" width="0.1479%" height="15" fill="rgb(242,102,42)" fg:x="661" fg:w="1"/><text x="98.0311%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.15%)</title><rect x="97.7811%" y="261" width="0.1479%" height="15" fill="rgb(234,31,38)" fg:x="661" fg:w="1"/><text x="98.0311%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (1 samples, 0.15%)</title><rect x="97.7811%" y="245" width="0.1479%" height="15" fill="rgb(221,117,51)" fg:x="661" fg:w="1"/><text x="98.0311%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (1 samples, 0.15%)</title><rect x="97.7811%" y="229" width="0.1479%" height="15" fill="rgb(212,20,18)" fg:x="661" fg:w="1"/><text x="98.0311%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.15%)</title><rect x="97.7811%" y="213" width="0.1479%" height="15" fill="rgb(245,133,36)" fg:x="661" fg:w="1"/><text x="98.0311%" y="223.50"></text></g><g><title>mi_malloc (1 samples, 0.15%)</title><rect x="97.7811%" y="197" width="0.1479%" height="15" fill="rgb(212,6,19)" fg:x="661" fg:w="1"/><text x="98.0311%" y="207.50"></text></g><g><title>mi_heap_malloc (1 samples, 0.15%)</title><rect x="97.7811%" y="181" width="0.1479%" height="15" fill="rgb(218,1,36)" fg:x="661" fg:w="1"/><text x="98.0311%" y="191.50"></text></g><g><title>mi_heap_malloc_small (1 samples, 0.15%)</title><rect x="97.7811%" y="165" width="0.1479%" height="15" fill="rgb(246,84,54)" fg:x="661" fg:w="1"/><text x="98.0311%" y="175.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.15%)</title><rect x="97.7811%" y="149" width="0.1479%" height="15" fill="rgb(242,110,6)" fg:x="661" fg:w="1"/><text x="98.0311%" y="159.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_bytes_into (8 samples, 1.18%)</title><rect x="97.7811%" y="309" width="1.1834%" height="15" fill="rgb(214,47,5)" fg:x="661" fg:w="8"/><text x="98.0311%" y="319.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact_to_vec (8 samples, 1.18%)</title><rect x="97.7811%" y="293" width="1.1834%" height="15" fill="rgb(218,159,25)" fg:x="661" fg:w="8"/><text x="98.0311%" y="303.50"></text></g><g><title>protobuf::coded_input_stream::buf_read_iter::BufReadIter::read_exact (7 samples, 1.04%)</title><rect x="97.9290%" y="277" width="1.0355%" height="15" fill="rgb(215,211,28)" fg:x="662" fg:w="7"/><text x="98.1790%" y="287.50"></text></g><g><title>protobuf::coded_input_stream::input_buf::InputBuf::read_bytes (7 samples, 1.04%)</title><rect x="97.9290%" y="261" width="1.0355%" height="15" fill="rgb(238,59,32)" fg:x="662" fg:w="7"/><text x="98.1790%" y="271.50"></text></g><g><title>protobuf::misc::maybe_uninit_write_slice (7 samples, 1.04%)</title><rect x="97.9290%" y="245" width="1.0355%" height="15" fill="rgb(226,82,3)" fg:x="662" fg:w="7"/><text x="98.1790%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (7 samples, 1.04%)</title><rect x="97.9290%" y="229" width="1.0355%" height="15" fill="rgb(240,164,32)" fg:x="662" fg:w="7"/><text x="98.1790%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 1.04%)</title><rect x="97.9290%" y="213" width="1.0355%" height="15" fill="rgb(232,46,7)" fg:x="662" fg:w="7"/><text x="98.1790%" y="223.50"></text></g><g><title>[libc.so.6] (7 samples, 1.04%)</title><rect x="97.9290%" y="197" width="1.0355%" height="15" fill="rgb(229,129,53)" fg:x="662" fg:w="7"/><text x="98.1790%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="98.6686%" y="181" width="0.2959%" height="15" fill="rgb(234,188,29)" fg:x="667" fg:w="2"/><text x="98.9186%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="98.6686%" y="165" width="0.2959%" height="15" fill="rgb(246,141,4)" fg:x="667" fg:w="2"/><text x="98.9186%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="98.6686%" y="149" width="0.2959%" height="15" fill="rgb(229,23,39)" fg:x="667" fg:w="2"/><text x="98.9186%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="98.6686%" y="133" width="0.2959%" height="15" fill="rgb(206,12,3)" fg:x="667" fg:w="2"/><text x="98.9186%" y="143.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="98.6686%" y="117" width="0.2959%" height="15" fill="rgb(252,226,20)" fg:x="667" fg:w="2"/><text x="98.9186%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="98.6686%" y="101" width="0.2959%" height="15" fill="rgb(216,123,35)" fg:x="667" fg:w="2"/><text x="98.9186%" y="111.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="98.6686%" y="85" width="0.2959%" height="15" fill="rgb(212,68,40)" fg:x="667" fg:w="2"/><text x="98.9186%" y="95.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="98.6686%" y="69" width="0.2959%" height="15" fill="rgb(254,125,32)" fg:x="667" fg:w="2"/><text x="98.9186%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="98.6686%" y="53" width="0.2959%" height="15" fill="rgb(253,97,22)" fg:x="667" fg:w="2"/><text x="98.9186%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="98.8166%" y="37" width="0.1479%" height="15" fill="rgb(241,101,14)" fg:x="668" fg:w="1"/><text x="99.0666%" y="47.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes (9 samples, 1.33%)</title><rect x="97.7811%" y="341" width="1.3314%" height="15" fill="rgb(238,103,29)" fg:x="661" fg:w="9"/><text x="98.0311%" y="351.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_bytes_into (9 samples, 1.33%)</title><rect x="97.7811%" y="325" width="1.3314%" height="15" fill="rgb(233,195,47)" fg:x="661" fg:w="9"/><text x="98.0311%" y="335.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint32 (1 samples, 0.15%)</title><rect x="98.9645%" y="309" width="0.1479%" height="15" fill="rgb(246,218,30)" fg:x="669" fg:w="1"/><text x="99.2145%" y="319.50"></text></g><g><title>demoparser (671 samples, 99.26%)</title><rect x="0.0000%" y="725" width="99.2604%" height="15" fill="rgb(219,145,47)" fg:x="0" fg:w="671"/><text x="0.2500%" y="735.50">demoparser</text></g><g><title>_start (669 samples, 98.96%)</title><rect x="0.2959%" y="709" width="98.9645%" height="15" fill="rgb(243,12,26)" fg:x="2" fg:w="669"/><text x="0.5459%" y="719.50">_start</text></g><g><title>__libc_start_main_impl (669 samples, 98.96%)</title><rect x="0.2959%" y="693" width="98.9645%" height="15" fill="rgb(214,87,16)" fg:x="2" fg:w="669"/><text x="0.5459%" y="703.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (669 samples, 98.96%)</title><rect x="0.2959%" y="677" width="98.9645%" height="15" fill="rgb(208,99,42)" fg:x="2" fg:w="669"/><text x="0.5459%" y="687.50">__libc_start_call_main</text></g><g><title>main (668 samples, 98.82%)</title><rect x="0.4438%" y="661" width="98.8166%" height="15" fill="rgb(253,99,2)" fg:x="3" fg:w="668"/><text x="0.6938%" y="671.50">main</text></g><g><title>std::rt::lang_start_internal (668 samples, 98.82%)</title><rect x="0.4438%" y="645" width="98.8166%" height="15" fill="rgb(220,168,23)" fg:x="3" fg:w="668"/><text x="0.6938%" y="655.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (668 samples, 98.82%)</title><rect x="0.4438%" y="629" width="98.8166%" height="15" fill="rgb(242,38,24)" fg:x="3" fg:w="668"/><text x="0.6938%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (668 samples, 98.82%)</title><rect x="0.4438%" y="613" width="98.8166%" height="15" fill="rgb(225,182,9)" fg:x="3" fg:w="668"/><text x="0.6938%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (668 samples, 98.82%)</title><rect x="0.4438%" y="597" width="98.8166%" height="15" fill="rgb(243,178,37)" fg:x="3" fg:w="668"/><text x="0.6938%" y="607.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (668 samples, 98.82%)</title><rect x="0.4438%" y="581" width="98.8166%" height="15" fill="rgb(232,139,19)" fg:x="3" fg:w="668"/><text x="0.6938%" y="591.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (668 samples, 98.82%)</title><rect x="0.4438%" y="565" width="98.8166%" height="15" fill="rgb(225,201,24)" fg:x="3" fg:w="668"/><text x="0.6938%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (668 samples, 98.82%)</title><rect x="0.4438%" y="549" width="98.8166%" height="15" fill="rgb(221,47,46)" fg:x="3" fg:w="668"/><text x="0.6938%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (668 samples, 98.82%)</title><rect x="0.4438%" y="533" width="98.8166%" height="15" fill="rgb(249,23,13)" fg:x="3" fg:w="668"/><text x="0.6938%" y="543.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (668 samples, 98.82%)</title><rect x="0.4438%" y="517" width="98.8166%" height="15" fill="rgb(219,9,5)" fg:x="3" fg:w="668"/><text x="0.6938%" y="527.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (668 samples, 98.82%)</title><rect x="0.4438%" y="501" width="98.8166%" height="15" fill="rgb(254,171,16)" fg:x="3" fg:w="668"/><text x="0.6938%" y="511.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (668 samples, 98.82%)</title><rect x="0.4438%" y="485" width="98.8166%" height="15" fill="rgb(230,171,20)" fg:x="3" fg:w="668"/><text x="0.6938%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (668 samples, 98.82%)</title><rect x="0.4438%" y="469" width="98.8166%" height="15" fill="rgb(210,71,41)" fg:x="3" fg:w="668"/><text x="0.6938%" y="479.50">core::ops::function::FnOnce::call_once</text></g><g><title>demoparser::main (668 samples, 98.82%)</title><rect x="0.4438%" y="453" width="98.8166%" height="15" fill="rgb(206,173,20)" fg:x="3" fg:w="668"/><text x="0.6938%" y="463.50">demoparser::main</text></g><g><title>demoparser::parsing::parser::Demo::start_parsing (664 samples, 98.22%)</title><rect x="1.0355%" y="437" width="98.2249%" height="15" fill="rgb(233,88,34)" fg:x="7" fg:w="664"/><text x="1.2855%" y="447.50">demoparser::parsing::parser::Demo::start_parsing</text></g><g><title>demoparser::parsing::parser::Demo::parse_cmd (661 samples, 97.78%)</title><rect x="1.4793%" y="421" width="97.7811%" height="15" fill="rgb(223,209,46)" fg:x="10" fg:w="661"/><text x="1.7293%" y="431.50">demoparser::parsing::parser::Demo::parse_cmd</text></g><g><title>demoparser::parsing::parser::Demo::parse_packet (655 samples, 96.89%)</title><rect x="2.3669%" y="405" width="96.8935%" height="15" fill="rgb(250,43,18)" fg:x="16" fg:w="655"/><text x="2.6169%" y="415.50">demoparser::parsing::parser::Demo::parse_packet</text></g><g><title>protobuf::message::Message::parse_from_bytes (39 samples, 5.77%)</title><rect x="93.4911%" y="389" width="5.7692%" height="15" fill="rgb(208,13,10)" fg:x="632" fg:w="39"/><text x="93.7411%" y="399.50">protobu..</text></g><g><title>protobuf::message::Message::parse_from (36 samples, 5.33%)</title><rect x="93.9349%" y="373" width="5.3254%" height="15" fill="rgb(212,200,36)" fg:x="635" fg:w="36"/><text x="94.1849%" y="383.50">protobu..</text></g><g><title>&lt;csgoproto::netmessages::CSVCMsg_PacketEntities as protobuf::message::Message&gt;::merge_from (10 samples, 1.48%)</title><rect x="97.7811%" y="357" width="1.4793%" height="15" fill="rgb(225,90,30)" fg:x="661" fg:w="10"/><text x="98.0311%" y="367.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int32 (1 samples, 0.15%)</title><rect x="99.1124%" y="341" width="0.1479%" height="15" fill="rgb(236,182,39)" fg:x="670" fg:w="1"/><text x="99.3624%" y="351.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_int64 (1 samples, 0.15%)</title><rect x="99.1124%" y="325" width="0.1479%" height="15" fill="rgb(212,144,35)" fg:x="670" fg:w="1"/><text x="99.3624%" y="335.50"></text></g><g><title>protobuf::coded_input_stream::CodedInputStream::read_raw_varint64 (1 samples, 0.15%)</title><rect x="99.1124%" y="309" width="0.1479%" height="15" fill="rgb(228,63,44)" fg:x="670" fg:w="1"/><text x="99.3624%" y="319.50"></text></g><g><title>all (676 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(228,109,6)" fg:x="0" fg:w="676"/><text x="0.2500%" y="751.50"></text></g><g><title>perf-exec (5 samples, 0.74%)</title><rect x="99.2604%" y="725" width="0.7396%" height="15" fill="rgb(238,117,24)" fg:x="671" fg:w="5"/><text x="99.5104%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2604%" y="709" width="0.7396%" height="15" fill="rgb(242,26,26)" fg:x="671" fg:w="5"/><text x="99.5104%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2604%" y="693" width="0.7396%" height="15" fill="rgb(221,92,48)" fg:x="671" fg:w="5"/><text x="99.5104%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2604%" y="677" width="0.7396%" height="15" fill="rgb(209,209,32)" fg:x="671" fg:w="5"/><text x="99.5104%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2604%" y="661" width="0.7396%" height="15" fill="rgb(221,70,22)" fg:x="671" fg:w="5"/><text x="99.5104%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2604%" y="645" width="0.7396%" height="15" fill="rgb(248,145,5)" fg:x="671" fg:w="5"/><text x="99.5104%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2604%" y="629" width="0.7396%" height="15" fill="rgb(226,116,26)" fg:x="671" fg:w="5"/><text x="99.5104%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2604%" y="613" width="0.7396%" height="15" fill="rgb(244,5,17)" fg:x="671" fg:w="5"/><text x="99.5104%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2604%" y="597" width="0.7396%" height="15" fill="rgb(252,159,33)" fg:x="671" fg:w="5"/><text x="99.5104%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2604%" y="581" width="0.7396%" height="15" fill="rgb(206,71,0)" fg:x="671" fg:w="5"/><text x="99.5104%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2604%" y="565" width="0.7396%" height="15" fill="rgb(233,118,54)" fg:x="671" fg:w="5"/><text x="99.5104%" y="575.50"></text></g></svg></svg>